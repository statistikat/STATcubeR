[{"path":"https://statistikat.github.io/STATcubeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"The GNU General Public License, Version 2, June 1991 (GPLv2)","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://statistikat.github.io/STATcubeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://statistikat.github.io/STATcubeR/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"Terms And Conditions For Copying, Distribution And Modification","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://statistikat.github.io/STATcubeR/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"No Warranty","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_list.html","id":"interactive-overview","dir":"Articles","previous_headings":"","what":"Interactive overview","title":"Available Datasets","text":"Since metadata contained OGD JSON files available German, following overview uses German labels. Click individual table cells get information.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_list.html","id":"cli-usage","dir":"Articles","previous_headings":"","what":"CLI usage","title":"Available Datasets","text":"get simplified version summary, use od_list() function. uses webscraping techniques get dataset ids German labels based contents https://data.statistik.gv./web/catalog.jsp.","code":"all_datasets <- od_list() all_datasets # A tibble: 373 × 3    category      id                              label                              <chr>         <chr>                           <chr>                            1 Neueste Daten OGD_prodvindexusb2021_KJID2021… Produktivitätsindex je unselbs…  2 Neueste Daten OGD_prodindexstd2021_KJID2021_… Produktivitätsindex je geleist…  3 Neueste Daten OGD_bewwohn303_BB303_1          Baubewilligungen, Wohnungen ab…  4 Neueste Daten OGD_kjiprodindex2021_KJID2021_… Produktionsindex Nace Rev.2 (B…  5 Neueste Daten OGD_bauvh302_BB302_1            Baubewilligungen, Neuerrichtun…  6 Neueste Daten OGD_kjiumsatzindex2021_KJID202… Umsatzindex Nace Rev.2 (Basis …  7 Neueste Daten OGD_bruttoverdiensteindex2021a… Bruttoverdiensteindex (Basis 2…  8 Neueste Daten OGD_beschaeftigtenindex2021_KJ… Index der Beschäftigten insges…  9 Neueste Daten OGD_kjiarbeitsvolindex2021_KJI… Arbeitsvolumensindex (Basis 20… 10 Neueste Daten OGD_kjiauftragseingangsindex20… Auftragseingangsindex Nace Rev… # ℹ 363 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_list.html","id":"overview-via-json","dir":"Articles","previous_headings":"","what":"Overview via json","title":"Available Datasets","text":"identify interesting dataset, consider downloading metadata json get details. json contains links metadata including link data.statistik.gv.. output generated  OGD_prodindexstd2021_KJID2021_PVISTD_1.json  shows summary available metadata. parts metadata can extracted $ using keys json specification.","code":"(id <- all_datasets$id[2]) #> [1] \"OGD_prodindexstd2021_KJID2021_PVISTD_1\" json <- od_json(id) json #> Produktivitätsindex je geleisteter Arbeitsstunde (Basis 2021) #>  #> Measures: Produktivitätsindex je geleisteter Arbeitsstunde insgesamt, #>   Bergbau und Gewinnung von Steinen und Erden <B>, Herstellung von Waren #>   <C>, Energieversorgung <D>, Wasservers.-u.-entsorg.; Abfallentsorgung <E>, #>   Bau <F>, Hochbau <F - HB>, Tiefbau <F - TB>, Vorleistungen <A>, Energie #>   <E>, … (59 more) #> Fields: Berichtszeitraum #> Updated: 2024-10-10 09:08:36 #> Tags: Produktivitätsindex, Arbeitsstunde #> Categories: Wirtschaft und Tourismus json$extras$update_frequency #> [1] \"monatlich\""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_list.html","id":"showcase","dir":"Articles","previous_headings":"","what":"Showcase","title":"Available Datasets","text":"Population Hospitalizations Earnings Household forecast Gross regional product population dataset measures Austrian population 2117 different regions. hospitalizations dataset timeseries 2009 2019 115 different medical procedures. structure earnings dataset showcases average earnings four different classifications. See tabulation article usage examples dataset. household forecast contains predictions number private households 4 household characteristics 2011 2080. GRP dataset contains GRP NUTS-3 regions 2000 2019.","code":"od_table(\"OGD_bevstandjbab2002_BevStand_2020\")$tabulate() # A STATcubeR tibble: 392,144 x 5    `Time section` Sex   Commune (aggregation by p…¹ `Age in single years` Number  * <date>         <fct> <fct>                       <fct>                  <int>  1 2020-01-01     male  Eisenstadt <10101>          under 1 year old          77  2 2020-01-01     male  Eisenstadt <10101>          1 year old                75  3 2020-01-01     male  Eisenstadt <10101>          2 years old               70  4 2020-01-01     male  Eisenstadt <10101>          3 years old               83  5 2020-01-01     male  Eisenstadt <10101>          4 years old               67  6 2020-01-01     male  Eisenstadt <10101>          5 years old               56  7 2020-01-01     male  Eisenstadt <10101>          6 years old               75  8 2020-01-01     male  Eisenstadt <10101>          7 years old               73  9 2020-01-01     male  Eisenstadt <10101>          8 years old               74 10 2020-01-01     male  Eisenstadt <10101>          9 years old               86 # ℹ 392,134 more rows # ℹ abbreviated name: ¹​`Commune (aggregation by political district)` od_table(\"OGD_krankenbewegungen_ex_LEISTUNGEN_1\")$tabulate() # A STATcubeR tibble: 91,898 x 6    `Year of discharge` Sex   `Age (four classes)` NUTS-2 region (place of resi…¹  * <date>              <fct> <fct>                <fct>                           1 2009-01-01          male  Up to 14 years old   Non-Austria                     2 2009-01-01          male  Up to 14 years old   Non-Austria                     3 2009-01-01          male  Up to 14 years old   Non-Austria                     4 2009-01-01          male  Up to 14 years old   Non-Austria                     5 2009-01-01          male  Up to 14 years old   Non-Austria                     6 2009-01-01          male  Up to 14 years old   Non-Austria                     7 2009-01-01          male  Up to 14 years old   Non-Austria                     8 2009-01-01          male  Up to 14 years old   Non-Austria                     9 2009-01-01          male  Up to 14 years old   Non-Austria                    10 2009-01-01          male  Up to 14 years old   Non-Austria                    # ℹ 91,888 more rows # ℹ abbreviated name: ¹​`NUTS-2 region (place of residence)` # ℹ 2 more variables: `Medical procedures - subchapters` <fct>, #   `Medical procedures` <int> od_table(\"OGD_veste309_Veste309_1\")$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                  * <fct>     <fct>       <fct>              <fct>                                 1 Sum total Total       Total              \"Total\"                               2 Sum total Total       Total              \"Standard employment \"                3 Sum total Total       Total              \"Non-standard employment (total)\"     4 Sum total Total       Total              \"Non-standard employment: part-time…  5 Sum total Total       Total              \"Non-standard employment: fixed-ter…  6 Sum total Total       Total              \"Non-standard employment: marginal …  7 Sum total Total       Total              \"Non-standard employment: temporary…  8 Sum total Total       AT11 Burgenland    \"Total\"                               9 Sum total Total       AT12 Lower Austria \"Total\"                              10 Sum total Total       AT13 Vienna        \"Total\"                              # ℹ 62 more rows # ℹ 5 more variables: `Arithmetic mean` <dbl>, `1st quartile` <dbl>, #   `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl> od_table(dat_name)$tabulate() # A STATcubeR tibble: 630 x 4    Time       `Province (NUTS 2-Einheit) <9>` Private households at the end of…¹  * <date>     <fct>                                                        <int>  1 2011-01-01 Burgenland <AT11>                                           117588  2 2011-01-01 Carinthia <AT21>                                            241461  3 2011-01-01 Lower Austria <AT12>                                        682380  4 2011-01-01 Upper Austria <AT31>                                        593029  5 2011-01-01 Salzburg <AT32>                                             224629  6 2011-01-01 Styria <AT22>                                               515258  7 2011-01-01 Tyrol <AT33>                                                299024  8 2011-01-01 Vorarlberg <AT34>                                           152948  9 2011-01-01 Vienna <AT13>                                               843181 10 2012-01-01 Burgenland <AT11>                                           118776 # ℹ 620 more rows # ℹ abbreviated name: ¹​`Private households at the end of the year` # ℹ 1 more variable: `Annual average of private households` <int> od_table(\"OGD_vgrrgr104_RGR104_1\")$tabulate() # A STATcubeR tibble: 1,114 x 6    Time       `NUTS-3`                        Gross regional product; current …¹  * <date>     <fct>                                                        <dbl>  1 2000-01-01 Mittelburgenland <AT111>                                       597  2 2000-01-01 Nordburgenland <AT112>                                        2641  3 2000-01-01 Südburgenland <AT113>                                         1559  4 2000-01-01 Mostviertel-Eisenwurzen <AT121>                               4778  5 2000-01-01 Niederösterreich-Süd <AT122>                                  4714  6 2000-01-01 Sankt Pölten <AT123>                                          3647  7 2000-01-01 Waldviertel <AT124>                                           3947  8 2000-01-01 Weinviertel <AT125>                                           1722  9 2000-01-01 Wiener Umland-Nordteil <AT126>                                4841 10 2000-01-01 Wiener Umland-Südteil <AT127>                                 9886 # ℹ 1,104 more rows # ℹ abbreviated name: ¹​`Gross regional product; current prices in million Euro` # ℹ 3 more variables: `Gross regional product per inhabitant` <dbl>, #   `Gross regional product per person employed` <dbl>, #   `Change in % to previous year prices` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"File Management","text":"default, STATcubeR caches accessed resources data.statistik.gv.temporary directory current R session. Let’s examine example happens data structure earnings survey (SES) requested. First STATcubeR grab json metadata dataset https://data.statistik.gv./ogd/json?dataset=OGD_veste309_Veste309_1 check resources belong . resource, attributes name last_modified extracted json. also included od_table object $resources. last_modified tells us resource changed fileserver. resource exist cache last modified entry json newer cached file, downloaded server. Otherwise, cached version reused.","code":"od_cache_dir() #> [1] \"/tmp/RtmpmnzINA/STATcubeR/open_data/\" earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$resources # A data frame: 7 × 6   name           last_modified       cached               size download parsed   <chr>          <dttm>              <dttm>              <dbl>    <dbl>  <dbl> 1 meta.json      2022-03-24 11:29:48 2024-10-10 10:51:36  4062     553. NA     2 data.csv       2022-03-24 11:29:48 2024-10-10 10:51:36  4931     175.  0.834 3 HEADER.csv     2022-03-24 11:29:48 2024-10-10 10:51:36   516     175.  0.463 4 C-A11-0.csv    2022-03-24 11:29:48 2024-10-10 10:51:36   159     175.  0.459 5 C-STAATS-0.csv 2022-03-24 11:29:48 2024-10-10 10:51:37   697     175.  0.472 6 C-VEBDL-0.csv  2022-03-24 11:29:48 2024-10-10 10:51:37   518     174.  0.472 7 C-BESCHV-0.csv 2022-03-24 11:29:48 2024-10-10 10:51:37   641     174.  0.497"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"access-and-updates","dir":"Articles","previous_headings":"","what":"Access and Updates","title":"File Management","text":"Cached files can accessed od_cache_file(). specified file exists cache, path file returned. Otherwise, file downloaded cache path returned. files use naming conventions open data fileserver. read files cache data.frames, use od_resource() parameters od_cache_file(). apply special parser dataset drops unneeded columns normalizes column names. parser behaves differently header files, data files fields. Json files can accessed od_json().","code":"od_cache_file(\"OGD_veste309_Veste309_1\") #> [1] \"/tmp/RtmpmnzINA/STATcubeR/open_data/OGD_veste309_Veste309_1.csv\" od_cache_file(\"OGD_veste309_Veste309_1\", \"C-A11-0\") #> [1] \"/tmp/RtmpmnzINA/STATcubeR/open_data/OGD_veste309_Veste309_1_C-A11-0.csv\" od_resource(\"OGD_veste309_Veste309_1\", \"C-A11-0\") # A data frame: 3 × 7   code  label label_de  label_en  parent de_desc en_desc * <chr> <chr> <chr>     <chr>     <fct>  <lgl>   <lgl>   1 A11-1 NA    insgesamt Sum total NA     NA      NA      2 A11-2 NA    männlich  Male      NA     NA      NA      3 A11-3 NA    weiblich  Female    NA     NA      NA json <- od_json(\"OGD_veste309_Veste309_1\") unlist(json$tags) #> [1] \"Staatsangehörigkeit\"      \"Bundesland\"               #> [3] \"Beschäftigungsverhältnis\""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"clearing-and-changing","dir":"Articles","previous_headings":"","what":"Clearing and Changing","title":"File Management","text":"od_cache_clear(id) can used clear cache files belonging passed dataset id. saw earnings$resources contains 7 rows, therefore 7 files deleted cleanup. want use persistent directory like ~/.cache/STATcubeR/open_data/ caching, directory can changed od_cache_dir(new).","code":"od_cache_clear(\"OGD_veste309_Veste309_1\") #> deleted 7 files from '/tmp/RtmpmnzINA/STATcubeR/open_data/' od_cache_dir(\"~/.cache/STATcubeR/open_data/\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"the-resources-field","dir":"Articles","previous_headings":"","what":"The resources field","title":"File Management","text":"Let’s go back $resources field earnings. already looked name last_modified. remaining columns can interpreted follows cached tells us last time cache file resource modified. size file size bytes download contains amount milliseconds used retrieve resource last updated. parsed reports amount milliseconds took od_resource() convert file contents data.frame() format. json file, parsing time always reported NA.","code":"earnings$resources # A data frame: 7 × 6   name           last_modified       cached               size download parsed   <chr>          <dttm>              <dttm>              <dbl>    <dbl>  <dbl> 1 meta.json      2022-03-24 11:29:48 2024-10-10 10:51:36  4062     553. NA     2 data.csv       2022-03-24 11:29:48 2024-10-10 10:51:36  4931     175.  0.834 3 HEADER.csv     2022-03-24 11:29:48 2024-10-10 10:51:36   516     175.  0.463 4 C-A11-0.csv    2022-03-24 11:29:48 2024-10-10 10:51:36   159     175.  0.459 5 C-STAATS-0.csv 2022-03-24 11:29:48 2024-10-10 10:51:37   697     175.  0.472 6 C-VEBDL-0.csv  2022-03-24 11:29:48 2024-10-10 10:51:37   518     174.  0.472 7 C-BESCHV-0.csv 2022-03-24 11:29:48 2024-10-10 10:51:37   641     174.  0.497"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"whats-in-the-cache","dir":"Articles","previous_headings":"","what":"What’s in the cache?","title":"File Management","text":"od_cache_summary() give overview files available cache directory. returned table contains one row every dataset. column updated contains last modified date datasets json file. json, data header give file sizes bytes corresponding files. fields total size fields n_fields number classification files available. can get clear picture much disk space used dataset. Note od_cache_summary() gathers information local file system based filenames, file.mtime() file.size().","code":"od_cache_summary() #> NULL"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_resources.html","id":"download-history","dir":"Articles","previous_headings":"","what":"Download history","title":"File Management","text":"get history files downloaded server, use od_downloads(). file, timestamp download recorded well download time milliseconds.","code":"od_downloads() # A data frame: 7 × 3   time                file                                   downloaded   <dttm>              <chr>                                       <dbl> 1 2024-10-10 10:51:36 OGD_veste309_Veste309_1.json                 553. 2 2024-10-10 10:51:36 OGD_veste309_Veste309_1.csv                  175. 3 2024-10-10 10:51:36 OGD_veste309_Veste309_1_HEADER.csv           175. 4 2024-10-10 10:51:36 OGD_veste309_Veste309_1_C-A11-0.csv          175. 5 2024-10-10 10:51:37 OGD_veste309_Veste309_1_C-STAATS-0.csv       175. 6 2024-10-10 10:51:37 OGD_veste309_Veste309_1_C-VEBDL-0.csv        174. 7 2024-10-10 10:51:37 OGD_veste309_Veste309_1_C-BESCHV-0.csv       174."},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"import-and-overview","dir":"Articles","previous_headings":"","what":"Import and overview","title":"Open Government Data","text":"import dataset, provide dataset id argument. returns object class od_table, bundles data OGD portal corresponds dataset. Printing object show summary contents. dataset contains number cancer patients several classification fields tumor type differentiates <95> types cancers reporting period spans <37> years (1983 2019). regional variable contains <9> NUTS-2 regions Austria. demographic variable “Sex” reported <2> levels","code":"table <- od_table(\"OGD_krebs_ext_KREBS_1\") table #> Cancer statistics by reporting year, province of residence and #> localisation of cancer #>  #> Dataset: OGD_krebs_ext_KREBS_1 (data.statistik.gv.at) #> Measures: Number of records F-KRE #> Fields: Tumore ICD/10 3-Steller <98>, Reporting year <40>, Province of #>   residence <9>, Sex <2> #>  #> Request: [2024-10-10 10:51:42.474332] #> STATcubeR: 1.0.0"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"convert-to-a-data-frame","dir":"Articles","previous_headings":"","what":"Convert to a data frame","title":"Open Government Data","text":"method $tabulate() can used turn object data.frame long format, contains labeled data. dataset contains 49190 rows. every combination tumor type, year, region sex contain separate row number rows following. 95×37×9×2=63270 95\\times37\\times9\\times2 = 63270 means table fairly dense. might case OGD datasets.","code":"table$tabulate() # A STATcubeR tibble: 49,190 x 5    `Tumore ICD/10 3-Steller`      `Reporting year` Province of residenc…¹ Sex     * <fct>                          <date>           <fct>                  <fct>   1 <C00> Bösartige Neubildung de… 1983-01-01       \"Burgenland \"          male    2 <C00> Bösartige Neubildung de… 1983-01-01       \"Carinthia\"            male    3 <C00> Bösartige Neubildung de… 1983-01-01       \"Carinthia\"            female  4 <C00> Bösartige Neubildung de… 1983-01-01       \"Lower Austria\"        male    5 <C00> Bösartige Neubildung de… 1983-01-01       \"Lower Austria\"        female  6 <C00> Bösartige Neubildung de… 1983-01-01       \"Upper Austria\"        male    7 <C00> Bösartige Neubildung de… 1983-01-01       \"Upper Austria\"        female  8 <C00> Bösartige Neubildung de… 1983-01-01       \"Salzburg\"             male    9 <C00> Bösartige Neubildung de… 1983-01-01       \"Styria\"               male   10 <C00> Bösartige Neubildung de… 1983-01-01       \"Styria\"               female # ℹ 49,180 more rows # ℹ abbreviated name: ¹​`Province of residence` # ℹ 1 more variable: `Number of records F-KRE` <int>"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Open Government Data","text":"section show different metadata components contained table object relate resources OGD server.","code":"table$resources$name #> [1] \"OGD_krebs_ext_KREBS_1.json\"                   #> [2] \"OGD_krebs_ext_KREBS_1.csv\"                    #> [3] \"OGD_krebs_ext_KREBS_1_HEADER.csv\"             #> [4] \"OGD_krebs_ext_KREBS_1_C-TUM_ICD10_3ST-0.csv\"  #> [5] \"OGD_krebs_ext_KREBS_1_C-BERJ-0.csv\"           #> [6] \"OGD_krebs_ext_KREBS_1_C-BUNDESLAND-0.csv\"     #> [7] \"OGD_krebs_ext_KREBS_1_C-KRE_GESCHLECHT-0.csv\" #> attr(,\"class\") #> [1] \"ogd_file\"  \"character\""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"header","dir":"Articles","previous_headings":"Metadata","what":"Header","title":"Open Government Data","text":"labels columns data.frame representation generated  OGD_krebs_ext_KREBS_1_HEADER.csv  can extracted table object via $header. Additional metadata columns can obtained via $meta. See STATcubeR data article details.","code":"table$header # STATcubeR metadata: 5 x 6   code               label label_de                    label_en                  <chr>              <chr> <chr>                       <chr>                   1 F-KRE              NA    Anzahl der Datensätze F-KRE Number of records F-KRE 2 C-TUM_ICD10_3ST-0  NA    Tumore ICD/10 3-Steller     NA                      3 C-BERJ-0           NA    Berichtsjahr                Reporting year          4 C-BUNDESLAND-0     NA    Bundesland                  Province of residence   5 C-KRE_GESCHLECHT-0 NA    Geschlecht                  Sex                     # … with 2 more columns: 'de_desc', 'en_desc'"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"field-infos","dir":"Articles","previous_headings":"Metadata","what":"Field infos","title":"Open Government Data","text":"method table$field() can used get information specific classification fields. contain data {dataset_id}_{field_code}.csv. Unlike metadata sc_table, od_table class always contains German English labels. can used label dataset. Tumor type Year Province Sex following call gives access German English labels 95 different tumor types \"cancer type\" classification. Click \"Year\" see information years. OGD_krebs_ext_KREBS_1_C-TUM_ICD10_3ST-0.csv reporting period spans 37 years (1983 2019). classification elements parsed <date> format <data.frame> representation. OGD_krebs_ext_KREBS_1_C-BERJ-0.csv regional classification contains 9 elements correspond NUTS2 regions (“Bundesländer”) Austria. OGD_krebs_ext_KREBS_1_C-BUNDESLAND-0.csv Sex coded dichotomous variable classification elements \"male\" \"female\". OGD_krebs_ext_KREBS_1_C-KRE_GESCHLECHT-0.csv","code":"table$field(\"C-TUM_ICD10_3ST-0\") # STATcubeR metadata: 98 x 10   code              label                                                          <chr>             <chr>                                                        1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe                         2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes                 3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht näher bezeic… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches                 5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens                    # ℹ 93 more rows # ℹ 1 more variable: parsed <chr> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' table$field(\"C-BERJ-0\") # STATcubeR metadata: 40 x 10   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # ℹ 35 more rows # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' table$field(\"C-BUNDESLAND-0\") # STATcubeR metadata: 9 x 10   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      # ℹ 4 more rows # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' table$field(\"C-KRE_GESCHLECHT-0\") # STATcubeR metadata: 2 x 10   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order'"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"json-metadata","dir":"Articles","previous_headings":"Metadata","what":"json Metadata","title":"Open Government Data","text":"json metadata file  OGD_krebs_ext_KREBS_1.json  available via $json binding. Cancer Earnings Economic Trend Monitor","code":"table$json #> Krebsstatistik #>  #> Krebsstatistik nach Krebslokalisation (ICD10), Geschlecht und #> Wohnbundesland #>  #> Measures: Anzahl der Datensätze F-KRE #> Fields: Tumore ICD/10 3-Steller, Berichtsjahr, Bundesland, Geschlecht #> Updated: 2024-01-25 16:03:34 #> Tags: Krebsstatistik, Krebslokalisation-ICD10, Geschlecht, Wohnbundesland #> Categories: Gesundheit od_json(\"OGD_veste309_Veste309_1\") #> Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR nach #> Staatsangehörigkeit, Bundesland und Beschäftigungsverhältnis #>  #> Verdienststruktur nach Geschlecht, Staatsangehörigkeit, Bundesland #> und Beschäftigungsverhältnis #>  #> Measures: Arithmetisches Mittel, 1. Quartil, 2. Quartil (Median), 3. #>   Quartil, Zahl d unselbst Beschäftigten #> Fields: Geschlecht, Staatsangehörigkeit, Bundesland (NUTS 2), Form des #>   Beschäftigungsverhältnisses #> Updated: 2022-03-24 11:29:48 #> Tags: Staatsangehörigkeit, Bundesland, Beschäftigungsverhältnis #> Categories: Arbeit, Bevölkerung od_json(\"OGD_konjunkturmonitor_KonMon_1\") #> Konjunkturmonitor #>  #> Measures: Produktionsindex Industrie (at; 2021=100), Technische #>   Gesamtproduktion Industrie in Tsd. € (KJE), Umsatzindex Industrie #>   (2021=100), Umsatz Industrie inTsd.€ (KJE), Auftragseingangsindex #>   Industrie (2021=100), Beschäftigtenindex Industrie (2021=100), #>   Beschäftigte Industrie gesamt (KJE), Produktivitätsindex Industrie je #>   unselbständig Beschäftigtem (2021=100), Produktivitätsindex Industrie je #>   geleisteter Arbeitsstunde (2021=100), Erzeugerpreisindex für den #>   Produzierenden Bereich (2021=100; NACE B-E), … (78 more) #> Fields: Berichtszeitraum, Wertangabe #> Updated: 2024-10-08 11:00:04 #> Tags: Konjunkturdaten #> Categories: Wirtschaft und Tourismus, Arbeit, Bevölkerung, Finanzen und #>   Rechnungswesen"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"section","dir":"Articles","previous_headings":"","what":"Open Government Data","title":"Open Government Data","text":"print method shows part metadata. information can extracted using keys json object.","code":"table$json$extras$publisher #> [1] \"Statistik Austria, Guglgasse 13, 1110 Wien, Austria\" table$json$extras$update_frequency #> [1] \"jährlich\" table$json$resources[[1]]$url #> [1] \"https://data.statistik.gv.at/data/OGD_krebs_ext_KREBS_1.csv\""},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"table-contents","dir":"Articles","previous_headings":"","what":"Table Contents","title":"Open Government Data","text":"get raw microdata  OGD_krebs_ext_KREBS_1.csv , use table$data. output similar returned read.csv2(\"OGD_krebs_ext_KREBS_1.csv\"). od_table() makes sure levels factor columns order metadata. mentioned , labeled version data can obtained via table$tabulate(). labeling done taking raw dataset joining labels $header $field(). Time variables converted <date> format satisfy certain STATcube standards. can read $tabulate() tabulation article.","code":"table$data # A STATcubeR tibble: 49,190 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # ℹ 49,185 more rows levels(table$data$`C-BUNDESLAND-0`) == table$field(\"C-BUNDESLAND-0\")$code #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE table$tabulate() # A STATcubeR tibble: 49,190 x 5   `Tumore ICD/10 3-Steller`       `Reporting year` Province of residenc…¹ Sex    * <fct>                           <date>           <fct>                  <fct>  1 <C00> Bösartige Neubildung der… 1983-01-01       \"Burgenland \"          male   2 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            male   3 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            female 4 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        male   5 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        female # ℹ 49,185 more rows # ℹ abbreviated name: ¹​`Province of residence` # ℹ 1 more variable: `Number of records F-KRE` <int>"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"sauerkraut","dir":"Articles","previous_headings":"","what":"A Trip to Germany","title":"Open Government Data","text":"possible switch language used labeling dataset using $language field. field can used get set language. Allowed options \"en\" English \"de\" German. option affects print() method well output $tabulate(). English labels available, German labels used fallback mechanism.","code":"table$language #> [1] \"en\" table$language <- \"de\" table$language #> [1] \"de\" table #> Krebsstatistik #>  #> Dataset: OGD_krebs_ext_KREBS_1 (data.statistik.gv.at) #> Measures: Anzahl der Datensätze F-KRE #> Fields: Tumore ICD/10 3-Steller <98>, Berichtsjahr <40>, Bundesland <9>, #>   Geschlecht <2> #>  #> Request: [2024-10-10 10:51:42.474332] #> STATcubeR: 1.0.0 table$tabulate() # A STATcubeR tibble: 49,190 x 5   `Tumore ICD/10 3-Steller`            Berichtsjahr Bundesland       Geschlecht * <fct>                                <date>       <fct>            <fct>      1 <C00> Bösartige Neubildung der Lippe 1983-01-01   Burgenland       männlich   2 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          männlich   3 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          weiblich   4 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich männlich   5 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich weiblich   # ℹ 49,185 more rows # ℹ 1 more variable: `Anzahl der Datensätze F-KRE` <int>"},{"path":"https://statistikat.github.io/STATcubeR/articles/od_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Open Government Data","text":"See available datasets article list datasets compatible od_table(). Open data datasets often contain large amount rows. Check tabulation article see can summarized compact form. STATcubeR caches files requested server hood. caching article explains caches stored.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_cache.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Caching API Responses","text":"Caching disabled default. order activate deactivate caching, use functions sc_cache_enable() sc_cache_disable() caching directory can displayed changed using sc_cache_dir()","code":"sc_cache_enable() #> Caching will be available for this session. Add #>  #>   STATCUBE_CACHE     = TRUE #>   STATCUBE_CACHE_DIR = \"~/.STATcubeR_cache\" #>  #> to your .Renviron to enable caching persistently. sc_cache_dir() #> [1] \"~/.STATcubeR_cache\" sc_cache_dir(\"~/.cache/STATcubeR/api\") sc_cache_dir() #> [1] \"~/.cache/STATcubeR/api\""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_cache.html","id":"using-the-cache","dir":"Articles","previous_headings":"","what":"Using the cache","title":"Caching API Responses","text":"Caching affect calls sc_table() sc_schema() well “derived” functions: sc_table_saved(), sc_table_custom(), sc_schema_db(), sc_schema_catalogue(). resource requested several times, last valid API response reused. Invalid responses (404 responses) added cache. Cache files always contain unparsed API responses returned httr::GET() httr::POST(). Responses stored rds format. caching enabled, corresponding cache files object class sc_schema sc_table can retrieved using sc_cache_files(). Note first call sc_cache_files() returned two paths. Since table requested two languages, two API responses necessary construct table object. content cache files can parsed using readRDS() httr::content(). gives direct access API response list() format. example, following syntax can used extract database info response.","code":"sc_example(\"accomodation\") %>% sc_table(language = \"both\") %>% sc_cache_files() #> [1] \"~/.cache/STATcubeR/api/3Ks85P6Vxkk-GGbnYJd6d3+st8A=.rds\" #> [2] \"~/.cache/STATcubeR/api/vM1s-as1gKR9YGp25eRQQeIEosY=.rds\" sc_schema_catalogue() %>% sc_cache_files() #> [1] \"~/.cache/STATcubeR/api/a1nJzuFIzQxUJT5mZcPhhjiGs9I=.rds\" sc_example(\"accomodation\") %>% sc_table() %>% sc_cache_files() %>%   readRDS() %>% httr::content() %>% .[[\"database\"]] %>% str() #> List of 4 #>  $ id            : chr \"detouextregsai\" #>  $ uri           : chr \"str:database:detouextregsai\" #>  $ label         : chr \"Accomodation statistics as of 1974 according to seasons\" #>  $ annotationKeys:List of 1 #>   ..$ : chr \"Q\""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_cache.html","id":"cleaning-the-cache","dir":"Articles","previous_headings":"","what":"Cleaning the cache","title":"Caching API Responses","text":"Cache files can deleted individually using paths returned sc_cache_files(). Alternatively, use sc_cache_clear() delete files cache.","code":"sc_cache_clear() #> deleted 12 entries from the cache"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_cache.html","id":"should-i-use-caching","dir":"Articles","previous_headings":"","what":"Should I use caching?","title":"Caching API Responses","text":"using STATcubeR interactively, answer probably . However, building applications rely STATcube data caching can useful way decrease traffic STATcube server. Another use case caching writing rmarkdown documents rely STATcube data. Caching makes documents reproducible quicker render. Please note currently reliable way invalidate cache. Therefore, API responses reused even resources get updated server.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"constructing-sc_data-objects","dir":"Articles","previous_headings":"","what":"Constructing sc_data objects","title":"The STATcubeR Data Class","text":"sc_data class exported STATcubeR. Therefore, objects class created one following functions od_table() obtains data OGD portal. See OGD article sc_table_saved() sc_table_custom() also use /table endpoint. However, request specified via ids rather json file. illustrate, use one OGD datasets showcase functionality class. Notice however, objects created sc_table() can used interchangeably.","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"The STATcubeR Data Class","text":"data table can extracted using active binding $data. Notice OGD_krebs_ext_KREBS_1 includes codes possibly totals. data always provided long format one column field one column measure. explained labeled data can obtained Tabulation section.","code":"x$data # A STATcubeR tibble: 49,190 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # ℹ 49,185 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"The STATcubeR Data Class","text":"Metadata sc_data object includes labels information relevant correctly parse raw data. active binding $meta contains least entries $source, $measures $fields.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"source","dir":"Articles","previous_headings":"Metadata","what":"Source","title":"The STATcubeR Data Class","text":"source field contains information data source. important entries code label. bottom, see additional information source available, namely label_en, label_de, etc. additional metadata entries might available sc_table objects.","code":"x$meta$source # STATcubeR metadata: 1 x 7   code                  label                                              lang    <chr>                 <chr>                                              <chr> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, province of … en    # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version'"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"measures","dir":"Articles","previous_headings":"Metadata","what":"Measures","title":"The STATcubeR Data Class","text":"part metadata data.frame one row measure. contains codes labels well number NAs found $data particular column.","code":"x$meta$measures # STATcubeR metadata: 1 x 7   code  label                     NAs   <chr> <chr>                   <int> 1 F-KRE Number of records F-KRE     0 # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc'"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"fields","dir":"Articles","previous_headings":"Metadata","what":"Fields","title":"The STATcubeR Data Class","text":"fields entry summarizes classification fields .e. categorical variables. includes codes labels well total code registered particular field.","code":"x$meta$fields # STATcubeR metadata: 4 x 9   code               label                   total_code nitems type          <chr>              <chr>                   <chr>       <int> <chr>       1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA             98 Category    2 C-BERJ-0           Reporting year          NA             40 Time (year) 3 C-BUNDESLAND-0     Province of residence   NA              9 Category    4 C-KRE_GESCHLECHT-0 Sex                     NA              2 Category    # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc'"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"field-information","dir":"Articles","previous_headings":"","what":"Field information","title":"The STATcubeR Data Class","text":"get info specific fields, use $field() method. return classification elements data.frame.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"section","dir":"Articles","previous_headings":"","what":"The STATcubeR Data Class","title":"The STATcubeR Data Class","text":"Tumor types Year Province Sex","code":"x$field(\"Tumore\") # STATcubeR metadata: 98 x 10   code              label                                                          <chr>             <chr>                                                        1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe                         2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes                 3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht näher bezeic… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches                 5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens                    # ℹ 93 more rows # ℹ 1 more variable: parsed <chr> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' x$field(\"Reporting year\") # STATcubeR metadata: 40 x 10   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # ℹ 35 more rows # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' x$field(\"Province\") # STATcubeR metadata: 9 x 10   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      6 BUNDESLAND-6 \"Styria\"        \"Styria\"        7 BUNDESLAND-7 \"Tyrol\"         \"Tyrol\"         8 BUNDESLAND-8 \"Vorarlberg\"    \"Vorarlberg\"    9 BUNDESLAND-9 \"Vienna\"        \"Vienna\"        # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' x$field(\"Sex\") # STATcubeR metadata: 2 x 10   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order'"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_data.html","id":"tabulation","dir":"Articles","previous_headings":"","what":"Tabulation","title":"The STATcubeR Data Class","text":"method $tabulate() can used turn sc_table objects tidy data.frames. See tabulation article defaults.","code":"x$tabulate() # A STATcubeR tibble: 49,190 x 5   `Tumore ICD/10 3-Steller`       `Reporting year` Province of residenc…¹ Sex    * <fct>                           <date>           <fct>                  <fct>  1 <C00> Bösartige Neubildung der… 1983-01-01       \"Burgenland \"          male   2 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            male   3 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            female 4 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        male   5 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        female # ℹ 49,185 more rows # ℹ abbreviated name: ¹​`Province of residence` # ℹ 1 more variable: `Number of records F-KRE` <int>"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_info.html","id":"server-information","dir":"Articles","previous_headings":"","what":"Server Information","title":"Other REST API Endpoints","text":"/info endpoint gives overview available languages server.","code":"sc_info() # A data frame: 2 × 2   locale displayName   <chr>  <chr>       1 de     Deutsch     2 en     English"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_info.html","id":"rate-limits-table","dir":"Articles","previous_headings":"","what":"Rate Limits (Table)","title":"Other REST API Endpoints","text":"/rate_limit endpoint shows number calls /table endpoint remaining. case, see 8 100 requests per hour used 92 still available. rate limit reset per hour. case 2022-08-30 13:53:55. entry reset always less one hour request /rate_limit endpoint sent.","code":"sc_rate_limit_table() #> 33 / 100 (Resets at [11:37:59])"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_info.html","id":"rate-limits-schema","dir":"Articles","previous_headings":"","what":"Rate Limits (Schema)","title":"Other REST API Endpoints","text":"Schema requests currently limited 10000 requests per hour. number remaining requests can obtained via sc_rate_limit_schema(). Rate limits returned format sc_rate_limit_table().","code":"sc_rate_limit_schema() #> 9994 / 10000 (Resets at [11:37:59])"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_info.html","id":"rate-limits-from-headers","dir":"Articles","previous_headings":"","what":"Rate Limits from headers","title":"Other REST API Endpoints","text":"responses STATcube API contain rate limit information (including remaining requests) response headers1. instead using /rate_limit* endpoints shown , also possible use responses endpoints extract rate limit information headers. function sc_rate_limits() just . return value sc_table(), sc_table_saved() sc_table_custom() can passed sc_rate_limits() rate limits extracted response headers. Note function gives rate limits /schama /table even tough /table endpoint used. function also works return values sc_schema() friends.","code":"sc_example(\"population_timeseries.json\") %>%   sc_table() %>%   sc_rate_limits() #> $schema #> 9994 / 10000 (Resets at [11:37:59]) #>  #>  #> $table #> 32 / 100 (Resets at [11:37:59]) sc_schema_catalogue() %>%   sc_rate_limits() #> $schema #> 9994 / 10000 (Resets at [11:37:59]) #>  #>  #> $table #> 32 / 100 (Resets at [11:37:59])"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_info.html","id":"server-side-caching","dir":"Articles","previous_headings":"","what":"Server-Side Caching","title":"Other REST API Endpoints","text":"STATcube uses caching /table endpoint default. request sc_table() sent several times, count towards rate-limit (100 requests per hour). Server-Side caching /table responses currently disabled due security reasons. Therefore, requests /table endpoint count towards rate-limit.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_key.html","id":"adding-an-api-key","dir":"Articles","previous_headings":"","what":"Adding an API key","title":"Set Up the API Key","text":"order use REST API STATcube necessary provide API key. means need subscription STATcube. Subscribed users automatically get access STATcube API. API key can displayed account preferences 1 STATcube. make key available STATcubeR, use function sc_key_set(). Replace \"XXXX\" key. suggested code output, key used API requests happen R session. can set key persistently modifying .Renviron. can done easily usethis::edit_r_environ(). default, sc_key_set() perform test request verify key valid throw error test request unsuccessful.","code":"sc_key_set(\"XXXX\") #> ℹ The provided key will be available for this R session #> ℹ Add `STATCUBE_KEY_EXT = XXXX` to \"~/.Renviron\" to set the key #>   persistently. Replace `XXXX` with your key sc_key_set('wrong key') #> Error in sc_key_set(\"wrong key\") : The key could not be verified #> Run sc_last_error() or read the online documentation for more details"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_key.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Set Up the API Key","text":"See JSON requests article see tables can defined STATcube GUI imported R. Alternatively, import saved table following saved tables article. advanced usage STATcubeR, see schema article custom tables article","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_key.html","id":"for-employees-of-statistics-austria","dir":"Articles","previous_headings":"","what":"For employees of Statistics Austria","title":"Set Up the API Key","text":"Employees use one internal STATcube servers API requests. Please refer following internal confluence documentation information get started: https://statportal.statistik.local/statistik./confluence/x/uDiTAQ","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"throw-all-the-errors","dir":"Articles","previous_headings":"","what":"Throw all the Errors","title":"Handling API Errors","text":"http errors codes REST API turned R errors. precisely, following conditions checked determine whether request STATcube API successful response returns FALSE httr::http_error() means response status less 400. See MDN reference information http status codes. content type response “application/json”. least one two conditions met, error thrown. different approach taken API clients, retry requests certain timeouts return “error object”.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"get-details-about-errors","dir":"Articles","previous_headings":"","what":"Get details about errors","title":"Handling API Errors","text":"encounter error, can get details via sc_last_error() sc_last_error_parsed(). return (parsed) response object triggered error. sc_last_error() returns response format returned httr::GET(). flexible sc_last_error_parsed() requires parse object . See ?httr::content ?httr::headers get started.","code":"sc_info(key = \"wrong key\") #> Error: Client error: (401) Unauthorized ... sc_last_error_parsed() %>% str()"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"common-errors","dir":"Articles","previous_headings":"","what":"Common Errors","title":"Handling API Errors","text":"section showcases common types errors might encounter interacting API. Please feel free open new issue STATcubeR issue tracker get error listed .","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"AUTHENTICATION","dir":"Articles","previous_headings":"Common Errors","what":"Invalid API Key","title":"Handling API Errors","text":"invalid API key used request, 401 status returned. example passes API key parameter simplicity. practice, set key according API key article.","code":"sc_info(key = \"wrong key\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"api-not-accessible","dir":"Articles","previous_headings":"Common Errors","what":"API Not Accessible","title":"Handling API Errors","text":"occurs STATcubeR tries send requests server accessible current environment. result timeout error. Outside Statistics Austria firewall, working base URL following. Reasons error might occur package Version STATcubeR outdated (version < 0.4.0) company uses firewall blocks API requests leaving. manually set server parameter one API functions (sc_table(), sc_schema(), …) something \"ext\". (Statistics Austria Employees ) downloaded json request one internal STATcube servers try use request sc_table() outside. Note future-self: might good idea set environment variables Statistic Austria’s internal R servers avoid (3) (4).","code":"Error in curl::curl_fetch_memory(url, handle = handle) :    Timeout was reached: [${server}] Resolving timed out after 10000 milliseconds STATcubeR:::base_url() #> [1] \"https://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1\""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"rate-limit-exceeded","dir":"Articles","previous_headings":"Common Errors","what":"Rate Limit Exceeded","title":"Handling API Errors","text":"rate limit amount requests /table endpoint exceeded, following error shown. encounter error, please check rate limits fact plausible reason using sc_rate_limit_table(). Unfortunately, response exceeded rate limits generic can differentiated response invalid json-bodies (see ). error message lists two possible reasons.","code":"sc_table_saved(\"defaulttable_deake005\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"SCHEMA_COMPONENT_NOT_FOUND","dir":"Articles","previous_headings":"Common Errors","what":"Schema","title":"Handling API Errors","text":"Invalid URIs used sc_schema displayed special error type SCHEMA_COMPONENT_NOT_FOUND.","code":"sc_schema(\"invalid_uri\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"TXD_NOT_FOUND","dir":"Articles","previous_headings":"Common Errors","what":"Saved Tables","title":"Handling API Errors","text":"mentioned saved tables article, function sc_table_saved() can access default tables tables saved current user. invalid table URI passed, server respond status code 400.","code":"sc_table_saved(\"invalid_uri\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"invalid-json","dir":"Articles","previous_headings":"Common Errors","what":"Invalid JSON","title":"Handling API Errors","text":"request /table endpoint uses invalid URI json body, trigger content-type error. showcase , sc_table() used. However, invalid URIs used sc_table_custom() throw error. Unfortunately, response invalid json bodies generic can differentiated response exceeded rate limits (see ). error message lists two possible reasons. encounter error workflow described JSON requests article, likely caused exceeded rate limits. json request downloaded STATcube GUI always contain valid URIs. However, either modify downloaded json requests use sc_table_custom(), reason “invalid json body” plausible.","code":"readLines(\"request.json\") %>% cat(sep = \"\\n\") {   \"database\": \"str:database:detouextregsai\",   \"measures\": [ \"str:measure:detouextregsai:F-DATA1:INVALID\" ],   \"dimensions\": [[ \"str:field:detouextregsai:F-DATA1:C-SDB_TIT-0\" ]] } sc_table(\"request.json\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"CELL_COUNT","dir":"Articles","previous_headings":"Common Errors","what":"Cell Limit Exceeded","title":"Handling API Errors","text":"error occurs 1 million cells requested via single call sc_table() sc_table_custom(). encounter error, consider splitting request multiple smaller requests defining filter gui via custom table filter.","code":"sc_table_custom(   \"str:database:debevstand\",   \"str:measure:debevstand:F-BEVSTAND:F-ISIS-1\",   c(\"str:field:debevstand:F-BEVSTAND:C-A10-0\",     \"str:valueset:debevstand:F-BEVSTAND:C-GNU-2:C-GNU-2\",     \"str:valueset:debevstand:F-BEVSTAND:C-BESC51-0:C-BESC51-0\",     \"str:valueset:debevstand:F-BEVSTAND:C-BESC11-0:C-BESC11-0\") ) #> Warning in gzfile(file, \"rb\"): cannot open compressed file #> 'sc_last_error/cell_limit.rds', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_last_error.html","id":"custom-error-handling","dir":"Articles","previous_headings":"","what":"Custom Error Handling","title":"Handling API Errors","text":"want use error-handling instead default STATcubeR error handlers, can get started following code sample one shiny applications. try() turn errors “error-objects” class \"try-error\". conditional used perform different actions successful unsuccessful requests. error occurs, error details fetched via sc_last_error_parsed() sent error handler. Otherwise, return value sc_table_saved() processed success handler.","code":"shiny::observeEvent(input$button_load_data, {   table <- try(STATcubeR::sc_table_saved(input$id))   if (inherits(table, \"try-error\"))     STATcubeR::sc_last_error_parsed() %>%     myApp::show_error_prompt()   else     as.data.frame(table) %>%     myApp::process_data() })"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"browsing-the-catalogue","dir":"Articles","previous_headings":"","what":"Browsing the Catalogue","title":"Get Metadata with the Schema Endpoint","text":"first function shows catalog, lists available databases tree form. tree structure determined API closely resembles “Catalog” view GUI. see catalog 8 child nodes: Four children type FOLDER four children type TABLE. table nodes correspond saved tables described saved tables article. folders include folders root level catalogue explorer: “Statistics”, “Publication Services” well “Examples”.  get access child nodes use my_catalogue${child_label} child node Statistics also class sc_schema shows entries sub-folder.  syntax can used navigate folders sub-folders.  cases, API shows folders GUI case folders API empty. Seeing empty folder usually means STATcube user permitted view contents folder.","code":"my_catalogue <- sc_schema_catalogue() my_catalogue #> FOLDER: Extern V9 #> 1 Examples                  FOLDER     9 #> 2 Publications and services FOLDER     2 #> 3 Default Tables            FOLDER     0 #> 4 Statistics                FOLDER    20 #> 5 meineErsteTabelle         TABLE      0 #> 6 meineZweiteTabelle        TABLE      0 my_catalogue$Statistics #> FOLDER: Statistics #> 1 Labour Market       FOLDER    15 #> 2 Foreign Trade       FOLDER     4 #> 3 Population          FOLDER    16 #> 4 Education, Culture  FOLDER     5 #> 5 Energy, Environment FOLDER     2 #> # ℹ 15 more rows my_catalogue$Statistics$`Foreign Trade` #> FOLDER: Foreign Trade #> 1 TEC - Trade by enterprise characteristics FOLDER    20 #> 2 Außenhandelsindizes                       FOLDER     0 #> 3 Foreign Trade; Absolute Data              FOLDER    12 #> 4 Regional data by federal provinces        FOLDER     6 my_catalogue$Statistics$`Foreign Trade`$Außenhandelsindizes #> FOLDER: Außenhandelsindizes"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"databases-and-tables","dir":"Articles","previous_headings":"","what":"Databases and Tables","title":"Get Metadata with the Schema Endpoint","text":"Inside catalog, leafs1 tree mostly type DATABASE TABLE. example DATABASE node deake005.  function sc_schema_db() shown next section. example TABLE node, consider default table deake005.  suggested output, tables can loaded /table endpoint via sc_table_saved(). See saved tables article details.","code":"my_catalogue$Statistics$`Foreign Trade`$`Regional data by federal provinces` #> FOLDER: Regional data by federal provinces #> 1 Regional data by federal provinces and 2digits CN         DATABASE #> 2 Regional data by federal provinces and countries          DATABASE #> 3 Regional data by federal provinces and country groups     DATABASE #> 4 Standardtabelle / Default table (defaulttable_deahbdlkn2) TABLE    #> 5 Standardtabelle / Default table (defaulttable_deahbdlld)  TABLE    #> # ℹ 1 more row my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)` #> DATABASE: Working hours (Labour Force Survey) #> # Get more metdata with `sc_schema_db('deake005')` my_catalogue$Statistics$`Labour Market`$   `Standardtabelle / Default table (defaulttable_deake005)` #> TABLE: Standardtabelle / Default table (defaulttable_deake005) #> # Get the data with `sc_table_saved('defaulttable_deake005')`"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"database-infos","dir":"Articles","previous_headings":"","what":"Database Infos","title":"Get Metadata with the Schema Endpoint","text":"get information specific database, can pass database id sc_schema_db(). Similar sc_schema_catalogue(), return value tree-like data structure. comparison, screenshot sidebar table view deake005 similar (identical) structure.  my_db_info can used similar fashion my_catalogue obtain details resources tree. example, VALUESET label “Gender” can viewed like . leafs database schemas mostly type VALUE MEASURE.","code":"my_db_info <- sc_schema_db(\"deake005\") my_db_info #> DATABASE: Working hours (Labour Force Survey) #> 1 Factors                     GROUP     9 #> 2 Datensätze/Records          GROUP     1 #> 3 Time (mandatory field)      GROUP     1 #> 4 Demographic Characteristics GROUP     8 #> 5 Employment Characteristics  GROUP     6 #> # ℹ 3 more rows my_db_info$`Demographic Characteristics` #> GROUP: Demographic Characteristics #> 1 Gender                                                        FIELD     1 #> 2 Age in years-groups                                           FIELD     3 #> 3 Highest level of training completed (national classification) FIELD     2 #> 4 Highest level of training completed (ISCED 97)                FIELD     2 #> 5 Highest level of training completed (ISCED 2011)              FIELD     2 #> # ℹ 3 more rows my_db_info$`Demographic Characteristics`$Gender$Gender #> VALUESET: Gender #> 1 male                 VALUE #> 2 female               VALUE #> 3 Not classifiable <0> VALUE my_db_info$`Demographic Characteristics`$Gender$Gender$male #> VALUE: male"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"data-structure-of-sc_schema-objects","dir":"Articles","previous_headings":"","what":"Data Structure of sc_schema Objects","title":"Get Metadata with the Schema Endpoint","text":"shown , sc_schema objects tree like structure. sc_schema object id, label, location type last four entries Schema objects can arbitrary amount children. Children always type sc_schema. x$type contains type schema object. complete list schema types available API reference.","code":"str(tail(my_db_info$`Demographic Characteristics`, 4)) #> List of 4 #>  $ id      : chr \"str:group:deake005:X_B1\" #>  $ label   : chr \"Demographic Characteristics\" #>  $ location: chr \"http://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1/schema/str:group:deake005:X_B1\" #>  $ type    : chr \"GROUP\" str(tail(my_catalogue$Statistics, 4)) #> List of 4 #>  $ id      : chr \"str:folder:festat\" #>  $ label   : chr \"Statistics\" #>  $ location: chr \"http://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1/schema/str:folder:festat\" #>  $ type    : chr \"FOLDER\""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"other-resources","dir":"Articles","previous_headings":"","what":"Other Resources","title":"Get Metadata with the Schema Endpoint","text":"Information resources databases catalog can obtained passing resource id sc_schema(). Note tree returned depth 1, .e. child nodes measures available group_info. However, ids child nodes can obtained $id. ids can used send another request /schema endpoint Alternatively, use depth parameter sc_schema(). make sure entries tree returned recursively certain level. example, depth = \"VALUESET\" use level recursion sc_schema_db(). See ?sc_schema available options depth parameter.","code":"(id <- my_db_info$Factors$id) #> [1] \"str:group:deake005:M_F1\" group_info <- sc_schema(id) group_info #> GROUP: Factors #> 1 Average hours actually worked per week                             MEASURE #> 2 Average hours usually worked per week                              MEASURE #> 3 Volume of hours worked in the main job per year in million hours   MEASURE #> 4 Volume of hours worked overtime (paid) per year in million hours   MEASURE #> 5 Volume of hours worked overtime (unpaid) per year in million hours MEASURE #> # ℹ 4 more rows (id <- group_info$`Average hours usually worked per week`$id) #> [1] \"str:measure:deake005:F-DATA:F-FAKTOR2\" measure_info <- sc_schema(id) group_info <- my_db_info$`Demographic Characteristics`$id %>%   sc_schema(depth = \"valueset\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"printing-with-data-tree","dir":"Articles","previous_headings":"","what":"Printing with data.tree","title":"Get Metadata with the Schema Endpoint","text":"data.tree package installed, can used alternative print method. data.tree implementation print method can set default using option STATcubeR.print_tree","code":"print(group_info, tree = TRUE) #>                           levelName     type #> 1  Demographic Characteristics         GROUP #> 2   ¦--Gender                          FIELD #> 3   ¦   °--Gender                   VALUESET #> 4   ¦       ¦--male                    VALUE #> 5   ¦       ¦--female                  VALUE #> 6   ¦       °--Not classifiable <0>    VALUE #> 7   ¦--Age in years-groups             FIELD #> 8   ¦   ¦--Age in years-groups      VALUESET #> 9   ¦   ¦   ¦--Under 15 years          VALUE #> 10  ¦   ¦   ¦--15 to 19 years          VALUE #> 11  ¦   ¦   ¦--20 to 24 years          VALUE #> 12  ¦   ¦   ¦--25 to 29 years          VALUE #> 13  ¦   ¦   ¦--30 to 34 years          VALUE #> 14  ¦   ¦   ¦--35 to 39 years          VALUE #> 15  ¦   ¦   ¦--40 to 44 years          VALUE #> 16  ¦   ¦   ¦--45 to 49 years          VALUE #> 17  ¦   ¦   ¦--50 to 54 years          VALUE #> 18  ¦   ¦   ¦--55 to 59 years          VALUE #> 19  ¦   ¦   ¦--60 to 64 years          VALUE #> 20  ¦   ¦   ¦--65 to 69 years          VALUE #> 21  ¦   ¦   ¦--70 to 74 years          VALUE #> 22  ¦   ¦   ¦--75 years and older      VALUE #> 23  ¦   ¦   °--Not classifiable <0>    VALUE #> 24  ¦   ¦--Alter in Jahresgruppen   VALUESET #> 25  ¦   ¦   ¦--Under 15 years          VALUE #> 26  ¦   ¦   ¦--15 to 24 years          VALUE #> 27  ¦   ¦   ¦--25 to 34 years          VALUE #> 28  ¦   ¦   ¦--35 to 44 years          VALUE #> 29  ¦   ¦   ¦--45 to 54 years          VALUE #> 30  ¦   ¦   °--... 3 nodes w/ 0 sub          #> 31  ¦   °--... 1 nodes w/ 6 sub              #> 32  °--... 6 nodes w/ 80 sub options(STATcubeR.print_tree = TRUE)"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"flatten-a-schema","dir":"Articles","previous_headings":"","what":"Flatten a Schema","title":"Get Metadata with the Schema Endpoint","text":"function sc_schema_flatten() can used turn responses /schema endpoint data.frames. following call extracts databases catalog displays ids labels. string \"DATABASE\" previous example acts filter make sure nodes schema type DATABASE included table. \"DATABASE\" replaced \"TABLE\", tables displayed. includes default-tables STATcube. databases associated default table. saved tables current user described saved tables article. saved tables. databases provide default table also several tables. See database transport statistics example database one associated table sc_schema_flatten() can also used sc_schema_db() sc_schema(). following example shows available measures economic trend monitor database.","code":"sc_schema_catalogue() %>%   sc_schema_flatten(\"DATABASE\") # A data frame: 660 × 2   id                               label                    <chr>                            <chr>                  1 str:database:dedemo              Communes (Demo)        2 str:database:depeople            People                 3 str:database:depeopleml          People multilingual    4 str:database:deretailml          Retail Banking ML en   5 str:database:dekonjunkturmonitor Economic trend monitor # ℹ 655 more rows sc_schema_catalogue() %>%   sc_schema_flatten(\"TABLE\") # A data frame: 693 × 2   id                                             label                             <chr>                                          <chr>                           1 str:table:7f851bfd-4bc0-4cc7-9013-e3c7982c9842 Monitoring                      2 str:table:defaulttable_depeopleml              Standardtabelle / Default tabl… 3 str:table:defaulttable_dedemo                  Standardtabelle / Default tabl… 4 str:table:E-A_nach_Bundeslaendern_dedemo       E-A_nach_Bundeslaendern_dedemo  5 str:table:Jahre_nach_NUTS_dedemo               Jahre_nach_NUTS_dedemo          # ℹ 688 more rows sc_schema_db(\"dekonjunkturmonitor\") %>%   sc_schema_flatten(\"MEASURE\") # A data frame: 88 × 2   id                                              label                            <chr>                                           <chr>                          1 str:measure:dekonjunkturmonitor:F-DATA:F-FAKT-1 Production index industry (wd… 2 str:measure:dekonjunkturmonitor:F-DATA:F-FAKT-2 Technical total production in… 3 str:measure:dekonjunkturmonitor:F-DATA:F-FAKT-3 Turnover index industry (2021… 4 str:measure:dekonjunkturmonitor:F-DATA:F-FAKT-4 Turnover industry (in 1.000 €) 5 str:measure:dekonjunkturmonitor:F-DATA:F-FAKT-5 Index of new orders industry … # ℹ 83 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_schema.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Get Metadata with the Schema Endpoint","text":"Schemas can used construct table requests described custom tables article See saved tables article get access data table nodes schema.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"create-a-table-with-the-statcube-gui","dir":"Articles","previous_headings":"","what":"Create a table with the STATcube GUI","title":"Get Tables via JSON Requests","text":"Use graphical user interface STATcube create table. Visit STATcube select database. open table view can create table. See STATcube documentation details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"download-an-api-request","dir":"Articles","previous_headings":"","what":"Download an API request","title":"Get Tables via JSON Requests","text":"Choose “Open Data API Query (.json)” download options. save json file local file system.  might case download option listed download format. means current user permitted use API.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"send-the-json-to-the-api","dir":"Articles","previous_headings":"","what":"Send the json to the API","title":"Get Tables via JSON Requests","text":"Provide path downloaded json file string sc_table(). send json-request /table endpoint API return object class sc_table. demonstrate example json via sc_example(). Printing object my_table summarize data contained response.","code":"library(STATcubeR) my_table <- sc_table(json = \"path/to/api_request.json\") (json_path <- sc_example(\"population_timeseries.json\")) ## [1] \"~/R/3.6/STATcubeR/json_examples/population_timeseries.json\" my_table <- sc_table(json_path) my_table #> Population at the beginning of the quarter since 2002 #>  #> Database: debevstand (STATcube) #> Measures: Number of persons #> Fields: Quarter <90>, Age in single years <96> <7>, Sex <2> <3>, Commune #>   <2383> (Province-District) <10> #>  #> Request: [2024-10-10 10:55:02] #> STATcubeR: 1.0.0"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"convert-the-response-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Convert the response into a data frame","title":"Get Tables via JSON Requests","text":"return value sc_table() can converted data.frame .data.frame(). produce data.frame, contains column classification field table. Furthermore, one column present measure. words, data uses long format. prefer use codes rather labels, use my_table$data instead.","code":"as.data.frame(my_table) # A STATcubeR tibble: 18,900 x 5    Quarter    `Age in single years <96>` `Sex <2>` Commune <2383> (Province-Di…¹    <date>     <fct>                      <fct>     <fct>                          1 2002-01-01 Up to 14 years old         male      Burgenland <AT11>              2 2002-01-01 Up to 14 years old         male      Carinthia <AT21>               3 2002-01-01 Up to 14 years old         male      Vienna <AT13>                  4 2002-01-01 Up to 14 years old         male      Vorarlberg <AT34>              5 2002-01-01 Up to 14 years old         male      Tyrol <AT33>                   6 2002-01-01 Up to 14 years old         male      Styria <AT22>                  7 2002-01-01 Up to 14 years old         male      Salzburg <AT32>                8 2002-01-01 Up to 14 years old         male      Upper Austria <AT31>           9 2002-01-01 Up to 14 years old         male      Lower Austria <AT12>          10 2002-01-01 Up to 14 years old         male      Total                         # ℹ 18,890 more rows # ℹ abbreviated name: ¹​`Commune <2383> (Province-District)` # ℹ 1 more variable: `Number of persons` <dbl> my_table$data # A STATcubeR tibble: 18,900 x 5    `C-A10-0` `C-BESC51-0` `C-BESC11-0` `C-C41-2` `F-ISIS-1`    <fct>     <fct>        <fct>        <fct>          <dbl>  1 A10-20021 BESN07-1     1            B00-1          21287  2 A10-20021 BESN07-1     1            B00-2          47230  3 A10-20021 BESN07-1     1            B00-9         117920  4 A10-20021 BESN07-1     1            B00-8          34798  5 A10-20021 BESN07-1     1            B00-7          62794  6 A10-20021 BESN07-1     1            B00-6          97538  7 A10-20021 BESN07-1     1            B00-5          46955  8 A10-20021 BESN07-1     1            B00-4         127316  9 A10-20021 BESN07-1     1            B00-3         133928 10 A10-20021 BESN07-1     1            SC_TOTAL      689766 # ℹ 18,890 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"example-datasets","dir":"Articles","previous_headings":"","what":"Example datasets","title":"Get Tables via JSON Requests","text":"article used dataset Austrian population via sc_example(). STATcubeR contains example jsons get started. datasets can listed sc_examples_list(). Accommodation STATatlas Trade GDP Working Hours Agriculture monitor.statistik.{r, eval = FALSE sc_example(\"agriculture_prices.json\") %>% sc_table()","code":"sc_example(\"accomodation.json\") %>% sc_table() sc_example(\"economic_atlas.json\") %>% sc_table() sc_example(\"foreign_trade.json\") %>% sc_table() sc_example(\"gross_regional_product.json\") %>% sc_table() sc_example(\"labor_force_survey.json\") %>% sc_table() sc_example(\"economic_trend_monitor.json\") %>% sc_table()"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"choosing-the-language","dir":"Articles","previous_headings":"","what":"Choosing the Language","title":"Get Tables via JSON Requests","text":"language used labeling can changed via language parameter sc_table(). Accommodation STATatlas Trade GDP Working Hours Agriculture monitor.statistik.","code":"sc_example(\"accomodation.json\") %>% sc_table(\"de\") #> Nächtigungsstatistik ab 2000 nach Regionen und Saison #>  #> Database: detouextregsai (STATcube) #> Measures: Übernachtungen, Ankünfte #> Fields: Saison/Tourismusmonat <299>, Herkunftsland <4>, Beherbergungsbetrieb #>   <4> #>  #> Request: [2024-10-10 10:55:18] #> STATcubeR: 1.0.0 sc_example(\"economic_atlas.json\") %>% sc_table(\"de\") #> 02 Eckdaten Bundesländer #>  #> Database: dewatlas2 (STATcube) #> Measures: Arbeitslosenquote - ILO, Erwerbstätigenquote (15-64 J.) - ILO, #>   Nächtigungen, Durchschnittliche Aufenthaltsdauer in Tagen, #>   Privathaushalte, Fläche (km²), Wohnbevölkerung im Jahresdurchschnitt, #>   Forschungsquote (in % des BIP), Erwerbstätige - ILO, Arbeitslose - ILO, … #>   (38 more) #> Fields: Jahr (ab 1995) <29>, Bundesland <11> #>  #> Request: [2024-10-10 10:55:22] #> STATcubeR: 1.0.0 sc_example(\"foreign_trade.json\") %>% sc_table(\"de\") #> Außenhandel nach Gütern (CPA) und Wirtschaftszweig (NACE) #>  #> Database: denatec06 (STATcube) #> Measures: Import; Anzahl der Unternehmen, Import, Wert in Euro, Export; #>   Anzahl der Unternehmen, Export, Wert in Euro #> Fields: Güter (CPA) <4>, Berichtsjahr <15>, Wirtschaftszweig (NACE) [teilw. #>   ABO] <4> #>  #> Request: [2024-10-10 10:55:27] #> STATcubeR: 1.0.0 sc_example(\"gross_regional_product.json\") %>% sc_table(\"de\") #> Bruttoregionalprodukt nach ESVG 1995, NUTS2+NUTS3 - abgeschlossene #> Zeitreihe #>  #> Database: devgrrgr004 (STATcube) #> Measures: Bruttoregionalprodukt nominell in Mio.Euro, Bruttoregionalprodukt #>   je Einwohner, Bruttoregionalprodukt je Erwerbstätigem #> Fields: NUTS-3 <11>, Zeit <13> #>  #> Request: [2024-10-10 10:55:31] #> STATcubeR: 1.0.0 sc_example(\"labor_force_survey.json\") %>% sc_table(\"de\") #> Mikrozensus-Arbeitskräfteerhebung Arbeitsstunden #>  #> Database: deake005 (STATcube) #> Measures: Durchschn. tatsächlich geleistete Arbeitsstunden pro Woche, #>   Durchschn. Normalarbeitsstunden pro Woche #> Fields: Zeit <10>, Geschlecht <3>, Höchste abgeschlossene Schulbildung - #>   nationale Gliederung <6>, Bundesland (NUTS 2-Einheit) <10> #>  #> Request: [2024-10-10 10:55:41] #> STATcubeR: 1.0.0 sc_example(\"agriculture_prices.json\") %>% sc_table(\"de\") #> LGR01_Landwirtschaftliche Gesamtrechnung zu laufenden Preisen in #> Millionen Euro #>  #> Database: delgr001 (STATcube) #> Measures: Werte (für Positionen der Produktion sowie Wertschöpfung: Werte zu #>   Herstellungspreisen), Gütersteuern (für Positionen der Produktion), Werte #>   zu Erzeugerpreisen (für Positionen der Produktion), Gütersubventionen (für #>   Positionen der Produktion) #> Fields: Jahr <30>, Position <6> #>  #> Request: [2024-10-10 10:55:45] #> STATcubeR: 1.0.0 sc_example(\"economic_trend_monitor.json\") %>% sc_table(\"de\") #> Konjunkturmonitor #>  #> Database: dekonjunkturmonitor (STATcube) #> Measures: Produktionsindex Industrie (at; 2021=100), Technische #>   Gesamtproduktion Industrie in Tsd. € (KJE), Umsatzindex Industrie #>   (2021=100), Umsatz Industrie inTsd.€ (KJE), Auftragseingangsindex #>   Industrie (2021=100), Beschäftigtenindex Industrie (2021=100), #>   Beschäftigte Industrie gesamt (KJE), Produktivitätsindex Industrie je #>   unselbständig Beschäftigtem (2021=100), Produktivitätsindex Industrie je #>   geleisteter Arbeitsstunde (2021=100), Erzeugerpreisindex für den #>   Produzierenden Bereich (2021=100; NACE B-E), … (53 more) #> Fields: Berichtszeitraum <190>, Wertangabe <2> #>  #> Request: [2024-10-10 10:55:48] #> STATcubeR: 1.0.0"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get Tables via JSON Requests","text":"functionality returned object explained STATcubeR data article. sc_tabulate() provides flexible way turning STATcube tables data.frames. See tabulation article details. saved tables article shows alternative way importing tables. interested API endpoints, see schema article API endpoints article","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"step-by-step","dir":"Articles","previous_headings":"","what":"Building a Custom Table Step by Step","title":"Define Custom Tables","text":"first part Article showcase custom tables can created database tourism. database also used examples article.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"database","dir":"Articles","previous_headings":"Building a Custom Table Step by Step","what":"Starting Simple","title":"Define Custom Tables","text":"First, want just send database id sc_table_custom(). request mandatory fields default measures database. case tourism database, table one single row returned. see 61 175 041 nights spent Austrian tourism establishments month 2024-06-01.","code":"database <- \"str:database:detouextregsai\" x <- sc_table_custom(database) x$tabulate() # A STATcubeR tibble: 1 x 2   `Season/Tourism Month` `Nights spent` * <date>                          <dbl> 1 2024-06-01                   61175041 x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [],   \"dimensions\": [] }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"field","dir":"Articles","previous_headings":"Building a Custom Table Step by Step","what":"Adding Countries","title":"Define Custom Tables","text":"Now want add classification table. can done getting database schema showing classification fields. want add “Country origin” need include fourth entry id column request. Alternatively, also pass schema object “country origin”.","code":"tourism <- sc_schema_db(database) (fields <- sc_schema_flatten(tourism, \"FIELD\")) # A data frame: 4 × 2   id                                           label                        <chr>                                        <chr>                      1 str:field:detouextregsai:F-DATA1:C-SDB_TIT-0 Season/Tourism Month       2 str:field:detouextregsai:F-DATA:C-GEMREG-0   Tourism commune [ABO]      3 str:field:detouextregsai:F-DATA:C-BBTR_REG-0 Accomodation establishment 4 str:field:detouextregsai:F-DATA1:C-C93-2     Country of origin x <- sc_table_custom(tourism, dimensions = fields$id[4]) x$tabulate() # A STATcubeR tibble: 3 x 3   `Season/Tourism Month` `Country of origin` `Nights spent` * <date>                 <fct>                        <dbl> 1 2024-06-01             Austria                   17405621 2 2024-06-01             Germany                   23555112 3 2024-06-01             other countries           20214308 x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [],   \"dimensions\": [     [\"str:field:detouextregsai:F-DATA1:C-C93-2\"]   ] } origin <- tourism$`Other Classifications`$`Country of origin` x <- sc_table_custom(tourism, dimensions = origin)"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"fields","dir":"Articles","previous_headings":"Building a Custom Table Step by Step","what":"Adding Tourism Communes","title":"Define Custom Tables","text":"dimensions parameter sc_schema_custom() accepts vectors field ids. Therefore, can add communes easily.","code":"x <- sc_table_custom(tourism, dimensions = fields$id[c(2, 4)]) x$tabulate() # A STATcubeR tibble: 321 x 4    `Season/Tourism Month` `Tourism commune [ABO]`         `Country of origin`  * <date>                 <fct>                           <fct>                1 2024-06-01             Achensee                        Austria              2 2024-06-01             Achensee                        Germany              3 2024-06-01             Achensee                        other countries      4 2024-06-01             Alpbachtal und Tiroler Seenland Austria              5 2024-06-01             Alpbachtal und Tiroler Seenland Germany              6 2024-06-01             Alpbachtal und Tiroler Seenland other countries      7 2024-06-01             Alpenregion Bludenz             Austria              8 2024-06-01             Alpenregion Bludenz             Germany              9 2024-06-01             Alpenregion Bludenz             other countries     10 2024-06-01             Arlberg                         Austria             # ℹ 311 more rows # ℹ 1 more variable: `Nights spent` <dbl> x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [],   \"dimensions\": [     [\"str:field:detouextregsai:F-DATA:C-GEMREG-0\"],     [\"str:field:detouextregsai:F-DATA1:C-C93-2\"]   ] }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"measure","dir":"Articles","previous_headings":"Building a Custom Table Step by Step","what":"Add Another Measure","title":"Define Custom Tables","text":"Currently, table returns default measure database number nights spent. can add second measure using database schema passing measure id can add measures request using measures$id. Just like dimensions parameter, measures parameters accepts vectors resource ids.","code":"(measures <- sc_schema_flatten(tourism, \"MEASURE\")) # A data frame: 2 × 2   id                                       label          <chr>                                    <chr>        1 str:measure:detouextregsai:F-DATA1:F-ANK Arrivals     2 str:measure:detouextregsai:F-DATA1:F-UEB Nights spent x <- sc_table_custom(tourism, measures = measures$id,                      dimensions = fields$id[c(2, 4)]) x$tabulate() # A STATcubeR tibble: 321 x 5    `Season/Tourism Month` `Tourism commune [ABO]`         `Country of origin`  * <date>                 <fct>                           <fct>                1 2024-06-01             Achensee                        Austria              2 2024-06-01             Achensee                        Germany              3 2024-06-01             Achensee                        other countries      4 2024-06-01             Alpbachtal und Tiroler Seenland Austria              5 2024-06-01             Alpbachtal und Tiroler Seenland Germany              6 2024-06-01             Alpbachtal und Tiroler Seenland other countries      7 2024-06-01             Alpenregion Bludenz             Austria              8 2024-06-01             Alpenregion Bludenz             Germany              9 2024-06-01             Alpenregion Bludenz             other countries     10 2024-06-01             Arlberg                         Austria             # ℹ 311 more rows # ℹ 2 more variables: Arrivals <dbl>, `Nights spent` <dbl> x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:field:detouextregsai:F-DATA:C-GEMREG-0\"],     [\"str:field:detouextregsai:F-DATA1:C-C93-2\"]   ] }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"hierarchy","dir":"Articles","previous_headings":"Building a Custom Table Step by Step","what":"Changing the hierarchy level","title":"Define Custom Tables","text":"can see GUI “Country origin” hierarchical classification. look table , top level hierarchy (Austria, Germany, ) used. can changed providing value-set corresponds granular classification “country origin”  different value-sets “country origin” can compared browsing database schema. can see two levels hierarchy represented two value-sets. value-set “Herkunftsland” uses 3 classification elements represents top level hierarchy (Austria, Germany, ). value-set “Country origin” uses 87 (10+8+69) classification elements bottom level hierarchy. classifications levels hierarchies, value-sets present. now use id first value-set dimensions parameter sc_table_custom. possible use mixture value-sets fields dimensions parameter.","code":"(valuesets <- tourism$`Other Classifications`$`Country of origin`) #> FIELD: Country of origin #> 1 Country of origin        VALUESET    87 #> 2 Herkunftsland (Ebene +1) VALUESET     3 x <- sc_table_custom(   db = tourism,   measures = measures$id,   dimensions = valuesets$`Country of origin` ) x$tabulate() # A STATcubeR tibble: 87 x 4    `Season/Tourism Month` `Country of origin`            Arrivals `Nights spent`  * <date>                 <fct>                             <dbl>          <dbl>  1 2024-06-01             Vienna <01>                     1315002        3918822  2 2024-06-01             Burgenland (beg.05/03) <70>      315075         824122  3 2024-06-01             Carinthia (beg.05/03) <71>       321591         942608  4 2024-06-01             Lower Austria (beg.05/03) <72>  1181610        3558849  5 2024-06-01             Upper Austria (beg.05/03) <73>  1052414        2886026  6 2024-06-01             Salzburg (beg.05/03) <74>        429680        1097268  7 2024-06-01             Styria (beg.05/03) <75>          851585        2471756  8 2024-06-01             Tyrol (beg.05/03) <76>           433762        1119744  9 2024-06-01             Vorarlberg (beg.05/03) <77>      222549         586426 10 2024-06-01             Austria except Vienna (till 0…        0              0 # ℹ 77 more rows x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93-2\"]   ] }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"counts","dir":"Articles","previous_headings":"","what":"Using Counts","title":"Define Custom Tables","text":"Instead Measures Value-sets, also possible provide counts measure parameter sc_table_custom().","code":"population <- sc_schema_db(\"debevstand\") (count <- population$`Datensätze/Records`$`F-BEVSTAND`) #> COUNT: F-BEVSTAND x <- sc_table_custom(population, count) x$tabulate() # A STATcubeR tibble: 1 x 2   Quarter    `F-BEVSTAND` * <date>            <dbl> 1 2024-01-01       389629 x$json {   \"database\": \"str:database:debevstand\",   \"measures\": [     \"str:count:debevstand:F-BEVSTAND\"   ],   \"dimensions\": [] }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"recodes","dir":"Articles","previous_headings":"","what":"Recodes","title":"Define Custom Tables","text":"Data can filtered server side using recodes parameter sc_table_custom(). might complicated filtering data R offers important advantages. performance Traffic client server reduced might lead considerably faster API responses. cell limits (user) Apart rate limits (see ?sc_rate_limits), STATcube also limits amount cells can fetched per user. Filtering data can useful preserve quota. cell limits (request) single request contain 1 million cells, cell count error thrown.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"filter","dir":"Articles","previous_headings":"Recodes","what":"Filtering Data","title":"Define Custom Tables","text":"example filtering data, can request table tourism database select countries Country origin. table contains two countries rather 87 amount cells table also 40 times less compared table omit filter.","code":"origin <- tourism$`Other Classifications`$`Country of origin`$`Country of origin` month <- tourism$`Mandatory fields`$`Season/Tourism Month`$`Season/Tourism Month` x <- sc_table_custom(   db = tourism,   measures = measures$id,   dimensions = list(month, origin),   recodes = sc_recode(origin, list(origin$`Italy <29>`, origin$`Germany <12>`)) ) x$tabulate() # A STATcubeR tibble: 596 x 4    `Season/Tourism Month` `Country of origin` Arrivals `Nights spent`    <date>                 <fct>                  <dbl>          <dbl>  1 1999-11-01             Italy <29>             34612          71854  2 1999-11-01             Germany <12>          261213         762568  3 1999-12-01             Italy <29>             88337         218213  4 1999-12-01             Germany <12>          849720        4152811  5 2000-01-01             Italy <29>             53289         204169  6 2000-01-01             Germany <12>         1221916        6972223  7 2000-02-01             Italy <29>             32509          98706  8 2000-02-01             Germany <12>          966214        5651428  9 2000-03-01             Italy <29>             56189         135877 10 2000-03-01             Germany <12>         1009715        5483191 # ℹ 586 more rows x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:valueset:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0\"],     [\"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93-2\"]   ],   \"recodes\": {     \"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93-2\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:20\"],         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:12\"]       ],       \"total\": false     }   } }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"group","dir":"Articles","previous_headings":"Recodes","what":"Grouping items","title":"Define Custom Tables","text":"options recodes specification also available via sc_recode(). possible group items specify recodes several classifications. table contains data two country-groups two months. case, cell values Germany Netherlands just added calculate entries Arrivals Nights spent. However, cases STATcube might decide appropriate use weighted means complicated aggregation methods.","code":"x <- sc_table_custom(   db = tourism,   measures = measures$id,   dimensions = list(month, origin),   recodes = c(     sc_recode(origin, list(       list(origin$`Germany <12>`, origin$`Netherlands <25>`),       list(origin$`Italy <29>`, origin$`France (incl.Monaco) <14>`)     )),     sc_recode(month, list(       month$Nov.99, month$Feb.00, month$Apr.09, month$`Jan. 22`     ))   ) ) x$tabulate() # A STATcubeR tibble: 8 x 4   `Season/Tourism Month` `Country of origin`             Arrivals `Nights spent`   <date>                 <fct>                              <dbl>          <dbl> 1 1999-11-01             Germany <12>;Netherlands <25>     272496         795183 2 1999-11-01             Italy <29>;France (incl.Monaco…    47580         105150 3 2000-02-01             Germany <12>;Netherlands <25>    1237039        7208626 4 2000-02-01             Italy <29>;France (incl.Monaco…    77162         350655 5 2009-04-01             Germany <12>;Netherlands <25>      44545         174388 6 2009-04-01             Italy <29>;France (incl.Monaco…    97913         219553 7 2022-01-01             Germany <12>;Netherlands <25>     154121         886490 8 2022-01-01             Italy <29>;France (incl.Monaco…    28301         100484 x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:valueset:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0\"],     [\"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93-2\"]   ],   \"recodes\": {     \"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93-2\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:12\", \"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:25\"],         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:20\", \"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:14\"]       ],       \"total\": false     },     \"str:valueset:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:199911\"],         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:200002\"],         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:200904\"],         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:202201\"]       ],       \"total\": false     }   } }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"totals","dir":"Articles","previous_headings":"Recodes","what":"Adding Totals","title":"Define Custom Tables","text":"total parameter sc_recode() can used request totals classifications. example, let’s look tourism activity capital cities Austria see two rows table Tourism commune set “Total”. corresponding values represent sum Arrivals Nights spent either three cities month.","code":"destination <- tourism$`Other Classifications`$`Tourism commune [ABO]`$   `Regionale Gliederung (Ebene +1)` x <- sc_table_custom(     tourism,     measures = measures$id,     dimensions = list(month, destination),     recodes = c(       sc_recode(destination, total = TRUE, list(         destination$Wien, destination$`Stadt Salzburg`, destination$Linz)),       sc_recode(month, total = FALSE, list(month$Nov.99, month$Apr.09))     ) ) as.data.frame(x) # A STATcubeR tibble: 8 x 4   `Season/Tourism Month` `Tourism commune [ABO]` Arrivals `Nights spent`   <date>                 <fct>                      <dbl>          <dbl> 1 1999-11-01             Wien                      234186         522306 2 1999-11-01             Stadt Salzburg             49369          89637 3 1999-11-01             Linz                       25562          43789 4 1999-11-01             Total                     309117         655732 5 2009-04-01             Wien                      356723         806201 6 2009-04-01             Stadt Salzburg             84582         151483 7 2009-04-01             Linz                       35594          65001 8 2009-04-01             Total                     476899        1022685 x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:valueset:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0\"],     [\"str:valueset:detouextregsai:F-DATA:C-GEMREG-0:C-TOUREG-0\"]   ],   \"recodes\": {     \"str:valueset:detouextregsai:F-DATA:C-GEMREG-0:C-TOUREG-0\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA:C-GEMREG-0:C-TOUREG-0:TOUREG-Wien\"],         [\"str:value:detouextregsai:F-DATA:C-GEMREG-0:C-TOUREG-0:TOUREG-Stadt\"],         [\"str:value:detouextregsai:F-DATA:C-GEMREG-0:C-TOUREG-0:TOUREG-Linz\"]       ],       \"total\": true     },     \"str:valueset:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:199911\"],         [\"str:value:detouextregsai:F-DATA1:C-SDB_TIT-0:C-SDB_TIT-0:200904\"]       ],       \"total\": false     }   } }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"recode-hierarchy","dir":"Articles","previous_headings":"Recodes","what":"Recoding across hierarchies","title":"Define Custom Tables","text":"use recode includes several hierarchy levels, corresponding FIELD used first parameter sc_recode(). example, recode countries federal states “Country origin” classification can defined follows.","code":"origin1 <- tourism$`Other Classifications`$`Country of origin` origin2 <- origin1$`Country of origin` origin3 <- origin1$`Herkunftsland (Ebene +1)` x <- sc_table_custom(   tourism, measures$id, origin1,   recodes = sc_recode(origin1, list(     origin2$`Vienna <01>`, origin3$Germany,     list(origin2$`Bavaria (beg.05/03) <80>`, origin3$`other countries`))   ) ) x$tabulate() # A STATcubeR tibble: 3 x 4   `Season/Tourism Month` `Country of origin`             Arrivals `Nights spent` * <date>                 <fct>                              <dbl>          <dbl> 1 2024-06-01             Vienna <01>                      1315002        3918822 2 2024-06-01             Germany                          6268154       23555112 3 2024-06-01             other countries;Bavaria (beg.0…  8943717       26295490 x$json {   \"database\": \"str:database:detouextregsai\",   \"measures\": [     \"str:measure:detouextregsai:F-DATA1:F-ANK\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ],   \"dimensions\": [     [\"str:field:detouextregsai:F-DATA1:C-C93-2\"]   ],   \"recodes\": {     \"str:field:detouextregsai:F-DATA1:C-C93-2\": {       \"map\": [         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:01\"],         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93SUM-0:C93SUM-2\"],         [\"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93-2:80\", \"str:value:detouextregsai:F-DATA1:C-C93-2:C-C93SUM-0:C93SUM-3\"]       ],       \"total\": false     }   } }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"typechecks","dir":"Articles","previous_headings":"","what":"Typechecks","title":"Define Custom Tables","text":"Since custom tables can become quite complicated, sc_table_custom() performs type-checks sending request API. inconsistencies detected, warnings generated. See ?sc_table_custom comprehensive list performed checks. dry_run set FALSE (default), STATcubeR send request API even inconsistencies detected. likely lead error form “expected json got html”. get spurious warnings suggestions type-checks might improved, please issue feature request [STATcubeR bug tracker].","code":"sc_table_custom(tourism, measures = tourism, dry_run = TRUE) #> Warning in sc_table_custom(tourism, measures = tourism, dry_run = TRUE): #> parameter `measures` is not of type `MEASURE`, `STATFN` or `COUNT` #> { #>   \"database\": \"str:database:detouextregsai\", #>   \"measures\": [ #>     \"str:database:detouextregsai\" #>   ], #>   \"dimensions\": [] #> } sc_table_custom(\"A\", measures = \"B\", dimensions = \"C\",                  recodes = sc_recode(\"D\", \"E\"), dry_run = TRUE) #> Warning in sc_recode(\"D\", \"E\"): parameters `field` and `map` might be #> inconsistent #> Warning in sc_recode(\"D\", \"E\"): some entries in `map` are not of type VALUE #> Warning in sc_recode(\"D\", \"E\"): parameter `field` is not of type `FIELD` or #> `VALUESET` #> Warning in sc_table_custom(\"A\", measures = \"B\", dimensions = \"C\", recodes = #> sc_recode(\"D\", : `recodes` and `dimensions` might be inconsistent #> Warning in sc_table_custom(\"A\", measures = \"B\", dimensions = \"C\", recodes = #> sc_recode(\"D\", : parameter `dimensions` is not of type `FIELD` or `VALUESET` #> Warning in sc_table_custom(\"A\", measures = \"B\", dimensions = \"C\", recodes = #> sc_recode(\"D\", : parameter `measures` is not of type `MEASURE`, `STATFN` or #> `COUNT` #> Warning in sc_table_custom(\"A\", measures = \"B\", dimensions = \"C\", recodes = #> sc_recode(\"D\", : parameter `db` is not of type `DATABASE` #> { #>   \"database\": \"A\", #>   \"measures\": [ #>     \"B\" #>   ], #>   \"dimensions\": [ #>     [\"C\"] #>   ], #>   \"recodes\": { #>     \"D\": { #>       \"map\": [ #>         [\"E\"] #>       ], #>       \"total\": false #>     } #>   } #> }"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_custom.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Define Custom Tables","text":"’ve come far, probably already familiar sc_schema(). case , schema article contains information get metadata API. STATcubeR data article showcases different ways extract data metadata return value sc_table_custom().","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_saved.html","id":"keys-and-accounts","dir":"Articles","previous_headings":"","what":"Keys and accounts","title":"Load Saved Tables","text":"Tables always saved logged STATcube account. API key bound account can list saved tables account. Saved tables accounts can listed requested.","code":""},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_saved.html","id":"converting-saved-tables-to-json-requests","dir":"Articles","previous_headings":"","what":"Converting saved tables to JSON requests","title":"Load Saved Tables","text":"make table available later use users STATcubeR, response can exported json. generated json file contains API request can used sc_table().","code":"tab$json$write(\"tab.json\") my_response <- sc_table(\"tab.json\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_table_saved.html","id":"default-tables","dir":"Articles","previous_headings":"","what":"Default Tables","title":"Load Saved Tables","text":"STATcube databases associated default table. default tables can also loaded sc_table_saved(). available default tables well saved tables can discovered using sc_schema_catalogue(). See schema article details.","code":"sc_table_saved('str:table:defaulttable_deake005') #> Working hours (Labour Force Survey) #>  #> Database: deake005 (STATcube) #> Measures: Average hours actually worked per week, Average hours usually #>   worked per week #> Fields: Time section <1> #>  #> Request: [2024-10-10 10:54:45] #> STATcubeR: 1.0.0 sc_schema_catalogue() %>%    sc_schema_flatten(\"TABLE\") # A data frame: 693 × 2    id                                             label                             <chr>                                          <chr>                           1 str:table:7f851bfd-4bc0-4cc7-9013-e3c7982c9842 Monitoring                      2 str:table:defaulttable_depeopleml              Standardtabelle / Default tab…  3 str:table:defaulttable_dedemo                  Standardtabelle / Default tab…  4 str:table:E-A_nach_Bundeslaendern_dedemo       E-A_nach_Bundeslaendern_dedemo  5 str:table:Jahre_nach_NUTS_dedemo               Jahre_nach_NUTS_dedemo          6 str:table:defaulttable_dekonjunkturmonitor     Standardtabelle / Default tab…  7 str:table:defaulttable_dewatlas1               Standardtabelle / Default tab…  8 str:table:defaulttable_dewatlas12              Standardtabelle / Default tab…  9 str:table:defaulttable_dewatlas13              Standardtabelle / Default tab… 10 str:table:defaulttable_dewatlas3               Standardtabelle / Default tab… # ℹ 683 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"tabulate","dir":"Articles","previous_headings":"","what":"Tabulating Data","title":"Tabulating STATcubeR Datasets","text":"Calling $tabulate() method arguments produces table dimensions $data. Instead cancer$tabulate(...) also possible use sc_tabulate(cancer, ...). available parameters $tabulate() method documented ?sc_tabulate.","code":"cancer$tabulate() # A STATcubeR tibble: 49,190 x 5   `Tumore ICD/10 3-Steller`       `Reporting year` Province of residenc…¹ Sex    * <fct>                           <date>           <fct>                  <fct>  1 <C00> Bösartige Neubildung der… 1983-01-01       \"Burgenland \"          male   2 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            male   3 <C00> Bösartige Neubildung der… 1983-01-01       \"Carinthia\"            female 4 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        male   5 <C00> Bösartige Neubildung der… 1983-01-01       \"Lower Austria\"        female # ℹ 49,185 more rows # ℹ abbreviated name: ¹​`Province of residence` # ℹ 1 more variable: `Number of records F-KRE` <int> identical(dim(cancer$tabulate()), dim(cancer$data)) #> [1] TRUE"},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"aggregating-with-sums","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating with sums","title":"Tabulating STATcubeR Datasets","text":"get number cases reporting year sex, use labels variables arguments. one measure included dataset, measures aggregated. STATcubeR uses rowsum() ensure good performance big datasets. also possible use partial matching use codes. STATcubeR use pmatch() match supplied strings metadata identify variables used aggregation.","code":"cancer$tabulate(\"Reporting year\", \"Sex\") # A STATcubeR tibble: 80 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       13626 2 1983-01-01       female                     16702 3 1984-01-01       male                       13996 4 1984-01-01       female                     16620 5 1985-01-01       male                       13658 # ℹ 75 more rows cancer$tabulate(\"Reporting\", \"C-KRE\") # A STATcubeR tibble: 80 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       13626 2 1983-01-01       female                     16702 3 1984-01-01       male                       13996 4 1984-01-01       female                     16620 5 1985-01-01       male                       13658 # ℹ 75 more rows"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"totals","dir":"Articles","previous_headings":"Aggregation","what":"Limitations of sums","title":"Tabulating STATcubeR Datasets","text":"cases, datasets aggregated using rowsum() approach. example, take structure earnings survey. can see print() output, measures contain means quartiles. Therefore, aggregating data via rowsum() meaningful. However, dataset contains “total code” every field.","code":"earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings #> Structure of Earnings Survey (SES) 2018 Gross hourly earnings in EUR #> by citizenship, region (NUTS 2) and form of employment #>  #> Dataset: OGD_veste309_Veste309_1 (data.statistik.gv.at) #> Measures: Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>   quartile, Number of employees #> Fields: Sex <3>, Citizenship <9>, Region (NUTS2) <10>, Form of employment #>   <7> #>  #> Request: [2024-10-10 10:55:53.795844] #> STATcubeR: 1.0.0 earnings$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                  * <fct>     <fct>       <fct>              <fct>                                 1 Sum total Total       Total              \"Total\"                               2 Sum total Total       Total              \"Standard employment \"                3 Sum total Total       Total              \"Non-standard employment (total)\"     4 Sum total Total       Total              \"Non-standard employment: part-time…  5 Sum total Total       Total              \"Non-standard employment: fixed-ter…  6 Sum total Total       Total              \"Non-standard employment: marginal …  7 Sum total Total       Total              \"Non-standard employment: temporary…  8 Sum total Total       AT11 Burgenland    \"Total\"                               9 Sum total Total       AT12 Lower Austria \"Total\"                              10 Sum total Total       AT13 Vienna        \"Total\"                              # ℹ 62 more rows # ℹ 5 more variables: `Arithmetic mean` <dbl>, `1st quartile` <dbl>, #   `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"aggregating-via-total-codes","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating via total codes","title":"Tabulating STATcubeR Datasets","text":"total codes can used aggregate data $tabulate(). order , total codes need specified using $total_codes(). Now $tabulate() use total codes form aggregates data. can see, method extracted rows 2 7 data. logic selecting rows equivalent following dplyr expression. $tabulate() method also works one variable.","code":"earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") # A STATcubeR tibble: 6 x 6   `Form of employment`                          `Arithmetic mean` `1st quartile` * <fct>                                                     <dbl>          <dbl> 1 \"Standard employment \"                                     19.0           12.8 2 \"Non-standard employment (total)\"                          15.2           10.2 3 \"Non-standard employment: part-time only\"                  15.9           10.7 4 \"Non-standard employment: fixed-term employm…              16.8           10.2 5 \"Non-standard employment: marginal part-time…              12              9   6 \"Non-standard employment: temporary agency w…              14.0           11.5 # ℹ 3 more variables: `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl> earnings$data %>% dplyr::filter(Sex == \"Sum total\" & Citizenship == \"Total\" &   `Region (NUTS2)` == \"Total\" & `Form of employment` != \"Total\") %>%   dplyr::select(-Sex, -Citizenship, -`Region (NUTS2)`)"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"section","dir":"Articles","previous_headings":"","what":"Tabulating STATcubeR Datasets","title":"Tabulating STATcubeR Datasets","text":"Sex & Form employment Sex & Citizenship Sex & Region Citizenship & Region get empty table cross tabulation included OGD dataset. happen Citizenship & Form employment well Region & Form employment.","code":"earnings$tabulate(\"Sex\", \"Form of employment\") # A STATcubeR tibble: 12 x 7    Sex    `Form of employment`                  `Arithmetic mean` `1st quartile`  * <fct>  <fct>                                             <dbl>          <dbl>  1 Male   \"Standard employment \"                             20.0          13.5   2 Male   \"Non-standard employment (total)\"                  16.5          10.5   3 Male   \"Non-standard employment: part-time …              18.8          11.1   4 Male   \"Non-standard employment: fixed-term…              18.3          10.9   5 Male   \"Non-standard employment: marginal p…              12.6           9     6 Male   \"Non-standard employment: temporary …              14.4          12     7 Female \"Standard employment \"                             16.3          11.1   8 Female \"Non-standard employment (total)\"                  14.6          10.0   9 Female \"Non-standard employment: part-time …              15.2          10.6  10 Female \"Non-standard employment: fixed-term…              15.2           9.68 11 Female \"Non-standard employment: marginal p…              11.6           9.02 12 Female \"Non-standard employment: temporary …              13.0          10.4  # ℹ 3 more variables: `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl> earnings$tabulate(\"Sex\", \"Citizenship\") # A STATcubeR tibble: 16 x 7    Sex    Citizenship                           `Arithmetic mean` `1st quartile`  * <fct>  <fct>                                             <dbl>          <dbl>  1 Male   \"Austrian\"                                         20.4          13.8   2 Male   \"Non-Austrian \"                                    15.3          10.6   3 Male   \"EU-28/EWR/Switzerland (without Aust…              16.0          10.9   4 Male   \"EU-15/EWR before 2004/Switzerland\"                21.2          12.6   5 Male   \"EU-13 EU Member States after 2004\"                13.6          10.3   6 Male   \"Former Yugoslavia (without Slovenia…              14.1          11.2   7 Male   \"Turkey\"                                           13.3          10.4   8 Male   \"Other\"                                            14.0           9.07  9 Female \"Austrian\"                                         15.9          11.1  10 Female \"Non-Austrian \"                                    13.0           9.19 11 Female \"EU-28/EWR/Switzerland (without Aust…              13.7           9.38 12 Female \"EU-15/EWR before 2004/Switzerland\"                17.1          11.0  # ℹ 4 more rows # ℹ 3 more variables: `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl> earnings$tabulate(\"Sex\", \"Region\") # A STATcubeR tibble: 18 x 7    Sex    `Region (NUTS2)`   `Arithmetic mean` `1st quartile`  * <fct>  <fct>                          <dbl>          <dbl>  1 Male   AT11 Burgenland                 16.6           11.6  2 Male   AT12 Lower Austria              17.8           12.3  3 Male   AT13 Vienna                     20.9           12.2  4 Male   AT21 Carinthia                  18.3           12.6  5 Male   AT22 Styria                     18.4           12.8  6 Male   AT31 Upper Austria              19.7           13.7  7 Male   AT32 Salzburg                   19.2           12.7  8 Male   AT33 Tyrol                      18.6           12.8  9 Male   AT34 Vorarlberg                 20.4           14.5 10 Female AT11 Burgenland                 14.5           10.2 11 Female AT12 Lower Austria              14.2           10   12 Female AT13 Vienna                     17.1           10.6 # ℹ 6 more rows # ℹ 3 more variables: `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #   `Number of employees` <dbl> earnings$tabulate(\"Citizenship\", \"Region\") # A STATcubeR tibble: 0 x 7 # ℹ 7 variables: Citizenship <fct>, Region (NUTS2) <fct>, #   Arithmetic mean <dbl>, 1st quartile <dbl>, 2nd quartile (median) <dbl>, #   3rd quartile <dbl>, Number of employees <dbl> earnings$tabulate(\"Citizenship\", \"Form of employment\") %>% dim() #> [1] 0 7 earnings$tabulate(\"Region\", \"Form of employment\") %>% dim() #> [1] 0 7"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"totals-and-the-rest-api","dir":"Articles","previous_headings":"Aggregation","what":"Totals and the REST API","title":"Tabulating STATcubeR Datasets","text":"default, STATcubeR always add totals datasets REST API use totals aggregate datasets.","code":"x <- sc_table(sc_example(\"accomodation\")) x$meta$fields # STATcubeR metadata: 3 x 7   code          label                      total_code nitems type           <chr>         <chr>                      <chr>       <int> <chr>        1 C-SDB_TIT-0   Season/Tourism Month       SC_TOTAL      299 Time (month) 2 C-C93SUM-0    Country of origin          SC_TOTAL        4 Category     3 C-BBTR_REG2-0 Accomodation establishment SC_TOTAL        4 Category     # … with 2 more columns: 'label_de', 'label_en'"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"including-totals-in-the-output","dir":"Articles","previous_headings":"Aggregation","what":"Including totals in the output","title":"Tabulating STATcubeR Datasets","text":"necessary fields totals. example, suppose want include totals Sex output table. can just remove total code running sc_tabulate(). special symbol NA can used unset total code.","code":"earnings$total_codes(Sex = NA) earnings$tabulate(\"Sex\") # A STATcubeR tibble: 3 x 6   Sex       `Arithmetic mean` `1st quartile` `2nd quartile (median)` * <fct>                 <dbl>          <dbl>                   <dbl> 1 Sum total              17.6           11.6                    15.1 2 Male                   19.2           12.8                    16.3 3 Female                 15.3           10.4                    13.4 # ℹ 2 more variables: `3rd quartile` <dbl>, `Number of employees` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"german-labels-and-codes","dir":"Articles","previous_headings":"","what":"German Labels and Codes","title":"Tabulating STATcubeR Datasets","text":"possible switch language used labeling data. can done setting $language \"de\" \"en\". skip labeling altogether use variable codes output, use raw=TRUE. Switching languages always available od_table() objects. sc_table(), depends languages requested.","code":"earnings$language <- \"de\" earnings$tabulate(\"Geschlecht\") # A STATcubeR tibble: 3 x 6   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Median)` * <fct>                        <dbl>        <dbl>                 <dbl> 1 insgesamt                     17.6         11.6                  15.1 2 männlich                      19.2         12.8                  16.3 3 weiblich                      15.3         10.4                  13.4 # ℹ 2 more variables: `3. Quartil` <dbl>, `Zahl d unselbst Beschäftigten` <dbl> earnings$tabulate(\"Geschlecht\", raw = TRUE) # A STATcubeR tibble: 3 x 6   `C-A11-0` `F-VESTE_AM` `F-VESTE_Q25` `F-VESTE_Q50` `F-VESTE_Q75` `F-VESTE_UB` * <fct>            <dbl>         <dbl>         <dbl>         <dbl>        <dbl> 1 A11-1             17.6          11.6          15.1          20.1      2650938 2 A11-2             19.2          12.8          16.3          22.0      1544588 3 A11-3             15.3          10.4          13.4          17.6      1106350 # default: get labels in German and English x <- sc_table(sc_example(\"accomodation\")) # only get English labels x <- sc_table(sc_example(\"accomodation\"), lang = \"en\") # only get German labels x <- sc_table(sc_example(\"accomodation\"), lang = \"de\")"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"subsetting-columns","dir":"Articles","previous_headings":"","what":"Subsetting columns","title":"Tabulating STATcubeR Datasets","text":"previous examples, supplied names /codes fields sc_tabulate(). also possible include measures case unlisted measures omitted. Just like fields, measures also support partial matching codes. example, \"2. Quartil\" matched \"2. Quartil (Median)\".","code":"earnings$tabulate(\"Geschlecht\", \"Arithmetisches Mittel\", \"2. Quartil\") # A STATcubeR tibble: 3 x 3   Geschlecht `Arithmetisches Mittel` `2. Quartil (Median)` * <fct>                        <dbl>                 <dbl> 1 insgesamt                     17.6                  15.1 2 männlich                      19.2                  16.3 3 weiblich                      15.3                  13.4"},{"path":"https://statistikat.github.io/STATcubeR/articles/sc_tabulate.html","id":"programmatic-usage","dir":"Articles","previous_headings":"","what":"Programmatic usage","title":"Tabulating STATcubeR Datasets","text":"Notice used German label column \"Sex\" last calls tabulate(). necessary “active” labels available define tabulation. want use STATcubeR programmatically, always use codes define tabulation also use .list parameter want pass several codes. $total_codes() currently uses ellipsis (...) parameter define total codes. future, programmatic updates sc_data objects defined $recodes. See #17.","code":"earnings$field(\"C-A11-0\") # STATcubeR metadata: 3 x 10   code  label     parsed      <chr> <chr>     <chr>     1 A11-1 insgesamt insgesamt 2 A11-2 männlich  männlich  3 A11-3 weiblich  weiblich  # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' earnings$total_codes(`C-A11-0` = \"A11-1\") vars_to_tabulate <- c(\"C-A11-0\", \"C-BESCHV-0\") earnings$tabulate(.list = vars_to_tabulate) # A STATcubeR tibble: 12 x 7   Geschlecht Form des Beschäftigungsverhäl…¹ Arithmetisches Mitte…² `1. Quartil` * <fct>      <fct>                                            <dbl>        <dbl> 1 männlich   \"Normalarbeitsverhältnis\"                         20.0         13.5 2 männlich   \"Atypische Beschäftigung (insg…                   16.5         10.5 3 männlich   \"Atypisch: ausschließlich Teil…                   18.8         11.1 4 männlich   \"Atypisch: befristete Beschäft…                   18.3         10.9 5 männlich   \"Atypisch: geringfügige Beschä…                   12.6          9   6 männlich   \"Atypisch: Leih- und Zeitarbei…                   14.4         12   7 weiblich   \"Normalarbeitsverhältnis\"                         16.3         11.1 # ℹ 5 more rows # ℹ abbreviated names: ¹​`Form des Beschäftigungsverhältnisses`, #   ²​`Arithmetisches Mittel` # ℹ 3 more variables: `2. Quartil (Median)` <dbl>, `3. Quartil` <dbl>, #   `Zahl d unselbst Beschäftigten` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregor de Cillia. Author. Bernhard Meindl. Contributor. Alexander Kowarik. Contributor, maintainer.","code":""},{"path":"https://statistikat.github.io/STATcubeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Cillia G (2024). STATcubeR: R Interface STATcube REST API Open Government Data. R package version 1.0.0, https://github.com/statistikat/STATcubeR, https://statistikat.github.io/STATcubeR/.","code":"@Manual{,   title = {STATcubeR: R Interface for the STATcube REST API and Open Government Data},   author = {Gregor {de Cillia}},   year = {2024},   note = {R package version 1.0.0,     https://github.com/statistikat/STATcubeR},   url = {https://statistikat.github.io/STATcubeR/}, }"},{"path":"https://statistikat.github.io/STATcubeR/index.html","id":"statcuber-","dir":"","previous_headings":"","what":"STATcubeR","title":"STATcubeR","text":"R client things STATcube. Get data STATcube REST API via open government data portal https://data.statistik.gv.. STATcubeR makes easy include datasources R projects.","code":""},{"path":"https://statistikat.github.io/STATcubeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"STATcubeR","text":"package can installed directly github using remotes package. able use install_github() install STATcubeR, can also download package tar archive https://github.com/statistikat/STATcubeR/tags. package can installed providing path downloaded archive file.","code":"remotes::install_github(\"statistikat/STATcubeR\") install.packages('STATcubeR-0.6.0.tar.gz', repos = NULL)"},{"path":"https://statistikat.github.io/STATcubeR/index.html","id":"open-data","dir":"","previous_headings":"","what":"Open Data","title":"STATcubeR","text":"import datasets https://data.statistik.gv., pass dataset id od_table() function. example, OGD data Austrian population 2020 can accessed follows. resulting object contains labeled data (see ), raw data, metadata . See OGD article details. available datasets article provides overview 315 datasets compatible od_table().","code":"library(STATcubeR) population <- od_table(\"OGD_bevstandjbab2002_BevStand_2020\") population$tabulate() # A STATcubeR tibble: 392,508 x 5   `Time section` Sex   `Commune (aggregation by polit… `Age in single ye… Number * <date>         <fct> <fct>                           <fct>               <int> 1 2020-01-01     male  Eisenstadt <10101>              under 1 year old       77 2 2020-01-01     male  Eisenstadt <10101>              1 year old             75 3 2020-01-01     male  Eisenstadt <10101>              2 years old            70 4 2020-01-01     male  Eisenstadt <10101>              3 years old            83 # … with 392,504 more rows"},{"path":"https://statistikat.github.io/STATcubeR/index.html","id":"statcube-api","dir":"","previous_headings":"","what":"STATcube API","title":"STATcubeR","text":"order use REST API, required set API key. mentioned API key article, requires STATcube subscription. four main functions interact API sc_schema_catalogue() lists available datasets tables sc_schema_db() provides metadata specific database sc_table() requests table API according json standard sc_table_saved() requests table based id information first two functions can found schema article. sc_table() sc_table_saved() articles .","code":""},{"path":"https://statistikat.github.io/STATcubeR/index.html","id":"consistent-data-formats","dir":"","previous_headings":"","what":"Consistent data formats","title":"STATcubeR","text":"OGD data tables form REST API wrapped R6 class provide easy access data metadata. example, $tabulate() method also available tables REST API. See base class article information features class.","code":"# https://statcube.at/statcube/openinfopage?id=debevstandjbab2002 population <- sc_table_saved(\"defaulttable_debevstandjbab2002\") population$tabulate() # A STATcubeR tibble: 10 x 3   `Time section` `Commune (aggregation by political district)`  Number   <date>         <fct>                                           <dbl> 1 2021-01-01     Burgenland <AT11>                              296010 2 2021-01-01     Carinthia <AT21>                               562089 3 2021-01-01     Lower Austria <AT12>                          1690879 4 2021-01-01     Upper Austria <AT31>                          1495608 # … with 6 more rows"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache management for Open Data — od_cache","title":"Cache management for Open Data — od_cache","text":"Functions inspect contents current cache.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache management for Open Data — od_cache","text":"","code":"od_cache_summary(server = \"ext\")  od_downloads(server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache management for Open Data — od_cache","text":"server OGD-Server use. \"ext\" external server (default) \"red\" editing server","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache management for Open Data — od_cache","text":"od_cache_summary() provides overview contents cache data.frame. one row dataset following columns. file sizes given bytes id dataset id updated last modified time ${id}.json json file size ${id}.json data file size ${id}.csv header file size ${id}_HEADER.csv fields total file size files belonging fields ({id}_C*.csv). n_fields number field files od_downloads() shows download history current cache time timestamp download file filename downloaded download time milliseconds","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache management for Open Data — od_cache","text":"","code":"## make sure the cache is not empty od_table(\"OGD_krebs_ext_KREBS_1\") #> Cancer statistics by reporting year, province of residence and #> localisation of cancer #>  #> Dataset: OGD_krebs_ext_KREBS_1 (data.statistik.gv.at) #> Measures: Number of records F-KRE #> Fields: Tumore ICD/10 3-Steller <98>, Reporting year <40>, Province #>   of residence <9>, Sex <2> #>  #> Request: [2024-10-10 10:48:06.547202] #> STATcubeR: 1.0.0 od_table(\"OGD_veste309_Veste309_1\") #> Structure of Earnings Survey (SES) 2018 Gross hourly earnings #> in EUR by citizenship, region (NUTS 2) and form of employment #>  #> Dataset: OGD_veste309_Veste309_1 (data.statistik.gv.at) #> Measures: Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>   quartile, Number of employees #> Fields: Sex <3>, Citizenship <9>, Region (NUTS2) <10>, Form of #>   employment <7> #>  #> Request: [2024-10-10 10:48:14.328595] #> STATcubeR: 1.0.0  ## inspect od_cache_summary() #> # A data frame: 2 × 7 #>   id                    updated   json    data header fields n_fields #>   <chr>                 <dttm>   <dbl>   <dbl>  <dbl>  <dbl>    <int> #> 1 OGD_krebs_ext_KREBS_1 10:48:07  3765 2828045    287   9955        4 #> 2 OGD_veste309_Veste3…  10:48:14  4062    4931    516   2015        4 od_downloads() #> # A data frame: 14 × 3 #>    time                file                                 downloaded #>    <dttm>              <chr>                                     <dbl> #>  1 2024-10-10 10:48:07 OGD_krebs_ext_KREBS_1.json                 875. #>  2 2024-10-10 10:48:13 OGD_krebs_ext_KREBS_1.csv                 5908. #>  3 2024-10-10 10:48:13 OGD_krebs_ext_KREBS_1_HEADER.csv           170. #>  4 2024-10-10 10:48:13 OGD_krebs_ext_KREBS_1_C-TUM_ICD10_3…       171. #>  5 2024-10-10 10:48:13 OGD_krebs_ext_KREBS_1_C-BERJ-0.csv         169. #>  6 2024-10-10 10:48:14 OGD_krebs_ext_KREBS_1_C-BUNDESLAND-…       169. #>  7 2024-10-10 10:48:14 OGD_krebs_ext_KREBS_1_C-KRE_GESCHLE…       169. #>  8 2024-10-10 10:48:14 OGD_veste309_Veste309_1.json               171. #>  9 2024-10-10 10:48:14 OGD_veste309_Veste309_1.csv                170. #> 10 2024-10-10 10:48:14 OGD_veste309_Veste309_1_HEADER.csv         170. #> 11 2024-10-10 10:48:15 OGD_veste309_Veste309_1_C-A11-0.csv        179. #> 12 2024-10-10 10:48:15 OGD_veste309_Veste309_1_C-STAATS-0.…       170. #> 13 2024-10-10 10:48:15 OGD_veste309_Veste309_1_C-VEBDL-0.c…       170. #> 14 2024-10-10 10:48:15 OGD_veste309_Veste309_1_C-BESCHV-0.…       170."},{"path":"https://statistikat.github.io/STATcubeR/reference/od_catalogue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a catalogue for OGD datasets — od_catalogue","title":"Get a catalogue for OGD datasets — od_catalogue","text":"EXPERIMENTAL function parses several json metadata files combines data.frame datasets can easily filtered based categorizations, tags, number classifications, etc.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_catalogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a catalogue for OGD datasets — od_catalogue","text":"","code":"od_catalogue(server = \"ext\", local = TRUE)"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_catalogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a catalogue for OGD datasets — od_catalogue","text":"server OGD-server used. \"ext\" (default) external server prod production server local TRUE (default), catalogue created based cached json metadata. Otherwise, cache updated prior creating catalogue using \"bulk-download\" metadata files.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_catalogue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a catalogue for OGD datasets — od_catalogue","text":"naming, ordering choice columns likely change. Currently, following columns provided. type datetime refers POSIXct format returned Sys.time(). last column \"json\" contains full json metadata returned od_json().","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_catalogue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a catalogue for OGD datasets — od_catalogue","text":"","code":"catalogue <- od_catalogue() catalogue #> # A data frame: 2 × 13 #>   title        measures fields modified            created             #>   <chr>           <int>  <int> <dttm>              <dttm>              #> 1 Krebsstatis…        1      4 2024-01-25 16:03:34 2019-08-08 11:09:49 #> 2 Verdienstst…        5      4 2022-03-24 11:29:48 2017-08-02 20:00:00 #> # ℹ 8 more variables: id <ogd_id>, database <chr>, title_en <chr>, #> #   notes <chr>, update_frequency <chr>, tags <I<list>>, #> #   categorization <chr>, json <I<list>> table(catalogue$update_frequency) #>  #>      jährlich nicht geplant  #>             1             1  table(catalogue$categorization) #>  #>     Arbeit Gesundheit  #>          1          1  catalogue[catalogue$categorization == \"Gesundheit\", 1:4] #> # A data frame: 1 × 4 #>   title          measures fields modified            #> * <chr>             <int>  <int> <dttm>              #> 1 Krebsstatistik        1      4 2024-01-25 16:03:34 catalogue[catalogue$measures >= 70, 1:3] #> # A data frame: 0 × 3 #> # ℹ 3 variables: title <chr>, measures <int>, fields <int> catalogue$json[[1]] #> Krebsstatistik #>  #> Krebsstatistik nach Krebslokalisation (ICD10), Geschlecht und #> Wohnbundesland #>  #> Measures: Anzahl der Datensätze F-KRE #> Fields: Tumore ICD/10 3-Steller, Berichtsjahr, Bundesland, Geschlecht #> Updated: 2024-01-25 16:03:34 #> Tags: Krebsstatistik, Krebslokalisation-ICD10, Geschlecht, #>   Wohnbundesland #> Categories: Gesundheit head(catalogue$database) #> [1] \"dekrebs_ext\" \"deveste309\""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List available Opendata datasets — od_list","title":"List available Opendata datasets — od_list","text":"od_list() returns data.frame  containing datasets published data.statistik.gv.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available Opendata datasets — od_list","text":"","code":"od_list(unique = TRUE, server = c(\"ext\", \"red\"))"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available Opendata datasets — od_list","text":"unique datasets published multiple groups. listed first group appear unless parameter set FALSE. server open data server use. Either ext external server (default) red editing server. editing server accessible employees Statistics Austria","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available Opendata datasets — od_list","text":"data.frame two columns \"category\": Grouping dataset listed \"id\": Name dataset can later used od_table() \"label\": Description dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available Opendata datasets — od_list","text":"","code":"df <- od_list() df #> # A tibble: 373 × 3 #>    category      id                                             label  #>    <chr>         <chr>                                          <chr>  #>  1 Neueste Daten OGD_prodvindexusb2021_KJID2021_PVISTD_1        Produ… #>  2 Neueste Daten OGD_prodindexstd2021_KJID2021_PVISTD_1         Produ… #>  3 Neueste Daten OGD_bewwohn303_BB303_1                         Baube… #>  4 Neueste Daten OGD_kjiprodindex2021_KJID2021_PI_1             Produ… #>  5 Neueste Daten OGD_bauvh302_BB302_1                           Baube… #>  6 Neueste Daten OGD_kjiumsatzindex2021_KJID2021_UI_1           Umsat… #>  7 Neueste Daten OGD_bruttoverdiensteindex2021a_KJID2021_BVIa_1 Brutt… #>  8 Neueste Daten OGD_beschaeftigtenindex2021_KJID2021_BI_1      Index… #>  9 Neueste Daten OGD_kjiarbeitsvolindex2021_KJID2021_AST_1      Arbei… #> 10 Neueste Daten OGD_kjiauftragseingangsindex2021_KJID2021_AEG… Auftr… #> # ℹ 363 more rows subset(df, category == \"Bildung und Forschung\") #> # A tibble: 44 × 3 #>    category              id                                    label   #>    <chr>                 <chr>                                 <chr>   #>  1 Bildung und Forschung OGD_unistud5_ext_UNI_STUD5_1          Studie… #>  2 Bildung und Forschung OGD_desi_hh_DESI_HH_1                 Indika… #>  3 Bildung und Forschung OGD_innov015_CIS_015_Unt_Innovation_1 Untern… #>  4 Bildung und Forschung OGD_innov014_CIS_014_Unt_Innovation_1 Umsätz… #>  5 Bildung und Forschung OGD_innov013_CIS_013_Unt_Innovation_1 Innova… #>  6 Bildung und Forschung OGD_innov013_CIS_013_Unt_Innovation_2 Innova… #>  7 Bildung und Forschung OGD_innov012_CIS_012_Unt_Innovation_1 Untern… #>  8 Bildung und Forschung OGD_innov011_CIS_011_Unt_Innovation_1 Untern… #>  9 Bildung und Forschung OGD_fhsstud_ext_FHS_S_1               Studie… #> 10 Bildung und Forschung OGD_phsabs_ext_PHS_A_1                Studie… #> # ℹ 34 more rows # use an id to load a dataset od_table(\"OGD_fhsstud_ext_FHS_S_1\") #> Studies at universities of applied sciences #>  #> Dataset: OGD_fhsstud_ext_FHS_S_1 (data.statistik.gv.at) #> Measures: Ordinary Studies, Courses of studies (Lehrgang), Newly #>   enrolled ordinary studies, Newly enrolled courses of studies #>   (Lehrgang) #> Fields: Semester <42> #>  #> Request: [2024-10-10 10:48:16.939785] #> STATcubeR: 1.0.0"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource management for open.data — od_resource","title":"Resource management for open.data — od_resource","text":"Helper functions caching parsing open.data resources.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource management for open.data — od_resource","text":"","code":"od_cache_dir(dir = NULL)  od_cache_clear(id, server = \"ext\")  od_cache_file(id, suffix = NULL, timestamp = NULL, ..., server = \"ext\")  od_resource(id, suffix = NULL, timestamp = NULL, server = \"ext\")  od_json(id, timestamp = Sys.time() - 3600, server = \"ext\")  od_resource_all(id, json = od_json(id), server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource management for open.data — od_resource","text":"dir NULL, cache directory returned. Otherwise, cache directory updated dir. id database id server OGD-Server use load update resources case outdated. \"ext\" external server (default) od \"red\" editing server. suffix suffix resource: \"HEADER\" field code. timestamp timestamp POSIXct format. provided, cached resource updated older value. Otherwise downloaded exist cache. ... internal use json JSON file belonging dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource management for open.data — od_resource","text":"od_cache_file() od_resource(), returned objects contain hidden attribute attr(., \"od\") time used downloading parsing resource. od_resource_all() converts hidden attribute columns.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource management for open.data — od_resource","text":"od_cache_clear(id) removes files belonging specified id. default, downloaded json files \"expire\" one hour 3600 seconds. , json requested, reused cache unless file.mtime() one hour behind Sys.time().","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_resource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource management for open.data — od_resource","text":"","code":"# get the current cache directory od_cache_dir() #> [1] \"/tmp/RtmpcxzbSZ/STATcubeR/open_data/\"  # Get paths to cached files od_cache_file(\"OGD_veste309_Veste309_1\") #> [1] \"/tmp/RtmpcxzbSZ/STATcubeR/open_data/OGD_veste309_Veste309_1.csv\" od_cache_file(\"OGD_veste309_Veste309_1\", \"C-A11-0\") #> [1] \"/tmp/RtmpcxzbSZ/STATcubeR/open_data/OGD_veste309_Veste309_1_C-A11-0.csv\"  # get a parsed verison of the resource od_resource(\"OGD_veste309_Veste309_1\", \"C-A11-0\") #> # A data frame: 3 × 7 #>   code  label label_de  label_en  parent de_desc en_desc #> * <chr> <chr> <chr>     <chr>     <fct>  <lgl>   <lgl>   #> 1 A11-1 NA    insgesamt Sum total NA     NA      NA      #> 2 A11-2 NA    männlich  Male      NA     NA      NA      #> 3 A11-3 NA    weiblich  Female    NA     NA      NA       # get json metadata about a dataset od_json('OGD_veste309_Veste309_1') #> Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR #> nach Staatsangehörigkeit, Bundesland und #> Beschäftigungsverhältnis #>  #> Verdienststruktur nach Geschlecht, Staatsangehörigkeit, #> Bundesland und Beschäftigungsverhältnis #>  #> Measures: Arithmetisches Mittel, 1. Quartil, 2. Quartil (Median), 3. #>   Quartil, Zahl d unselbst Beschäftigten #> Fields: Geschlecht, Staatsangehörigkeit, Bundesland (NUTS 2), Form #>   des Beschäftigungsverhältnisses #> Updated: 2022-03-24 11:29:48 #> Tags: Staatsangehörigkeit, Bundesland, Beschäftigungsverhältnis #> Categories: Arbeit, Bevölkerung  # Bundle all resources od_resource_all(\"OGD_veste309_Veste309_1\") #> # A data frame: 6 × 7 #>   name                 last_modified cached    size download parsed #>   <chr>                <dttm>        <dttm>   <dbl>    <dbl>  <dbl> #> 1 meta.json            2022-03-24    10:48:14  4931       NA  0.553 #> 2 data.csv             2022-03-24    10:48:14   516       NA  0.390 #> 3 OGD_veste309_Veste3… 2022-03-24    10:48:15   159       NA 15.7   #> 4 OGD_veste309_Veste3… 2022-03-24    10:48:15   697       NA  0.686 #> 5 OGD_veste309_Veste3… 2022-03-24    10:48:15   518       NA  0.457 #> 6 OGD_veste309_Veste3… 2022-03-24    10:48:15   641       NA  0.492 #> # ℹ 1 more variable: data <I<list>>"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OGD revisions — od_revisions","title":"Get OGD revisions — od_revisions","text":"Use /revision endpoint OGD server get list datasets changed since certain timestamp.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OGD revisions — od_revisions","text":"","code":"od_revisions(since = NULL, exclude_ext = TRUE, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OGD revisions — od_revisions","text":"since (optional) timestamp. supplied, datasets updated later returned. Otherwise, datasets returned. Can either one following formats native R time type compatible strftime() return values Sys.Date(), Sys.time() file.mtime(). string form YYYY-MM-DD specify day. string form YYYY-MM-DDThh:mm:ss specify day time. exclude_ext TRUE (default) exclude results OGDEXT_ prefix server open data server use. Either ext external server (default) red editing server. editing server accessible employees Statistics Austria","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OGD revisions — od_revisions","text":"character vector dataset ids","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OGD revisions — od_revisions","text":"","code":"# get all datasets (including OGDEXT_*) ids <- od_revisions(exclude_ext = FALSE) ids #> 435 datasets are available ([2024-10-10 10:48:18]) #> ids: OGDEXT_AEST_GEMTAB_1, OGDEXT_AMB_1, OGDEXT_BINNENWAND_1, …, OGD_watlas8_WATLAS_8, and OGD_zlf_komm_ZLF_KOM_1 sample(ids, 6) #> [1] \"OGD_desi_unt_ws_DESI_UNT_WS_1\" \"OGD_vpi20_VPI_2020_1\"          #> [3] \"OGD_1531kn2_Aussenhandel_4\"    \"OGD_tli06wk10_TLI_104\"         #> [5] \"OGD_uniabs_ext_UNI_OEFF_ABS_1\" \"OGDEXT_KLASSDB_PRODCOM2021_1\"   # get all the datasets since the fifteenth of august od_revisions(\"2022-09-15\") #> 295 changes between #>                 [2022-09-15] and #>                 [2024-10-10 10:48:18] #> ids: OGD_1531kn2_Aussenhandel_4, OGD_1905fue_FUE_B1905FUE_1, OGD__steuer_est_ab_2008_altgesch_EST_2_2, …, OGD_watlas8_WATLAS_8, and OGD_zlf_komm_ZLF_KOM_1"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table","title":"Create a table-instance from an open-data dataset — od_table","text":"od_table(id) returns R6-class object containing relevant data metadata https://data.statistik.gv./data/","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table","text":"","code":"od_table(id, language = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table-instance from an open-data dataset — od_table","text":"id id dataset accessed language language used labeling. \"en\" \"de\" server OGD-server used. \"ext\" (default) external server prod production server","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table-instance from an open-data dataset — od_table","text":"returned objects class sc_table inherits several parsing methods sc_data. See od_table_class full class documentation.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table-instance from an open-data dataset — od_table","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  ## metadata x #> Cancer statistics by reporting year, province of residence and #> localisation of cancer #>  #> Dataset: OGD_krebs_ext_KREBS_1 (data.statistik.gv.at) #> Measures: Number of records F-KRE #> Fields: Tumore ICD/10 3-Steller <98>, Reporting year <40>, Province #>   of residence <9>, Sex <2> #>  #> Request: [2024-10-10 10:48:19.300758] #> STATcubeR: 1.0.0 x$meta #> $source #> # STATcubeR metadata: 1 x 7 #>   code                  label                                    lang  #>   <chr>                 <chr>                                    <chr> #> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, pr… en    #> # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 7 #>   code  label                     NAs #>   <chr> <chr>                   <int> #> 1 F-KRE Number of records F-KRE     0 #> # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc' #>  #> $fields #> # STATcubeR metadata: 4 x 9 #>   code               label                   total_code nitems type    #>   <chr>              <chr>                   <chr>       <int> <chr>   #> 1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA             98 Catego… #> 2 C-BERJ-0           Reporting year          NA             40 Time (… #> 3 C-BUNDESLAND-0     Province of residence   NA              9 Catego… #> 4 C-KRE_GESCHLECHT-0 Sex                     NA              2 Catego… #> # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc' #>  x$field(\"Sex\") #> # STATcubeR metadata: 2 x 10 #>   code         label  parsed #>   <chr>        <chr>  <chr>  #> 1 GESCHLECHT-1 male   male   #> 2 GESCHLECHT-2 female female #> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' x$field(3) #> # STATcubeR metadata: 9 x 10 #>   code         label           parsed          #>   <chr>        <chr>           <chr>           #> 1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   #> 2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     #> 3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" #> 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" #> 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      #> 6 BUNDESLAND-6 \"Styria\"        \"Styria\"        #> 7 BUNDESLAND-7 \"Tyrol\"         \"Tyrol\"         #> 8 BUNDESLAND-8 \"Vorarlberg\"    \"Vorarlberg\"    #> 9 BUNDESLAND-9 \"Vienna\"        \"Vienna\"        #> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order'  ## data x$data #> # A STATcubeR tibble: 49,190 x 5 #>    `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` #>  * <fct>               <fct>      <fct>            #>  1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     #>  2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     #>  3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     #>  4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     #>  5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     #>  6 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     #>  7 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     #>  8 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-5     #>  9 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     #> 10 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     #> # ℹ 49,180 more rows #> # ℹ 2 more variables: `C-KRE_GESCHLECHT-0` <fct>, `F-KRE` <int> x$tabulate() #> # A STATcubeR tibble: 49,190 x 5 #>    `Tumore ICD/10 3-Steller`   `Reporting year` Province of residenc…¹ #>  * <fct>                       <date>           <fct>                  #>  1 <C00> Bösartige Neubildung… 1983-01-01       \"Burgenland \"          #>  2 <C00> Bösartige Neubildung… 1983-01-01       \"Carinthia\"            #>  3 <C00> Bösartige Neubildung… 1983-01-01       \"Carinthia\"            #>  4 <C00> Bösartige Neubildung… 1983-01-01       \"Lower Austria\"        #>  5 <C00> Bösartige Neubildung… 1983-01-01       \"Lower Austria\"        #>  6 <C00> Bösartige Neubildung… 1983-01-01       \"Upper Austria\"        #>  7 <C00> Bösartige Neubildung… 1983-01-01       \"Upper Austria\"        #>  8 <C00> Bösartige Neubildung… 1983-01-01       \"Salzburg\"             #>  9 <C00> Bösartige Neubildung… 1983-01-01       \"Styria\"               #> 10 <C00> Bösartige Neubildung… 1983-01-01       \"Styria\"               #> # ℹ 49,180 more rows #> # ℹ abbreviated name: ¹​`Province of residence` #> # ℹ 2 more variables: Sex <fct>, `Number of records F-KRE` <int>  ## tabulation: see `?sc_tabulate` for more examples x$tabulate(\"Reporting year\", \"Sex\") #> # A STATcubeR tibble: 80 x 3 #>    `Reporting year` Sex    `Number of records F-KRE` #>  * <date>           <fct>                      <int> #>  1 1983-01-01       male                       13626 #>  2 1983-01-01       female                     16702 #>  3 1984-01-01       male                       13996 #>  4 1984-01-01       female                     16620 #>  5 1985-01-01       male                       13658 #>  6 1985-01-01       female                     16487 #>  7 1986-01-01       male                       13592 #>  8 1986-01-01       female                     16173 #>  9 1987-01-01       male                       13957 #> 10 1987-01-01       female                     16724 #> # ℹ 70 more rows  ## switch language x$language <- \"de\" x #> Krebsstatistik #>  #> Dataset: OGD_krebs_ext_KREBS_1 (data.statistik.gv.at) #> Measures: Anzahl der Datensätze F-KRE #> Fields: Tumore ICD/10 3-Steller <98>, Berichtsjahr <40>, Bundesland #>   <9>, Geschlecht <2> #>  #> Request: [2024-10-10 10:48:19.300758] #> STATcubeR: 1.0.0 x$tabulate() #> # A STATcubeR tibble: 49,190 x 5 #>    `Tumore ICD/10 3-Steller`        Berichtsjahr Bundesland Geschlecht #>  * <fct>                            <date>       <fct>      <fct>      #>  1 <C00> Bösartige Neubildung der … 1983-01-01   Burgenland männlich   #>  2 <C00> Bösartige Neubildung der … 1983-01-01   Kärnten    männlich   #>  3 <C00> Bösartige Neubildung der … 1983-01-01   Kärnten    weiblich   #>  4 <C00> Bösartige Neubildung der … 1983-01-01   Niederöst… männlich   #>  5 <C00> Bösartige Neubildung der … 1983-01-01   Niederöst… weiblich   #>  6 <C00> Bösartige Neubildung der … 1983-01-01   Oberöster… männlich   #>  7 <C00> Bösartige Neubildung der … 1983-01-01   Oberöster… weiblich   #>  8 <C00> Bösartige Neubildung der … 1983-01-01   Salzburg   männlich   #>  9 <C00> Bösartige Neubildung der … 1983-01-01   Steiermark männlich   #> 10 <C00> Bösartige Neubildung der … 1983-01-01   Steiermark weiblich   #> # ℹ 49,180 more rows #> # ℹ 1 more variable: `Anzahl der Datensätze F-KRE` <int>  ## other interesting tables od_table(\"OGD_veste309_Veste309_1\") #> Structure of Earnings Survey (SES) 2018 Gross hourly earnings #> in EUR by citizenship, region (NUTS 2) and form of employment #>  #> Dataset: OGD_veste309_Veste309_1 (data.statistik.gv.at) #> Measures: Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>   quartile, Number of employees #> Fields: Sex <3>, Citizenship <9>, Region (NUTS2) <10>, Form of #>   employment <7> #>  #> Request: [2024-10-10 10:48:19.528937] #> STATcubeR: 1.0.0 od_table(\"OGD_konjunkturmonitor_KonMon_1\") #> Economic Trend Monitor #>  #> Dataset: OGD_konjunkturmonitor_KonMon_1 (data.statistik.gv.at) #> Measures: Production index industry (wd; 2021=100), Technical total #>   production industry (in 1.000 €), Turnover index industry #>   (2021=100), Turnover industry (in 1.000 €), Index of new orders #>   industry (2021=100), Index of persons employed industry (2021=100), #>   Persons employed industry, Productivity index industry per employee #>   (2021=100), Productivity index industry per hours worked #>   (2021=100), Industrial output price index (2021=100), … (78 more) #> Fields: reporting period <268>, value indication <3> #>  #> Request: [2024-10-10 10:48:19.577467] #> STATcubeR: 1.0.0 od_table(\"OGD_krankenbewegungen_ex_LEISTUNGEN_1\") #> Medical procedures during inpatient stays since 1989 by #> patient characteristics (number of medical procedures) #>  #> Dataset: OGD_krankenbewegungen_ex_LEISTUNGEN_1 (data.statistik.gv.at) #> Measures: Medical procedures #> Fields: Year of discharge <32>, Sex <2>, Age (four classes) <4>, #>   NUTS-2 region (place of residence) <12>, Medical procedures - #>   subchapters <115> #>  #> Request: [2024-10-10 10:48:21.801934] #> STATcubeR: 1.0.0 od_table(\"OGD_veste303_Veste203_1\") #> Structure of Earnings Survey (SES) 2018 Gross hourly earnings #> in EUR by characteristics of the enterprise #>  #> Dataset: OGD_veste303_Veste203_1 (data.statistik.gv.at) #> Measures: Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>   quartile, Number of employees #> Fields: ÖNACE 2008 (NACE Rev.2) <97>, Sex <3>, Regions (Nuts1) <4>, #>   Size of the enterprise <6> #>  #> Request: [2024-10-10 10:48:34.702331] #> STATcubeR: 1.0.0"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table_class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"R6 Class open data datasets.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"STATcubeR::sc_data -> od_table","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a table-instance from an open-data dataset — od_table_class","text":"json parsed version https://data.statistik.gv./ogd/json?dataset=${id} header parsed version https://data.statistik.gv./data/${id}_HEADER.csv. Similar contents can found $meta. resources lists files downloaded server construct table od_server server used initialization (see ?od_table)","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create a table-instance from an open-data dataset — od_table_class","text":"STATcubeR::sc_data$field() STATcubeR::sc_data$tabulate() STATcubeR::sc_data$total_codes()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create a table-instance from an open-data dataset — od_table_class","text":"od_table_class$new() od_table_class$browse()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create a table-instance from an open-data dataset — od_table_class","text":"class exported. Use od_table() initialize objects class od_table.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table_class","text":"","code":"od_table_class$new(id, language = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table-instance from an open-data dataset — od_table_class","text":"id id dataset accessed language language used labeling. \"en\" \"de\" server OGD-Server server used","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"method-browse-","dir":"Reference","previous_headings":"","what":"Method browse()","title":"Create a table-instance from an open-data dataset — od_table_class","text":"open metadata dataset browser","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table_class","text":"","code":"od_table_class$browse()"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves/load opendata datasets via tar archives — od_table_save","title":"Saves/load opendata datasets via tar archives — od_table_save","text":"od_table_save() creates tar archive containing relevant data OGD portal. od_table_local() parses tar archive recreates od_table object.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves/load opendata datasets via tar archives — od_table_save","text":"","code":"od_table_save(x, file = NULL)  od_table_local(file)"},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves/load opendata datasets via tar archives — od_table_save","text":"x object class od_table file archive file file dataset. od_table_save(), default {id}.tar.gz id denotes OGD identifier.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/od_table_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves/load opendata datasets via tar archives — od_table_save","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  # save dataset as an archive archive <- file.path(tempdir(), \"table.tar.gz\") od_table_save(x, archive)  # read the saved archive x2 <- od_table_local(archive)  # cleanup file.remove(archive) #> [1] TRUE"},{"path":"https://statistikat.github.io/STATcubeR/reference/other_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Other endpoints of the STATcube REST API — other_endpoints","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"Utilize simple endpoints /info /table_rate_limit. provide information available locales amount requests available calls /table endpoint.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/other_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"","code":"sc_info(language = c(\"en\", \"de\"), key = NULL, server = \"ext\")  sc_rate_limit_table(language = c(\"en\", \"de\"), key = NULL, server = \"ext\")  sc_rate_limit_schema(language = c(\"en\", \"de\"), key = NULL, server = \"ext\")  sc_rate_limits(x)"},{"path":"https://statistikat.github.io/STATcubeR/reference/other_endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"language language used labeling. \"en\" \"de\" key (string) API key. display key, call sc_browse_preferences(). server STATcube API server. Defaults external Server via \"ext\". options \"red\" editing server \"prod\" production server. External users always use default option \"ext\". x either response-object (package httr), object class sc_table object class sc_schema","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/other_endpoints.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"sc_info(): returns information available database languages sc_rate_limit_table(): returns 3x1 dataframe following columns remaining much requests can sent /table endpoint rate limit reached. limit number requests allowed per hour. reset timestamp rate limit reset. Usually, less one hour `current time. sc_rate_limits(): gets rate limits response headers","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/other_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"","code":"sc_info() #> # A data frame: 2 × 2 #>   locale displayName #>   <chr>  <chr>       #> 1 de     Deutsch     #> 2 en     English     sc_rate_limit_table() #> 50 / 100 (Resets at [11:37:59]) #>  sc_rate_limit_schema() #> 9994 / 10000 (Resets at [11:37:59]) #>  sc_rate_limits(sc_schema(\"str:group:deake005:X_B1\")) #> $schema #> 9994 / 10000 (Resets at [11:37:59]) #>  #>  #> $table #> 50 / 100 (Resets at [11:37:59]) #>  #>"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Links to important STATcube and OGD pages — sc_browse","title":"Links to important STATcube and OGD pages — sc_browse","text":"collection links, browse important STATcube pages.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Links to important STATcube and OGD pages — sc_browse","text":"","code":"sc_browse(server = \"ext\")  sc_browse_preferences(server = \"ext\")  sc_browse_table(table, server = \"ext\")  sc_browse_database(database, server = NULL, open = FALSE)  sc_browse_catalogue(server = \"ext\")  sc_browse_ogd()"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Links to important STATcube and OGD pages — sc_browse","text":"server STATcube API server. Defaults external Server via \"ext\". options \"red\" editing server \"prod\" production server. External users always use default option \"ext\". table table id database database id open FALSE (default), open infopage database. Otherwise, open table view.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_browse.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Links to important STATcube and OGD pages — sc_browse","text":"sc_browse(): opens home menu STATcube sc_browse_preferences(): opens preference menu API key sc_browse_table(): shows info page table sc_browse_database(): shows info page database sc_browse_catalogue(): shows data catalogue explorer sc_browse_ogd(): shows landing page OGD datasets","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Links to important STATcube and OGD pages — sc_browse","text":"","code":"sc_browse() #> https://portal.statistik.at/statistik.at/ext/statcube/home sc_browse_preferences() #> https://portal.statistik.at/statistik.at/ext/statcube/jsf/preferences/editPreferences.xhtml sc_browse_table('defaulttable_deake005') #> https://portal.statistik.at/statistik.at/ext/statcube/openinfopage?tableId=defaulttable_deake005 sc_browse_database('deake005') #> https://portal.statistik.at/statistik.at/ext/statcube/openinfopage?id=deake005 sc_browse_catalogue() #> https://portal.statistik.at/statistik.at/ext/statcube/jsf/dataCatalogueExplorer.xhtml sc_browse_ogd() #> https://data.statistik.gv.at/"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache responses from the STATcube REST API — sc_cache","title":"Cache responses from the STATcube REST API — sc_cache","text":"Functions cache requested resources directory ~/.STATcubeR_cache reuse calls sc_table(), sc_table_custom() sc_schema() forth. functions designed testing documentation regarded part STATcubeR interface. caching logic likely change future case sc_cache_clear() required purge old cache entries.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache responses from the STATcube REST API — sc_cache","text":"","code":"sc_cache_enable(verbose = TRUE)  sc_cache_disable()  sc_cache_enabled()  sc_cache_dir(dir = NULL)  sc_cache_files(x)  sc_cache_clear()"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache responses from the STATcube REST API — sc_cache","text":"verbose print instructions set caching persistently via environment variables? dir cache directory x object class sc_table sc_schema","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache responses from the STATcube REST API — sc_cache","text":"Caching can set using environment variables. set persistent cache Open Data REST API, following lines .Renviron can used. paths example applicable UNIX-based operating systems.   caching enabled, check verify resources unchanged server. Caching implemented endpoints sc_info() sc_rate_limit_table().","code":"STATCUBE_KEY_EXT   = YOUR_API_KEY_GOES_HERE STATCUBE_CACHE     = TRUE OD_CACHE_DIR       = \"~/.cache/STATcubeR/open_data/\" STATCUBE_CACHE_DIR = \"~/.cache/STATcubeR/api/\""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_cache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cache responses from the STATcube REST API — sc_cache","text":"sc_cache_enable(): enables caching current R session sc_cache_disable(): disables caching current R session sc_cache_disable() sc_cache_enabled(): informs whether cache currently enabled sc_cache_dir(): get/set directory used caching sc_cache_files(): get cache file associated object sc_cache_clear(): removes files cache","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Common interface for STATcubeR datasets — sc_data","title":"Common interface for STATcubeR datasets — sc_data","text":"class represents common interface datasets returned STATcube REST API OGD datasets. sc_data objects usually created od_table() sc_table().","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Common interface for STATcubeR datasets — sc_data","text":"data raw data. data.frame uses codes field variables column names. obtain labeled data, use $tabulate(). language language used labeling. \"en\" \"de\" meta list containing metadata dataset. least following entries $source dataframe single row contains information data source. $measures dataframe one row every measure dataset. contains codes labels measure well number NAs. Derived classes might add additional columns. $fields dataframe one row every field dataset. contains codes labels measure well total codes. Derived classes might add additional columns recode object class sc_recoder can used change labels perform recoding operations.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Common interface for STATcubeR datasets — sc_data","text":"sc_data$new() sc_data$field() sc_data$tabulate() sc_data$total_codes() sc_data$clone()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Common interface for STATcubeR datasets — sc_data","text":"class exported. Use od_table() sc_table() initialize objects class sc_data.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$new(data, meta, fields)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"data, meta, fields raw data, metadata field information. use directly initialize objects sc_table() od_table()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"method-field-","dir":"Reference","previous_headings":"","what":"Method field()","title":"Common interface for STATcubeR datasets — sc_data","text":"get information specific field. format return value similar $meta. data.frame includes codes labels level field.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$field(i = 1)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"specifier field. Integer character. integer provided, match row number $meta$fields. character provided, field matched using pmatch() available codes labels.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) x$field(\"Sex\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"method-tabulate-","dir":"Reference","previous_headings":"","what":"Method tabulate()","title":"Common interface for STATcubeR datasets — sc_data","text":"create tidy dataset. See sc_tabulate() details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$tabulate(...)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"... arguments passed sc_tabulate()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\")"},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$total_codes(...)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"... key value pairs define total codes. Key field code value code $field(). empty, return data.frame specified total codes. Keys values can also use labels instead codes. See examples.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") earnings$tabulate(\"Sex\", \"Form of employment\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Common interface for STATcubeR datasets — sc_data","text":"objects class cloneable method.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$clone(deep = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"deep Whether make deep clone.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"## create a new sc_data object via od_table() x <- od_table(\"OGD_krebs_ext_KREBS_1\")  ## show data x$data #> # A STATcubeR tibble: 49,190 x 5 #>    `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` #>  * <fct>               <fct>      <fct>            #>  1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     #>  2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     #>  3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     #>  4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     #>  5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     #>  6 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     #>  7 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     #>  8 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-5     #>  9 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     #> 10 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     #> # ℹ 49,180 more rows #> # ℹ 2 more variables: `C-KRE_GESCHLECHT-0` <fct>, `F-KRE` <int>  ## show metadata x$meta #> $source #> # STATcubeR metadata: 1 x 7 #>   code                  label                                    lang  #>   <chr>                 <chr>                                    <chr> #> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, pr… en    #> # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 7 #>   code  label                     NAs #>   <chr> <chr>                   <int> #> 1 F-KRE Number of records F-KRE     0 #> # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc' #>  #> $fields #> # STATcubeR metadata: 4 x 9 #>   code               label                   total_code nitems type    #>   <chr>              <chr>                   <chr>       <int> <chr>   #> 1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA             98 Catego… #> 2 C-BERJ-0           Reporting year          NA             40 Time (… #> 3 C-BUNDESLAND-0     Province of residence   NA              9 Catego… #> 4 C-KRE_GESCHLECHT-0 Sex                     NA              2 Catego… #> # … with 4 more columns: 'label_de', 'label_en', 'de_desc', 'en_desc' #>   ## ------------------------------------------------ ## Method `sc_data$field` ## ------------------------------------------------  x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) #> # STATcubeR metadata: 98 x 10 #>    code              label                                      parsed #>    <chr>             <chr>                                      <chr>  #>  1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe       <C00>… #>  2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrun… <C01>… #>  3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und … <C02>… #>  4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisc… <C03>… #>  5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens  <C04>… #>  6 TUM_ICD10_3ST-C05 <C05> Bösartige Neubildung des Gaumens     <C05>… #>  7 TUM_ICD10_3ST-C06 <C06> Bösartige Neubildung sonstiger und … <C06>… #>  8 TUM_ICD10_3ST-C07 <C07> Bösartige Neubildung der Parotis     <C07>… #>  9 TUM_ICD10_3ST-C08 <C08> Bösartige Neubildung sonstiger und … <C08>… #> 10 TUM_ICD10_3ST-C09 <C09> Bösartige Neubildung der Tonsille    <C09>… #> # ℹ 88 more rows #> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order' x$field(\"Sex\") #> # STATcubeR metadata: 2 x 10 #>   code         label  parsed #>   <chr>        <chr>  <chr>  #> 1 GESCHLECHT-1 male   male   #> 2 GESCHLECHT-2 female female #> # … with 7 more columns: 'label_de', 'label_en', 'parent', 'de_desc', 'en_desc', 'visible', 'order'  ## ------------------------------------------------ ## Method `sc_data$tabulate` ## ------------------------------------------------  x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\") #> # A STATcubeR tibble: 80 x 3 #>    `Reporting year` Sex    `Number of records F-KRE` #>  * <date>           <fct>                      <int> #>  1 1983-01-01       male                       13626 #>  2 1983-01-01       female                     16702 #>  3 1984-01-01       male                       13996 #>  4 1984-01-01       female                     16620 #>  5 1985-01-01       male                       13658 #>  6 1985-01-01       female                     16487 #>  7 1986-01-01       male                       13592 #>  8 1986-01-01       female                     16173 #>  9 1987-01-01       male                       13957 #> 10 1987-01-01       female                     16724 #> # ℹ 70 more rows  ## ------------------------------------------------ ## Method `sc_data$total_codes` ## ------------------------------------------------  earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") #> # A STATcubeR tibble: 6 x 6 #>   `Form of employment`                `Arithmetic mean` `1st quartile` #> * <fct>                                           <dbl>          <dbl> #> 1 \"Standard employment \"                           19.0           12.8 #> 2 \"Non-standard employment (total)\"                15.2           10.2 #> 3 \"Non-standard employment: part-tim…              15.9           10.7 #> 4 \"Non-standard employment: fixed-te…              16.8           10.2 #> 5 \"Non-standard employment: marginal…              12              9   #> 6 \"Non-standard employment: temporar…              14.0           11.5 #> # ℹ 3 more variables: `2nd quartile (median)` <dbl>, #> #   `3rd quartile` <dbl>, `Number of employees` <dbl> earnings$tabulate(\"Sex\", \"Form of employment\") #> # A STATcubeR tibble: 12 x 7 #>    Sex    `Form of employment`        `Arithmetic mean` `1st quartile` #>  * <fct>  <fct>                                   <dbl>          <dbl> #>  1 Male   \"Standard employment \"                   20.0          13.5  #>  2 Male   \"Non-standard employment (…              16.5          10.5  #>  3 Male   \"Non-standard employment: …              18.8          11.1  #>  4 Male   \"Non-standard employment: …              18.3          10.9  #>  5 Male   \"Non-standard employment: …              12.6           9    #>  6 Male   \"Non-standard employment: …              14.4          12    #>  7 Female \"Standard employment \"                   16.3          11.1  #>  8 Female \"Non-standard employment (…              14.6          10.0  #>  9 Female \"Non-standard employment: …              15.2          10.6  #> 10 Female \"Non-standard employment: …              15.2           9.68 #> 11 Female \"Non-standard employment: …              11.6           9.02 #> 12 Female \"Non-standard employment: …              13.0          10.4  #> # ℹ 3 more variables: `2nd quartile (median)` <dbl>, #> #   `3rd quartile` <dbl>, `Number of employees` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_json_get_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the server from a json request — sc_json_get_server","title":"Get the server from a json request — sc_json_get_server","text":"parses json request returns short string representing corresponding STATcube server","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_json_get_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the server from a json request — sc_json_get_server","text":"","code":"sc_json_get_server(json)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_json_get_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the server from a json request — sc_json_get_server","text":"json path request json","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_json_get_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the server from a json request — sc_json_get_server","text":"\"ext\", \"red\" \"prod\" depending database uri json request","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_json_get_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the server from a json request — sc_json_get_server","text":"","code":"sc_json_get_server(sc_example('accomodation')) #> [1] \"ext\""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage your API Keys — sc_key","title":"Manage your API Keys — sc_key","text":"Functions get/set STATcube API keys make available calls STATcube API.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage your API Keys — sc_key","text":"","code":"sc_key(server = \"ext\", test = FALSE)  sc_key_set(key, server = \"ext\", test = TRUE)  sc_key_get(server = \"ext\")  sc_key_prompt(server = \"ext\", test = TRUE)  sc_key_exists(server = \"ext\")  sc_key_valid(key = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage your API Keys — sc_key","text":"server STATcube API server. Defaults external Server via \"ext\". options \"red\" editing server \"prod\" production server. External users always use default option \"ext\". test Use sc_key_valid() verify key? key invalid, error returned key set updated. key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage your API Keys — sc_key","text":"functions return key (invisibly) except sc_key_exists() sc_key_valid(), return logical() length one.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_key.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage your API Keys — sc_key","text":"sc_key(): forwards sc_key_get() key already present. Otherwise, sc_key_prompt() invoked. sc_key_set(): can used pass key parameter (string) sc_key_get(): returns key, exists. Otherwise, error thrown. sc_key_prompt(): prompts key via readline() sc_key_exists(): returns TRUE key set FALSE otherwise. sc_key_valid(): performs test request returns TRUE key valid FALSE otherwise.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_last_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Error handling for the STATcube REST API — sc_last_error","title":"Error handling for the STATcube REST API — sc_last_error","text":"case API requests unsuccessful, STATcubeR throw errors summarize httr error type meaning. Requests considered unsuccessful one following applies response returns TRUE httr::http_error(). response type \"application/json\" cases useful get direct access faulty response object. purpose, possible use sc_last_error() provide httr response object last unsuccessful request.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_last_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error handling for the STATcube REST API — sc_last_error","text":"","code":"sc_last_error()  sc_last_error_parsed()"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_last_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error handling for the STATcube REST API — sc_last_error","text":"return value httr::GET() httr::POST().","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_last_error.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Error handling for the STATcube REST API — sc_last_error","text":"sc_last_error_parsed(): returns last error list containing response content response status","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_last_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error handling for the STATcube REST API — sc_last_error","text":"","code":"try(sc_table_saved(\"invalid_id\")) #> Error : Client error: (400) Bad Request #> { #>   \"message\": \"The requested TXD 'str:table:invalid_id' could not be found for the current user.\", #>   \"errorType\": \"TXD_NOT_FOUND\", #>   \"component\": \"str:table:invalid_id\" #> } #> Run `sc_last_error()` or read the online documentation for more details last_error <- sc_last_error() httr::content(last_error) #> $message #> [1] \"The requested TXD 'str:table:invalid_id' could not be found for the current user.\" #>  #> $errorType #> [1] \"TXD_NOT_FOUND\" #>  #> $component #> [1] \"str:table:invalid_id\" #>  str(sc_last_error_parsed()) #> List of 3 #>  $ request:List of 2 #>   ..$ method: chr \"GET\" #>   ..$ url   : chr \"https://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1/table/saved/str:table:invalid_id\" #>  $ content:List of 3 #>   ..$ message  : chr \"The requested TXD 'str:table:invalid_id' could not be found for the current user.\" #>   ..$ errorType: chr \"TXD_NOT_FOUND\" #>   ..$ component: chr \"str:table:invalid_id\" #>  $ status :List of 3 #>   ..$ category: chr \"Client error\" #>   ..$ reason  : chr \"Bad Request\" #>   ..$ message : chr \"Client error: (400) Bad Request\""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode sc_table objects — sc_recoder","title":"Recode sc_table objects — sc_recoder","text":"collection methods can used modify object class sc_table reference. Typical usage access recode binding sc_table object use method chaining perform recode operations.   See example section details.","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$recode$   label_field(\"C-BERJ-0\", \"de\", \"JAHR\")$   label_measure(\"F-KRE\", \"de\", \"Anzahl\")"},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Recode sc_table objects — sc_recoder","text":"sc_recoder$new() sc_recoder$label_field() sc_recoder$label_measure() sc_recoder$level() sc_recoder$total_codes() sc_recoder$visible() sc_recoder$order()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Recode sc_table objects — sc_recoder","text":"Create new recoder instance. automatically performed setup sc_data objects","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$new(x)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"x private environment sc_data object","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-label-field-","dir":"Reference","previous_headings":"","what":"Method label_field()","title":"Recode sc_table objects — sc_recoder","text":"Change label field variable","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$label_field(field, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code language language, \"de\" \"en\" new new label","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-label-measure-","dir":"Reference","previous_headings":"","what":"Method label_measure()","title":"Recode sc_table objects — sc_recoder","text":"Change label measure variable","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$label_measure(measure, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"measure measure code language language \"de\" \"en\" new new label","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-level-","dir":"Reference","previous_headings":"","what":"Method level()","title":"Recode sc_table objects — sc_recoder","text":"Change labels level","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$level(field, level, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code level level code field language language \"de\" \"en\" new new label level","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-total-codes-","dir":"Reference","previous_headings":"","what":"Method total_codes()","title":"Recode sc_table objects — sc_recoder","text":"Change total code field","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$total_codes(field, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code new level code field NA. used new total code. case NA, total code unset.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-visible-","dir":"Reference","previous_headings":"","what":"Method visible()","title":"Recode sc_table objects — sc_recoder","text":"set visibility level. Invisible levels omitted output $tabulate() affect aggregation","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$visible(field, level, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code level level code field new visibility. TRUE FALSE","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"method-order-","dir":"Reference","previous_headings":"","what":"Method order()","title":"Recode sc_table objects — sc_recoder","text":"set order levels.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$order(field, new)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code new new order. permutation level codes field. alternatively, integer vector defines permutation.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_recoder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode sc_table objects — sc_recoder","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  x$recode$   label_field(\"C-KRE_GESCHLECHT-0\", \"en\", \"SEX\")$   label_measure(\"F-KRE\", \"en\", \"NUMBER\")$   level(\"C-KRE_GESCHLECHT-0\", \"GESCHLECHT-1\", \"en\", \"MALE\")  x$tabulate(\"C-KRE_GESCHLECHT-0\", \"F-KRE\") #> # A STATcubeR tibble: 2 x 2 #>   SEX    NUMBER #> * <fct>   <int> #> 1 MALE    25920 #> 2 female  25325  earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$recode$   total_codes(\"C-A11-0\", \"A11-1\")$   total_codes(\"C-STAATS-0\", \"STAATS-9\")$   total_codes(\"C-VEBDL-0\", \"VEBDL-10\")$   total_codes(\"C-BESCHV-0\", \"BESCHV-1\")  earnings$total_codes() #> # A data frame: 4 × 2 #>   code       total_code #>   <chr>      <chr>      #> 1 C-A11-0    A11-1      #> 2 C-STAATS-0 STAATS-9   #> 3 C-VEBDL-0  VEBDL-10   #> 4 C-BESCHV-0 BESCHV-1    earnings$tabulate(\"C-STAATS-0\") #> # A STATcubeR tibble: 8 x 6 #>   Citizenship  `Arithmetic mean` `1st quartile` 2nd quartile (median…¹ #> * <fct>                    <dbl>          <dbl>                  <dbl> #> 1 \"Austrian\"                18.5          12.4                    15.9 #> 2 \"Non-Austri…              14.4           9.72                   12.3 #> 3 \"EU-28/EWR/…              15.2          10.0                    12.8 #> 4 \"EU-15/EWR …              19.6          11.9                    15.9 #> 5 \"EU-13 EU M…              13.0           9.59                   11.9 #> 6 \"Former Yug…              12.8           9.58                   12.0 #> 7 \"Turkey\"                  12.2           9.35                   11.3 #> 8 \"Other\"                   13.8           9.07                   10.9 #> # ℹ abbreviated name: ¹​`2nd quartile (median)` #> # ℹ 2 more variables: `3rd quartile` <dbl>, #> #   `Number of employees` <dbl> earnings$recode$visible(\"C-STAATS-0\", \"STAATS-8\", FALSE) earnings$tabulate(\"C-STAATS-0\") #> # A STATcubeR tibble: 7 x 6 #>   Citizenship  `Arithmetic mean` `1st quartile` 2nd quartile (median…¹ #> * <fct>                    <dbl>          <dbl>                  <dbl> #> 1 \"Austrian\"                18.5          12.4                    15.9 #> 2 \"Non-Austri…              14.4           9.72                   12.3 #> 3 \"EU-28/EWR/…              15.2          10.0                    12.8 #> 4 \"EU-15/EWR …              19.6          11.9                    15.9 #> 5 \"EU-13 EU M…              13.0           9.59                   11.9 #> 6 \"Former Yug…              12.8           9.58                   12.0 #> 7 \"Turkey\"                  12.2           9.35                   11.3 #> # ℹ abbreviated name: ¹​`2nd quartile (median)` #> # ℹ 2 more variables: `3rd quartile` <dbl>, #> #   `Number of employees` <dbl>  earnings$recode$   order(\"C-A11-0\", c(\"A11-3\", \"A11-1\", \"A11-2\"))"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /schema endpoint — sc_schema","title":"Create a request against the /schema endpoint — sc_schema","text":"Invoke /schema endpoint STATcube REST API. endpoint can used get available databases tables well metadata specific databases. main function sc_schema() can used resource id. sc_schema_catalogue() sc_schema_db() simple wrapper functions around sc_schema() comparable catalogue explorer table view STATcube GUI. responses API tree-like data structures wrapped class called sc_schema simplify usage R.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /schema endpoint — sc_schema","text":"","code":"sc_schema(id = NULL, depth = NULL, language = NULL, key = NULL, server = \"ext\")  # S3 method for class 'sc_schema' print(x, tree = NULL, ..., limit = 30)  sc_schema_flatten(x, type)  sc_schema_catalogue(depth = \"folder\", ...)  sc_schema_db(id, depth = \"valueset\", language = c(\"en\", \"de\"), key = NULL)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a request against the /schema endpoint — sc_schema","text":"id resource identifier uid format. case sc_schema_db(), database id. sc_schema() resource-id (folder, measure, table, ...) accepted. depth provided, request recurse given level. datasets, available options NULL (recursion), \"folder\", \"field\" \"valueset\". catalogue, NULL \"folder\" applicable. language language used labeling. \"en\" \"de\" key (string) API key. display key, call sc_browse_preferences(). server STATcube API server. Defaults external Server via \"ext\". options \"red\" editing server \"prod\" production server. External users always use default option \"ext\". x object class sc_schema() .e. return value sc_schema(), sc_schema_db() sc_schema_catalogue(). tree whether use data.tree package printing. limit, ... passed data.tree::print.Node() tree set TRUE. Ignored otherwise. type schema type \"DATABASE\", \"VALUE\" \"TABLE\". See API reference list schema types.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a request against the /schema endpoint — sc_schema","text":"sc_schema_flatten(): turns sc_schema object data.frame sc_schema_catalogue(): similar catalogue explorer STATcube GUI returns tree-type object containing databases tables. sc_schema_db(): similar table view STATcube GUI gives information measures classification fields specific database","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":"printing-with-data-tree","dir":"Reference","previous_headings":"","what":"Printing with data.tree","title":"Create a request against the /schema endpoint — sc_schema","text":"limit ... simply ignored tree set FALSE, default. printing via data.tree can take longer default implementation x need converted data.tree node. use data.tree printing permanently, use","code":"options(STATcubeR.print_tree = TRUE)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a request against the /schema endpoint — sc_schema","text":"","code":"my_catalogue <- sc_schema_catalogue()  ## print my_catalogue #> FOLDER: Extern V9 #> 1 Examples                  FOLDER     9 #> 2 Publications and services FOLDER     2 #> 3 Default Tables            FOLDER     0 #> 4 Statistics                FOLDER    20 #> 5 meineErsteTabelle         TABLE      0 #> 6 meineZweiteTabelle        TABLE      0  ## access the parsed catalogue my_catalogue$Statistics$`Labour Market` #> FOLDER: Labour Market #>  1 Job Seeker                               FOLDER       0 #>  2 Labour Market Policy                     FOLDER       0 #>  3 Working Time                             FOLDER       0 #>  4 Selected Labour Market Indicators        FOLDER       0 #>  5 Activity Status                          FOLDER       0 #>  6 Employment                               FOLDER       0 #>  7 Job Vacancies                            FOLDER       4 #>  8 Working hours (Labour Force Survey)      DATABASE     0 #>  9 Austrian Micro census - Labour Force Sur DATABASE     0 #> 10 Austrian Micro census - Labour Force Sur DATABASE     0 #> 11 Mikrozensus-Zeitreihe ab 1974            DATABASE     0 #> 12 Standardtabelle / Default table (default TABLE        0 #> 13 Standardtabelle / Default table (default TABLE        0 #> 14 Standardtabelle / Default table (default TABLE        0 #> 15 Standardtabelle / Default table (default TABLE        0 my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)` #> DATABASE: Working hours (Labour Force Survey) #> # Get more metdata with `sc_schema_db('deake005')`   db_schema <- sc_schema_db(\"deake005\")  # printing db_schema #> DATABASE: Working hours (Labour Force Survey) #> 1 Factors                              GROUP     9 #> 2 Datensätze/Records                   GROUP     1 #> 3 Time (mandatory field)               GROUP     1 #> 4 Demographic Characteristics          GROUP     8 #> 5 Employment Characteristics           GROUP     6 #> 6 Working Time                         GROUP     5 #> 7 Characteristics of second employment GROUP     6 #> 8 Geographic Characteristics           GROUP     1  # access child nodes db_schema$`Demographic Characteristics` #> GROUP: Demographic Characteristics #> 1 Gender                                           FIELD     1 #> 2 Age in years-groups                              FIELD     3 #> 3 Highest level of training completed (nat         FIELD     2 #> 4 Highest level of training completed (ISCED 97)   FIELD     2 #> 5 Highest level of training completed (ISCED 2011) FIELD     2 #> 6 Nationality                                      FIELD     2 #> 7 Country of birth                                 FIELD     2 #> 8 Migration background                             FIELD     2 db_schema$`Demographic Characteristics`$Gender$Gender #> VALUESET: Gender #> 1 male                 VALUE #> 2 female               VALUE #> 3 Not classifiable <0> VALUE db_schema$`Demographic Characteristics`$Gender$Gender$male #> VALUE: male  # access the raw response from httr::GET() my_response <- attr(db_schema, \"response\") my_response$headers$date #> [1] \"Thu, 10 Oct 2024 10:48:54 GMT\" my_content <- httr::content(my_response) my_content$label #> [1] \"Working hours (Labour Force Survey)\"  # print with data.tree   treeX_B1 <- sc_schema(\"str:group:deake005:X_B1\", depth = \"valueset\")  print(treeX_B1, tree = TRUE) #>                           levelName     type #> 1  Demographic Characteristics         GROUP #> 2   ¦--Gender                          FIELD #> 3   ¦   °--Gender                   VALUESET #> 4   ¦       ¦--male                    VALUE #> 5   ¦       ¦--female                  VALUE #> 6   ¦       °--Not classifiable <0>    VALUE #> 7   ¦--Age in years-groups             FIELD #> 8   ¦   ¦--Age in years-groups      VALUESET #> 9   ¦   ¦   ¦--Under 15 years          VALUE #> 10  ¦   ¦   ¦--15 to 19 years          VALUE #> 11  ¦   ¦   ¦--20 to 24 years          VALUE #> 12  ¦   ¦   ¦--25 to 29 years          VALUE #> 13  ¦   ¦   ¦--30 to 34 years          VALUE #> 14  ¦   ¦   ¦--35 to 39 years          VALUE #> 15  ¦   ¦   ¦--40 to 44 years          VALUE #> 16  ¦   ¦   ¦--45 to 49 years          VALUE #> 17  ¦   ¦   ¦--50 to 54 years          VALUE #> 18  ¦   ¦   ¦--55 to 59 years          VALUE #> 19  ¦   ¦   ¦--60 to 64 years          VALUE #> 20  ¦   ¦   ¦--65 to 69 years          VALUE #> 21  ¦   ¦   ¦--70 to 74 years          VALUE #> 22  ¦   ¦   ¦--75 years and older      VALUE #> 23  ¦   ¦   °--Not classifiable <0>    VALUE #> 24  ¦   ¦--Alter in Jahresgruppen   VALUESET #> 25  ¦   ¦   ¦--Under 15 years          VALUE #> 26  ¦   ¦   ¦--15 to 24 years          VALUE #> 27  ¦   ¦   ¦--25 to 34 years          VALUE #> 28  ¦   ¦   ¦--35 to 44 years          VALUE #> 29  ¦   ¦   ¦--45 to 54 years          VALUE #> 30  ¦   ¦   °--... 3 nodes w/ 0 sub          #> 31  ¦   °--... 1 nodes w/ 6 sub              #> 32  °--... 6 nodes w/ 80 sub"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /table endpoint — sc_table","title":"Create a request against the /table endpoint — sc_table","text":"Send requests /table endpoint STATcube REST API. requests can use three formats corresponding functions sc_table() uses json file downloaded via STATcube GUI sc_table_custom() uses ids database, measures fields sc_table_saved() uses table uri saved table. three functions return object class \"sc_table\".","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /table endpoint — sc_table","text":"","code":"sc_table(json, language = NULL, add_totals = TRUE, key = NULL, json_file = NA)  sc_examples_list()  sc_example(filename)  sc_table_saved_list(key = NULL, server = \"ext\")  sc_table_saved(table_uri, language = NULL, key = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a request against the /table endpoint — sc_table","text":"json Path json file, downloaded via STATcube GUI (\"Open Data API Request\"). Alternatively, json string passes jsonlite::validate(). language language used labeling. \"en\" (default) use english. \"de\" uses German. third option \"\" import languages sending two requests /table endpoint. add_totals totals added classification field json request? key (string) API key. display key, call sc_browse_preferences(). json_file Deprecated. Use json instead filename name example json file. server STATcube API server. Defaults external Server via \"ext\". options \"red\" editing server \"prod\" production server. External users always use default option \"ext\". table_uri Identifier saved table returned sc_table_saved_list()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a request against the /table endpoint — sc_table","text":"object class sc_table contains return value httr::POST() request obj$response. object also provides member functions parse response object. See sc_table_class class documentation.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a request against the /table endpoint — sc_table","text":"","code":"my_table <- sc_table(json = sc_example(\"population_timeseries.json\"))  # print my_table #> Population at the beginning of the quarter since 2002 #>  #> Database: debevstand (STATcube) #> Measures: Number of persons #> Fields: Quarter <90>, Age in single years <96> <7>, Sex <2> <3>, #>   Commune <2383> (Province-District) <10> #>  #> Request: [2024-10-10 10:49:07] #> STATcubeR: 1.0.0  # get matadata for the table my_table$meta #> $source #> # STATcubeR metadata: 1 x 6 #>   code       label                                               lang  #>   <chr>      <chr>                                               <chr> #> 1 debevstand Population at the beginning of the quarter since 2… en    #> # … with 3 more columns: 'label_de', 'label_en', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 8 #>   code     label               NAs #>   <chr>    <chr>             <int> #> 1 F-ISIS-1 Number of persons     0 #> # … with 5 more columns: 'fun', 'precision', 'annotations', 'label_de', 'label_en' #>  #> $fields #> # STATcubeR metadata: 4 x 7 #>   code       label                             total_code nitems type  #>   <chr>      <chr>                             <chr>       <int> <chr> #> 1 C-A10-0    Quarter                           SC_TOTAL       90 Time… #> 2 C-BESC51-0 Age in single years <96>          SC_TOTAL        7 Cate… #> 3 C-BESC11-0 Sex <2>                           SC_TOTAL        3 Cate… #> 4 C-C41-2    Commune <2383> (Province-Distric… SC_TOTAL       10 Cate… #> # … with 2 more columns: 'label_de', 'label_en' #>   # get a data.frame as.data.frame(my_table) #> # A STATcubeR tibble: 18,900 x 5 #>    Quarter    Age in single years <…¹ `Sex <2>` Commune <2383> (Prov…² #>    <date>     <fct>                   <fct>     <fct>                  #>  1 2002-01-01 Up to 14 years old      male      Burgenland <AT11>      #>  2 2002-01-01 Up to 14 years old      male      Carinthia <AT21>       #>  3 2002-01-01 Up to 14 years old      male      Vienna <AT13>          #>  4 2002-01-01 Up to 14 years old      male      Vorarlberg <AT34>      #>  5 2002-01-01 Up to 14 years old      male      Tyrol <AT33>           #>  6 2002-01-01 Up to 14 years old      male      Styria <AT22>          #>  7 2002-01-01 Up to 14 years old      male      Salzburg <AT32>        #>  8 2002-01-01 Up to 14 years old      male      Upper Austria <AT31>   #>  9 2002-01-01 Up to 14 years old      male      Lower Austria <AT12>   #> 10 2002-01-01 Up to 14 years old      male      Total                  #> # ℹ 18,890 more rows #> # ℹ abbreviated names: ¹​`Age in single years <96>`, #> #   ²​`Commune <2383> (Province-District)` #> # ℹ 1 more variable: `Number of persons` <dbl>  # get metadata for field 2 my_table$field(2) #> # STATcubeR metadata: 7 x 7 #>   code     label              parsed             #>   <chr>    <chr>              <chr>              #> 1 BESN07-1 Up to 14 years old Up to 14 years old #> 2 BESN07-2 15 to 29 years old 15 to 29 years old #> 3 BESN07-3 30 to 44 years old 30 to 44 years old #> 4 BESN07-4 45 to 59 years old 45 to 59 years old #> 5 BESN07-5 60 to 74 years old 60 to 74 years old #> 6 BESN07-6 75 plus years old  75 plus years old  #> 7 SC_TOTAL Total              Total              #> # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order'   # get the ids and labels of all saved tables (saved_tables <- sc_table_saved_list()) #> # A data frame: 2 × 2 #>   label              id                                             #>   <chr>              <chr>                                          #> 1 meineErsteTabelle  str:table:16f39429-8a1b-4593-a129-d5c646368f0f #> 2 meineZweiteTabelle str:table:e4e1b473-32c4-42b4-a67d-18169af557cc table_uri <- saved_tables$id[1]  # get a table based on one of these ids my_response <- sc_table_saved(table_uri) as.data.frame(my_response) #> # A STATcubeR tibble: 9 x 4 #>   `Fruit variety` `Commune [partly ABO]` `Number of holdings` #>   <fct>           <fct>                                 <dbl> #> 1 Apples          Burgenland <AT11>                       111 #> 2 Apples          Carinthia <AT21>                         31 #> 3 Apples          Lower Austria <AT12>                    439 #> 4 Apples          Upper Austria <AT31>                    108 #> 5 Apples          Salzburg <AT32>                           2 #> 6 Apples          Styria <AT22>                          1116 #> 7 Apples          Tyrol <AT33>                             88 #> 8 Apples          Vorarlberg <AT34>                        31 #> 9 Apples          Vienna <AT13>                             6 #> # ℹ 1 more variable: `Area in ha` <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for /table responses — sc_table_class","title":"Class for /table responses — sc_table_class","text":"R6 Class responses /table endpoint STATcube REST API.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for /table responses — sc_table_class","text":"STATcubeR::sc_data -> sc_table","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for /table responses — sc_table_class","text":"response httr response raw raw response content annotation_legend list annotations occurring data data.frame two columns annotation keys annotation labels. rate_limit much requests left POST request table sent? Uses format sc_rate_limit_table(). json object class sc_json based json file used request","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for /table responses — sc_table_class","text":"STATcubeR::sc_data$field() STATcubeR::sc_data$total_codes()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for /table responses — sc_table_class","text":"sc_table_class$new() sc_table_class$update() sc_table_class$tabulate() sc_table_class$browse() sc_table_class$add_language()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for /table responses — sc_table_class","text":"Usually, objects class sc_table generated one factory methods sc_table(), sc_table_saved() sc_table_custom(). constructor invoked directly, either omit parameters json file make sure match response.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$new(response, json = NULL, file = NULL, add_totals = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"response response httr::POST() /table endpoint. json json file used request string. file file path json file add_totals json request modified adding totals via add_totals parameter one factory functions (sc_table(), sc_table_custom()). Necessary, order also request totals via $add_language() method.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Class for /table responses — sc_table_class","text":"Update data re-sending json API. still experimental break object case new levels added one fields. example, new entry added timeseries","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$update()"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"method-tabulate-","dir":"Reference","previous_headings":"","what":"Method tabulate()","title":"Class for /table responses — sc_table_class","text":"extension sc_tabulate() additional parameters.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$tabulate(   ...,   round = FALSE,   annotations = FALSE,   recode_zeros = FALSE )"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"... Parameters passed sc_tabulate() round apply rounding measure according precision provided API. annotations Include separate annotation columns returned table. parameter currently broken needs re-implemented recode_zeros interpret zero values missings?","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"method-browse-","dir":"Reference","previous_headings":"","what":"Method browse()","title":"Class for /table responses — sc_table_class","text":"open dataset browser","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$browse()"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"method-add-language-","dir":"Reference","previous_headings":"","what":"Method add_language()","title":"Class for /table responses — sc_table_class","text":"add second language dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$add_language(language = NULL, key = NULL)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"language language add. \"en\" \"de\". key API key","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom tables — sc_table_custom","title":"Create custom tables — sc_table_custom","text":"Define requests /table endpoint providing URIs databases, measures fields. URIs can obtained using sc_schema_db(). See Custom tables article details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom tables — sc_table_custom","text":"","code":"sc_table_custom(   db,   measures = c(),   dimensions = c(),   language = c(\"en\", \"de\"),   add_totals = TRUE,   key = NULL,   recodes = NULL,   dry_run = FALSE )  sc_recode(field, map = NULL, total = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create custom tables — sc_table_custom","text":"db uid database. Must type DATASET measures character vector uids measures. entry must type MEASURE, STAT_FUNCTION COUNT. dimensions character vector dimensions cube. Can either type FIELD type VALUESET. entries referred fields parsed API response language language used labeling. \"en\" (default) use English. \"de\" uses German. add_totals totals added classification field json request? Ignored recodes used. key (string) API key. display key, call sc_browse_preferences(). recodes One recodes generated via sc_recode(). one recode supplied, recodes concatenated c(). dry_run TRUE, request sent API. Instead, type checks performed json request returned string. Defaults FALSE. field uid classification field recoded. provided uid also passed dimensions parameter sc_table_custom(). map list ids values (type VALUE) can also nested list items grouped. See examples total Add totals field? map provided, totals correspond filtered data.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create custom tables — sc_table_custom","text":"sc_recode(): creates recode object can used recode parameter sc_table_custom()","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"schema-objects-in-parameters","dir":"Reference","previous_headings":"","what":"Schema objects in parameters","title":"Create custom tables — sc_table_custom","text":"possible pass sc_schema objects (usually generated sc_schema_db()) instead ids sc_table_custom() sc_recode(). provided, schema objects converted ids via $id.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Create custom tables — sc_table_custom","text":"Unfortunately, API gives fairly vague error messages case custom table request ill defined. reason, sc_table_custom() applies simple heuristics throws warnings inconsistencies provided parameters recognized. following conditions currently checked parameter db type DATABASE entries measures type MEASURE, COUNT STATFN entries dimensions type VALUESET FIELD entries field type VALUESET FIELD entries map type VALUE fields recodes also present dimensions first two arguments sc_recode() consistent, .e. provided VALUEs belong VALUESET/FIELD","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_table_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create custom tables — sc_table_custom","text":"","code":"sc_table_custom(\"str:database:detouextregsai\") #> Accomodation statistics as of 1974 according to seasons #>  #> Database: detouextregsai (STATcube) #> Measures: Nights spent #> Fields: Season/Tourism Month <2> #>  #> Request: [2024-10-10 10:49:17] #> STATcubeR: 1.0.0  sc_table_custom(   \"str:database:detouextregsai\",   dimensions = \"str:field:detouextregsai:F-DATA1:C-SDB_TIT-0\" ) #> Accomodation statistics as of 1974 according to seasons #>  #> Database: detouextregsai (STATcube) #> Measures: Nights spent #> Fields: Season/Tourism Month <51> #>  #> Request: [2024-10-10 10:49:22] #> STATcubeR: 1.0.0  sc_table_custom(   db = \"str:database:detouextregsai\",   measures = c(     \"str:statfn:detouextregsai:F-DATA1:F-ANK:SUM\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ),   dimensions = c(     \"str:field:detouextregsai:F-DATA1:C-SDB_TIT-0\",     \"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93SUM-0\"   ) ) #> Accomodation statistics as of 1974 according to seasons #>  #> Database: detouextregsai (STATcube) #> Measures: Arrivals, Nights spent #> Fields: Season/Tourism Month <51>, Country of origin <4> #>  #> Request: [2024-10-10 10:49:33] #> STATcubeR: 1.0.0  schema <- sc_schema_db(\"detouextregsai\") region <- schema$`Other Classifications`$`Tourism commune [ABO]`$   `Regionale Gliederung (Ebene +1)` month <- schema$`Mandatory fields`$`Season/Tourism Month`  x <- sc_table_custom(   schema,   schema$Facts$Arrivals,   list(month, region),   recodes = c(     sc_recode(region, total = FALSE, map = list(       region$Achensee,       list(region$Arlberg, region$`Ausseerland-Salzkammergut`)     )),     sc_recode(month, total = FALSE)   ) ) x$tabulate() #> # A STATcubeR tibble: 100 x 3 #>    `Season/Tourism Month` `Tourism commune [ABO]`           Arrivals #>    <date>                 <fct>                                <dbl> #>  1 2000-01-01             Achensee                             90947 #>  2 2000-01-01             Arlberg;Ausseerland-Salzkammergut   209356 #>  3 2000-06-01             Achensee                            133523 #>  4 2000-06-01             Arlberg;Ausseerland-Salzkammergut   109769 #>  5 2001-01-01             Achensee                             93178 #>  6 2001-01-01             Arlberg;Ausseerland-Salzkammergut   199256 #>  7 2001-06-01             Achensee                            137138 #>  8 2001-06-01             Arlberg;Ausseerland-Salzkammergut   112685 #>  9 2002-01-01             Achensee                            100464 #> 10 2002-01-01             Arlberg;Ausseerland-Salzkammergut   212284 #> # ℹ 90 more rows"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_tabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn sc_data objects into tidy data frames — sc_tabulate","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"sc_tabulate() extracts data table turns tidy data.frame. applies labeling data transforms time variables Date format satisfy certain STATcube Standards. sc_tabulate(table, ...) just alias table$tabulate(...) added rather complicated method can separate documentation page. recommended use table$tabulate() syntax ... argument decides measures /fields included output. measures given, measures included. true fields.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_tabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"","code":"sc_tabulate(   table,   ...,   .list = NULL,   raw = FALSE,   parse_time = TRUE,   recode_zeros = inherits(table, \"sc_table\"),   language = NULL,   sort = FALSE )"},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_tabulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"table object class sc_data ... Names measures /fields .list allows define arguments ... character vector. raw FALSE (default), apply labeling dataset. Otherwise, return codes. parse_time time variables converted Date format? Ignored raw set TRUE. recode_zeros turn zero values NAs language language used labeling. default, dataset language (table$language) used. sort TRUE, resulting data sorted provided field values","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_tabulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"Aggregation done follows First, columns provide total code via table$total_codes() used filter column == total_code column != total_code , remaining data aggregated using rowsum() ellipsis (...) supports partial matching codes labels. See Examples objects class sc_table two additional operations performed. zeros recoded NAs rounding done according precision measure. Rounding happens recoding NA values","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/reference/sc_tabulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"","code":"############################ OGD Data #######################################  table <- od_table(\"OGD_veste309_Veste309_1\")  # no arguments -> same output as `table$data` table$tabulate() #> # A STATcubeR tibble: 72 x 9 #>    Sex       Citizenship `Region (NUTS2)`   `Form of employment`       #>  * <fct>     <fct>       <fct>              <fct>                      #>  1 Sum total Total       Total              \"Total\"                    #>  2 Sum total Total       Total              \"Standard employment \"     #>  3 Sum total Total       Total              \"Non-standard employment … #>  4 Sum total Total       Total              \"Non-standard employment:… #>  5 Sum total Total       Total              \"Non-standard employment:… #>  6 Sum total Total       Total              \"Non-standard employment:… #>  7 Sum total Total       Total              \"Non-standard employment:… #>  8 Sum total Total       AT11 Burgenland    \"Total\"                    #>  9 Sum total Total       AT12 Lower Austria \"Total\"                    #> 10 Sum total Total       AT13 Vienna        \"Total\"                    #> # ℹ 62 more rows #> # ℹ 5 more variables: `Arithmetic mean` <dbl>, `1st quartile` <dbl>, #> #   `2nd quartile (median)` <dbl>, `3rd quartile` <dbl>, #> #   `Number of employees` <dbl>  # provide some fields -> aggregate to keep only these fields table$tabulate(\"Sex\", \"Citizenship\") #> # A STATcubeR tibble: 27 x 7 #>    Sex       Citizenship              `Arithmetic mean` `1st quartile` #>  * <fct>     <fct>                                <dbl>          <dbl> #>  1 Sum total \"Total\"                              266.          181.   #>  2 Sum total \"Austrian\"                            18.5          12.4  #>  3 Sum total \"Non-Austrian \"                       14.4           9.72 #>  4 Sum total \"EU-28/EWR/Switzerland …              15.2          10.0  #>  5 Sum total \"EU-15/EWR before 2004/…              19.6          11.9  #>  6 Sum total \"EU-13 EU Member States…              13.0           9.59 #>  7 Sum total \"Former Yugoslavia (wit…              12.8           9.58 #>  8 Sum total \"Turkey\"                              12.2           9.35 #>  9 Sum total \"Other\"                               13.8           9.07 #> 10 Male      \"Total\"                              290.          195.   #> # ℹ 17 more rows #> # ℹ 3 more variables: `2nd quartile (median)` <dbl>, #> #   `3rd quartile` <dbl>, `Number of employees` <dbl>  # provide some measures -> drop all other measures from the output table$tabulate(\"Arithmetic mean\") #> # A STATcubeR tibble: 72 x 5 #>    Sex       Citizenship `Region (NUTS2)`   `Form of employment`       #>  * <fct>     <fct>       <fct>              <fct>                      #>  1 Sum total Total       Total              \"Total\"                    #>  2 Sum total Total       Total              \"Standard employment \"     #>  3 Sum total Total       Total              \"Non-standard employment … #>  4 Sum total Total       Total              \"Non-standard employment:… #>  5 Sum total Total       Total              \"Non-standard employment:… #>  6 Sum total Total       Total              \"Non-standard employment:… #>  7 Sum total Total       Total              \"Non-standard employment:… #>  8 Sum total Total       AT11 Burgenland    \"Total\"                    #>  9 Sum total Total       AT12 Lower Austria \"Total\"                    #> 10 Sum total Total       AT13 Vienna        \"Total\"                    #> # ℹ 62 more rows #> # ℹ 1 more variable: `Arithmetic mean` <dbl>  # mixture of measures and fields  -> keep exactly those columns table$tabulate(\"Sex\", \"Arithmetic mean\") #> # A STATcubeR tibble: 3 x 2 #>   Sex       `Arithmetic mean` #> * <fct>                 <dbl> #> 1 Sum total              385. #> 2 Male                   418. #> 3 Female                 342.  ## define total codes table$total_codes(   `C-A11-0` = \"A11-1\",   `C-STAATS-0` = \"STAATS-9\",   `C-VEBDL-0` = \"VEBDL-10\",   `C-BESCHV-0` = \"BESCHV-1\" )  ## alternatively, use partial matching to define totals table$total_codes(   Sex = \"Sum total\",   Citizenship = \"Total\",   Region = \"Total\",   `Form of employment` = \"Total\" )  # filter for totals in `Region (NUTS2)` and `Form of employment`. Drop totals # in `Sex` and `Citizenship`. table$tabulate(\"Sex\", \"Citizenship\") #> # A STATcubeR tibble: 16 x 7 #>    Sex    Citizenship                 `Arithmetic mean` `1st quartile` #>  * <fct>  <fct>                                   <dbl>          <dbl> #>  1 Male   \"Austrian\"                               20.4          13.8  #>  2 Male   \"Non-Austrian \"                          15.3          10.6  #>  3 Male   \"EU-28/EWR/Switzerland (wi…              16.0          10.9  #>  4 Male   \"EU-15/EWR before 2004/Swi…              21.2          12.6  #>  5 Male   \"EU-13 EU Member States af…              13.6          10.3  #>  6 Male   \"Former Yugoslavia (withou…              14.1          11.2  #>  7 Male   \"Turkey\"                                 13.3          10.4  #>  8 Male   \"Other\"                                  14.0           9.07 #>  9 Female \"Austrian\"                               15.9          11.1  #> 10 Female \"Non-Austrian \"                          13.0           9.19 #> 11 Female \"EU-28/EWR/Switzerland (wi…              13.7           9.38 #> 12 Female \"EU-15/EWR before 2004/Swi…              17.1          11.0  #> 13 Female \"EU-13 EU Member States af…              12.1           9.06 #> 14 Female \"Former Yugoslavia (withou…              10.9           9    #> 15 Female \"Turkey\"                                 10.3           8.68 #> 16 Female \"Other\"                                  13.3           9.07 #> # ℹ 3 more variables: `2nd quartile (median)` <dbl>, #> #   `3rd quartile` <dbl>, `Number of employees` <dbl>  ## switch language table$language <- \"de\"  ## `...` matches for codes and labels table$tabulate(\"C-A11-0\", \"Staats\", \"2. Quartil (Median)\") #> # A STATcubeR tibble: 16 x 3 #>    Geschlecht Staatsangehörigkeit                `2. Quartil (Median)` #>  * <fct>      <fct>                                              <dbl> #>  1 männlich   \"Österreich\"                                       17.4  #>  2 männlich   \"Nicht-Österreich\"                                 13.2  #>  3 männlich   \"EU-28/EWR/Schweiz (ohne Österrei…                 13.5  #>  4 männlich   \"EU-15/EWR vor 2004/Schweiz \"                      16.7  #>  5 männlich   \"EU-13 Beitrittsstaaten ab 2004\"                   12.7  #>  6 männlich   \"ehemaliges Jugoslawien (außerhal…                 13.6  #>  7 männlich   \"Türkei\"                                           12.8  #>  8 männlich   \"Andere\"                                           11.2  #>  9 weiblich   \"Österreich\"                                       14.0  #> 10 weiblich   \"Nicht-Österreich\"                                 10.6  #> 11 weiblich   \"EU-28/EWR/Schweiz (ohne Österrei…                 11.3  #> 12 weiblich   \"EU-15/EWR vor 2004/Schweiz \"                      14.7  #> 13 weiblich   \"EU-13 Beitrittsstaaten ab 2004\"                   10.3  #> 14 weiblich   \"ehemaliges Jugoslawien (außerhal…                  9.78 #> 15 weiblich   \"Türkei\"                                            9.51 #> 16 weiblich   \"Andere\"                                           10.6   ## Keep totals in the output by removing total codes table$tabulate(\"C-A11-0\")      # -> 2 rows: \"male\" \"female\" #> # A STATcubeR tibble: 2 x 6 #>   Geschlecht Arithmetisches Mitte…¹ `1. Quartil` `2. Quartil (Median)` #> * <fct>                       <dbl>        <dbl>                 <dbl> #> 1 männlich                     19.2         12.8                  16.3 #> 2 weiblich                     15.3         10.4                  13.4 #> # ℹ abbreviated name: ¹​`Arithmetisches Mittel` #> # ℹ 2 more variables: `3. Quartil` <dbl>, #> #   `Zahl d unselbst Beschäftigten` <dbl> table$total_codes(`C-A11-0` = NA) table$tabulate(\"C-A11-0\")      # -> 3 rows: \"total\", \"male\", \"female\" #> # A STATcubeR tibble: 3 x 6 #>   Geschlecht Arithmetisches Mitte…¹ `1. Quartil` `2. Quartil (Median)` #> * <fct>                       <dbl>        <dbl>                 <dbl> #> 1 insgesamt                    17.6         11.6                  15.1 #> 2 männlich                     19.2         12.8                  16.3 #> 3 weiblich                     15.3         10.4                  13.4 #> # ℹ abbreviated name: ¹​`Arithmetisches Mittel` #> # ℹ 2 more variables: `3. Quartil` <dbl>, #> #   `Zahl d unselbst Beschäftigten` <dbl>  ## table$tabulate(...) is an alias for sc_tabulate(table, ...) sc_tabulate(table, \"C-A11-0\") #> # A STATcubeR tibble: 3 x 6 #>   Geschlecht Arithmetisches Mitte…¹ `1. Quartil` `2. Quartil (Median)` #> * <fct>                       <dbl>        <dbl>                 <dbl> #> 1 insgesamt                    17.6         11.6                  15.1 #> 2 männlich                     19.2         12.8                  16.3 #> 3 weiblich                     15.3         10.4                  13.4 #> # ℹ abbreviated name: ¹​`Arithmetisches Mittel` #> # ℹ 2 more variables: `3. Quartil` <dbl>, #> #   `Zahl d unselbst Beschäftigten` <dbl>  ######################### STATcube REST API #################################  table_tourism <- sc_table(sc_example(\"accomodation.json\"), \"de\")  table_tourism$tabulate() #> # A STATcubeR tibble: 2,682 x 5 #>    `Saison/Tourismusmonat` Herkunftsland Beherbergungsbetrieb      #>  * <date>                  <fct>         <fct>                     #>  1 1999-11-01              Österreich    Hotels gesamt             #>  2 1999-11-01              Österreich    Ferienwohnungen insgesamt #>  3 1999-11-01              Österreich    Sonstige                  #>  4 1999-11-01              Deutschland   Hotels gesamt             #>  5 1999-11-01              Deutschland   Ferienwohnungen insgesamt #>  6 1999-11-01              Deutschland   Sonstige                  #>  7 1999-11-01              andere Länder Hotels gesamt             #>  8 1999-11-01              andere Länder Ferienwohnungen insgesamt #>  9 1999-11-01              andere Länder Sonstige                  #> 10 1999-12-01              Österreich    Hotels gesamt             #> # ℹ 2,672 more rows #> # ℹ 2 more variables: Übernachtungen <dbl>, Ankünfte <dbl> table_tourism$tabulate(\"Saison/Tourismusmonat\") #> # A STATcubeR tibble: 298 x 3 #>    `Saison/Tourismusmonat` Übernachtungen Ankünfte #>  * <date>                           <dbl>    <dbl> #>  1 1999-11-01                     2646717   961334 #>  2 1999-12-01                     7373034  1771530 #>  3 2000-01-01                    12437812  2462258 #>  4 2000-02-01                    13480000  2532404 #>  5 2000-03-01                    11340174  2273436 #>  6 2000-04-01                     6138146  1666777 #>  7 2000-05-01                     5150347  1673232 #>  8 2000-06-01                     8908931  2438518 #>  9 2000-07-01                    14618147  3118576 #> 10 2000-08-01                    16498662  3248084 #> # ℹ 288 more rows table_tourism$tabulate(\"Saison/Tourismusmonat\", \"Ankünfte\") #> # A STATcubeR tibble: 298 x 2 #>    `Saison/Tourismusmonat` Ankünfte #>  * <date>                     <dbl> #>  1 1999-11-01                961334 #>  2 1999-12-01               1771530 #>  3 2000-01-01               2462258 #>  4 2000-02-01               2532404 #>  5 2000-03-01               2273436 #>  6 2000-04-01               1666777 #>  7 2000-05-01               1673232 #>  8 2000-06-01               2438518 #>  9 2000-07-01               3118576 #> 10 2000-08-01               3248084 #> # ℹ 288 more rows table_tourism$tabulate(\"Ankünfte\") #> # A STATcubeR tibble: 2,682 x 4 #>    `Saison/Tourismusmonat` Herkunftsland Beherbergungsbetrieb Ankünfte #>  * <date>                  <fct>         <fct>                   <dbl> #>  1 1999-11-01              Österreich    Hotels gesamt          371215 #>  2 1999-11-01              Österreich    Ferienwohnungen ins…     5365 #>  3 1999-11-01              Österreich    Sonstige                67272 #>  4 1999-11-01              Deutschland   Hotels gesamt          223856 #>  5 1999-11-01              Deutschland   Ferienwohnungen ins…    13095 #>  6 1999-11-01              Deutschland   Sonstige                24262 #>  7 1999-11-01              andere Länder Hotels gesamt          235343 #>  8 1999-11-01              andere Länder Ferienwohnungen ins…     6493 #>  9 1999-11-01              andere Länder Sonstige                14433 #> 10 1999-12-01              Österreich    Hotels gesamt          346040 #> # ℹ 2,672 more rows  ## TODO: param annotations does not work currently if (FALSE) {   table_trade <- sc_table(sc_example(\"foreign_trade.json\"), \"de\")   tt <- sc_tabulate(table_trade, \"Berichtsjahr\", \"Import, Wert in Euro\",                     annotations = TRUE)   tt   str(tt[['Import, Wert in Euro_a']]) }"},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from SDMX — sdmx_table","title":"Import data from SDMX — sdmx_table","text":"Function reads STATcube data sdmx archive - zip file consisting structure.xml metadata dataset.xml values.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from SDMX — sdmx_table","text":"","code":"sdmx_table(file)"},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from SDMX — sdmx_table","text":"file \"sdmx archive\" file downloaded STATcube.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from SDMX — sdmx_table","text":"object class sc_data","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import data from SDMX — sdmx_table","text":"sdmx_table() treated experimental now.","code":""},{"path":"https://statistikat.github.io/STATcubeR/reference/sdmx_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from SDMX — sdmx_table","text":"","code":"x <- sdmx_table(system.file(\"sdmx/dedemo.zip\", package = \"STATcubeR\")) # print and tabulate x #> Communes (Demo) #>  #> Database: dedemo #> Measures: Ordinary expenditures, Ordinary revenues #> Fields: Time, Einwohnerstufen, Bundesland (NUTS 2-Einheit) #>  #> Downloaded: [2023-04-12 11:04:09] #> STATcubeR: 1.0.0 x$tabulate() #> # A STATcubeR tibble: 16 x 5 #>    Time  Einwohnerstufen Bundesland (NUTS 2-E…¹ Ordinary expenditure…² #>    <fct> <fct>           <fct>                                   <dbl> #>  1 2016  bis 2 500 Einw… Burgenland <AT11>                      324021 #>  2 2016  bis 2 500 Einw… Carinthia <AT21>                       241691 #>  3 2016  bis 2 500 Einw… Eisenstadt urban area…                      0 #>  4 2016  bis 2 500 Einw… Rust urban area <102>                    5007 #>  5 2016  2 501 bis 5 00… Burgenland <AT11>                      128217 #>  6 2016  2 501 bis 5 00… Carinthia <AT21>                       185109 #>  7 2016  2 501 bis 5 00… Eisenstadt urban area…                      0 #>  8 2016  2 501 bis 5 00… Rust urban area <102>                       0 #>  9 2017  bis 2 500 Einw… Burgenland <AT11>                      301689 #> 10 2017  bis 2 500 Einw… Carinthia <AT21>                       246970 #> 11 2017  bis 2 500 Einw… Eisenstadt urban area…                      0 #> 12 2017  bis 2 500 Einw… Rust urban area <102>                    5321 #> 13 2017  2 501 bis 5 00… Burgenland <AT11>                      117864 #> 14 2017  2 501 bis 5 00… Carinthia <AT21>                       192845 #> 15 2017  2 501 bis 5 00… Eisenstadt urban area…                      0 #> 16 2017  2 501 bis 5 00… Rust urban area <102>                       0 #> # ℹ abbreviated names: ¹​`Bundesland (NUTS 2-Einheit)`, #> #   ²​`Ordinary expenditures` #> # ℹ 1 more variable: `Ordinary revenues` <dbl> # explore hierarchies nuts2 <- x$field(\"C-B00-0\") data.frame(label = nuts2$label,   parent = nuts2$label[match(nuts2$parent, nuts2$code)]) #>                         label            parent #> 1           Burgenland <AT11>              <NA> #> 2            Carinthia <AT21>              <NA> #> 3 Eisenstadt urban area <101> Burgenland <AT11> #> 4       Rust urban area <102> Burgenland <AT11> # extract more data from the raw xml xml2::xml_find_first(x$xml$meta, \".//Name\") #> {xml_node} #> <Name lang=\"de\">"},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-052","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.5.2","title":"STATcubeR 0.5.2","text":"Add filters recodes sc_table_custom() (#33) Add global option STATcubeR.language override default language od_table(): Add descriptions x$header x$field() Depend cli >= 3.4.1 (@matmo, #35) Allow json strings sc_table() (@matmo, #36) add sdmx_table() import sdmx archives (.zip)","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-050","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.5.0","title":"STATcubeR 0.5.0","text":"adapt od_list() data.statistik.update (2249b66) Update print methods cli package #31","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-043","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.4.3","title":"STATcubeR 0.4.3","text":"add od_revisions() check updates OGD server add od_catalogue() combine multiple jsons metadata files single catalogue table","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-042","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.4.2","title":"STATcubeR 0.4.2","text":"add sc_browse_catalogue(), sc_browse_database() sc_browse_table() update vignette(\"sc_schema\") add vignette(\"sc_last_error\")","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-041","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.4.1","title":"STATcubeR 0.4.1","text":"adapt od_list() data.statistik.update (ea59c71) extend support rate limits update vignette(\"sc_info\")","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-040","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.4.0","title":"STATcubeR 0.4.0","text":"Documentation updates Document export caching API responses (#23) Update URLs API release (#29) Add support multiple API servers (#25) Automatically add totals OGD datasets (#28) Use rappdirs::user_cache_dir() determine default value caching. Set continuous integration via github actions","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-030","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.3.0","title":"STATcubeR 0.3.0","text":"Allow recodes sc_data objects (#17) Better parsing time variables (#15, #16) Use bootstrap 5 pkgdown 2.0.0 website Allow export import open data using tar archives (#20)","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-024","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.4","title":"STATcubeR 0.2.4","text":"add user-agent according vignette(\"api-packages\", \"httr\") check content types http status consistently document error handling ?sc_last_error new export: sc_last_error()","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-023","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.3","title":"STATcubeR 0.2.3","text":"Almost changes 0.2.2 0.2.3 included #13 cleanup function names faster parsing sc_table() remove dependencies rmarkdown rstudioapi improve caching REST API support sc_schema() sc_table_saved()","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"documentation-updates-0-2-3","dir":"Changelog","previous_headings":"","what":"Documentation updates","title":"STATcubeR 0.2.3","text":"refactor pkgdown articles including old articles REST API modify readme showcase OGD, API base class update reference documentation reference index","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-022","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.2","title":"STATcubeR 0.2.2","text":"version finalizes #11 Common base class OGD data data REST API Improved print methods tibble Direct documentation certain R6 classes roxygen2 remove unnecessary exports","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-021","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.1","title":"STATcubeR 0.2.1","text":"remove dependency openssl avoid EOL warnings reading JSON requests start using NEWS.md reorganize README.md put open data front center","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"open-data-0-2-1","dir":"Changelog","previous_headings":"","what":"Open Data","title":"STATcubeR 0.2.1","text":"STATcubeR now contains functions access open government data https://data.statistik.gv./ new class od_table get OGD data methods tabulate responses caching four new pkgdown articles od_table(), od_list(), od_resource() sc_data","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-020","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.0","title":"STATcubeR 0.2.0","text":"Update contents sc_example() Use Date instead POSIXct time variables Cache $meta $field memory class sc_table Add caching","code":""},{"path":"https://statistikat.github.io/STATcubeR/news/index.html","id":"statcuber-011","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.1.1","title":"STATcubeR 0.1.1","text":"Improve sc_example() Add sc_examples_list() get available examples add $browse() $edit() add language parameter sc_schema() pkgdown article custom tables (#6) update harmonize naming functions parameters","code":""}]
