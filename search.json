[{"path":"/LICENSE.html","id":"the-gnu-general-public-license-version-2-june-1991-gplv2","dir":"","previous_headings":"","what":"The GNU General Public License, Version 2, June 1991 (GPLv2)","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"Terms And Conditions For Copying, Distribution And Modification","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"No Warranty","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/articles/od_list.html","id":"interactive-overview","dir":"Articles","previous_headings":"","what":"Interactive overview","title":"Available Datasets","text":"Since metadata contained OGD JSON files available german, following overview uses german labels. Click individual table cells get information.","code":""},{"path":"/articles/od_list.html","id":"cli-usage","dir":"Articles","previous_headings":"","what":"CLI usage","title":"Available Datasets","text":"get simplified viersion summary, use od_list() function. uses webscraping techniques get dataset ids german labels based contents https://data.statistik.gv./web/catalog.jsp.","code":"all_datasets <- od_list() all_datasets # A data frame: 272 × 3    category    id                                         label                                                             <chr>       <chr>                                      <chr>                                                           1 Arbeit      OGD_konjunkturmonitor_KonMon_1             Konjunkturmonitor                                               2 Arbeit      OGD_veste309_Veste309_1                    Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR…  3 Arbeit      OGD_veste307_Veste307_1                    Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR…  4 Arbeit      OGD_veste305_Veste305_1                    Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR…  5 Arbeit      OGD_veste303_Veste203_1                    Verdienststrukturerhebung 2014 Bruttostundenverdienste in EUR…  6 Arbeit      OGD_aeapp_biber_abschl_ext_BIBER_ABSCHL_1  BibEr Monitoring 2020 - Bildungsabschlüsse nach Jahr, abgesch…  7 Arbeit      OGD_aest_erv_statw_haupt_ERV_STATWECHSEL_1 Erwerbsverläufe - Statuswechsel 2010 bis 2019 nach Arbeitsmar…  8 Bevölkerung OGD_rate_kalwo_GEST_KALWOCHE_STR_100       Altersstandardisierte Sterberate in Österreich (ohne Auslands…  9 Bevölkerung OGD_gest_kalwo_GEST_KALWOCHE_100           Gestorbene in Österreich (ohne Auslandssterbefälle) ab 2000 n… 10 Bevölkerung OGD_rate_kalwobez_GEST_KALWOCHE_STR_BZ_100 Altersstandardisierte Sterberate in Österreich (ohne Auslands… # … with 262 more rows"},{"path":"/articles/od_list.html","id":"overview-via-json","dir":"Articles","previous_headings":"","what":"Overview via json","title":"Available Datasets","text":"identify interesting dataset, consider downloading metadata json get details. json contains links metadata including link data.statistik.gv.. json can also used programatically get details ommited print() output.","code":"(id <- all_datasets$id[2]) ## [1] \"OGD_veste309_Veste309_1\" json <- od_json(id) json ## Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR nach Staatsangehörigkeit, Bundesland und ## Beschäftigungsverhältnis  ##  ## Verdienststruktur nach Geschlecht, Staatsangehörigkeit, Bundesland und Beschäftigungsverhältnis ##  ## Measures:   Arithmetisches Mittel, 1. Quartil, 2. Quartil (Median), 3. Quartil, Zahl d unselbst Beschäftigten  ## Fields:     Geschlecht, Staatsangehörigkeit, Bundesland (NUTS 2), Form des Beschäftigungsverhältnisses  ## Updated:    2021-03-24 11:32:41  ## Tags:       Staatsangehörigkeit, Bundesland, Beschäftigungsverhältnis  ## Categories: Arbeit, Bevölkerung  ##  ## http://data.statistik.gv.at/web/meta.jsp?dataset=OGD_veste309_Veste309_1 ## http://statcube.at/statcube/opendatabase?id=deveste309 ## http://www.statistik.at/web_de/dokumentationen/Soziales/index.html ## http://www.statistik.at/web_en/documentations/people_and_society/social_statistics/index.html json$extras$update_frequency ## [1] \"nicht geplant\""},{"path":"/articles/od_list.html","id":"showcase","dir":"Articles","previous_headings":"","what":"Showcase","title":"Available Datasets","text":"Population Hospitalizations Earnings Household forecast Gross regional product population dataset measures austrian population 2117 different regions. hospitalizations dataset timeseries 2009 2019 105 different medical procedures. structure earnings dataset showcases average earnings four different classifications. See tabulation article usage examples dataset. household forecast contains predictions number private households 4 household characteristics 2011 2080. GRP dataset contains GRP NUTS-3 regions 2000 2019.","code":"od_table(\"OGD_bevstandjbab2002_BevStand_2020\")$tabulate() # A STATcubeR tibble: 392,508 x 5    `Time section` Sex   `Commune (aggregation by political district)` `Age in single years` Number  * <date>         <fct> <fct>                                         <fct>                  <int>  1 2020-01-01     male  Eisenstadt <10101>                            under 1 year old          77  2 2020-01-01     male  Eisenstadt <10101>                            1 year old                75  3 2020-01-01     male  Eisenstadt <10101>                            2 years old               70  4 2020-01-01     male  Eisenstadt <10101>                            3 years old               83  5 2020-01-01     male  Eisenstadt <10101>                            4 years old               67  6 2020-01-01     male  Eisenstadt <10101>                            5 years old               56  7 2020-01-01     male  Eisenstadt <10101>                            6 years old               75  8 2020-01-01     male  Eisenstadt <10101>                            7 years old               73  9 2020-01-01     male  Eisenstadt <10101>                            8 years old               74 10 2020-01-01     male  Eisenstadt <10101>                            9 years old               86 # … with 392,498 more rows od_table(\"OGD_krankenbewegungen_ex_LEISTUNGEN_1\")$tabulate() # A STATcubeR tibble: 80,501 x 6    `Year of discharge` Sex   `Age (four classes)` `NUTS-2 region (pla… `Medical procedures - subchapte… `Medical proced…  * <date>              <fct> <fct>                <fct>                <fct>                                       <int>  1 2009-01-01          male  Up to 14 years old   Foreign countries    Brain skull and dura surgeries                 16  2 2009-01-01          male  Up to 14 years old   Foreign countries    Intracranial surgeries                         17  3 2009-01-01          male  Up to 14 years old   Foreign countries    Nervous system implantations                    2  4 2009-01-01          male  Up to 14 years old   Foreign countries    Spine surgeries                                 1  5 2009-01-01          male  Up to 14 years old   Foreign countries    Spinal cord surgeries                           2  6 2009-01-01          male  Up to 14 years old   Foreign countries    Surgery on peripheral nerves an…               12  7 2009-01-01          male  Up to 14 years old   Foreign countries    Other diagnostics and therapy -…               31  8 2009-01-01          male  Up to 14 years old   Foreign countries    Surgery on conjunctiva, eyelids…                7  9 2009-01-01          male  Up to 14 years old   Foreign countries    Surgery on cornea, iris and lens                7 10 2009-01-01          male  Up to 14 years old   Foreign countries    Surgery on vitreous body and re…               17 # … with 80,491 more rows od_table(\"OGD_veste309_Veste309_1\")$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                         `Arithmetic mea… `1st quartile`  * <fct>     <fct>       <fct>              <fct>                                                   <int>          <int>  1 Sum total Total       Total              \"Total\"                                                    18             12  2 Sum total Total       Total              \"Standard employment \"                                     19             13  3 Sum total Total       Total              \"Non-standard employment (total)\"                          15             10  4 Sum total Total       Total              \"Non-standard employment: part-time only\"                  16             11  5 Sum total Total       Total              \"Non-standard employment: fixed-term employ…               17             10  6 Sum total Total       Total              \"Non-standard employment: marginal part-tim…               12              9  7 Sum total Total       Total              \"Non-standard employment: temporary agency …               14             12  8 Sum total Total       AT11 Burgenland    \"Total\"                                                    16             11  9 Sum total Total       AT12 Lower Austria \"Total\"                                                    16             11 10 Sum total Total       AT13 Vienna        \"Total\"                                                    19             11 # … with 62 more rows, and 3 more variables: 2nd quartile (median) <int>, 3rd quartile <int>, Number of employees <int> od_table(\"OGD_f1741_HH_Proj_2\")$tabulate() # A STATcubeR tibble: 17,640 x 7    `Alter des Haushaltsv… Time       `Province (NUTS 2-Ein… `Type of household  <… `Sex of household… `Private househol…  * <fct>                  <date>     <fct>                  <fct>                  <fct>                           <int>  1 15 to 24 years old     2011-01-01 Burgenland <AT11>      One-person household   male                              540  2 15 to 24 years old     2011-01-01 Burgenland <AT11>      One-person household   female                            440  3 15 to 24 years old     2011-01-01 Burgenland <AT11>      Multi-person household male                              274  4 15 to 24 years old     2011-01-01 Burgenland <AT11>      Multi-person household female                            304  5 15 to 24 years old     2011-01-01 Carinthia <AT21>       One-person household   male                             2268  6 15 to 24 years old     2011-01-01 Carinthia <AT21>       One-person household   female                           2218  7 15 to 24 years old     2011-01-01 Carinthia <AT21>       Multi-person household male                              963  8 15 to 24 years old     2011-01-01 Carinthia <AT21>       Multi-person household female                            907  9 15 to 24 years old     2011-01-01 Lower Austria <AT12>   One-person household   male                             5437 10 15 to 24 years old     2011-01-01 Lower Austria <AT12>   One-person household   female                           5175 # … with 17,630 more rows, and 1 more variable: Annual average of private households <int> od_table(\"OGD_vgrrgr104_RGR104_1\")$tabulate() # A STATcubeR tibble: 964 x 6    Time       `NUTS-3`                        `Gross regional pr… `Gross regional p… `Gross regional … `Change in % to …  * <date>     <fct>                                         <dbl>              <dbl>             <dbl>             <dbl>  1 2000-01-01 Mittelburgenland <AT111>                        597              15700                 0                 0  2 2000-01-01 Nordburgenland <AT112>                         2641              19200                 0                 0  3 2000-01-01 Südburgenland <AT113>                          1559              15500                 0                 0  4 2000-01-01 Mostviertel-Eisenwurzen <AT121>                4778              20400                 0                 0  5 2000-01-01 Niederösterreich-Süd <AT122>                   4714              19000                 0                 0  6 2000-01-01 Sankt Pölten <AT123>                           3647              26000                 0                 0  7 2000-01-01 Waldviertel <AT124>                            3947              16700                 0                 0  8 2000-01-01 Weinviertel <AT125>                            1722              13300                 0                 0  9 2000-01-01 Wiener Umland-Nordteil <AT126>                 4841              18900                 0                 0 10 2000-01-01 Wiener Umland-Südteil <AT127>                  9886              33800                 0                 0 # … with 954 more rows"},{"path":"/articles/od_resources.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"File Management","text":"default, STATcubeR caches accessed resources data.statistik.gv.temporary directory current R session. Let’s examine example happens data structure earnings suvey (SES) requested. First STATcubeR grab json metadata dataset https://data.statistik.gv./ogd/json?dataset=OGD_veste309_Veste309_1 check resources belong . resource, attributes name last_modified extracted json. also included od_table object $resources. last_modified tells us resource changed fileserver. resource exist cache last modified entry json newer cached file, dowloaded server. Otherwise, cached version reused.","code":"od_cache_dir() ## [1] \"/tmp/RtmpDy4tGn/STATcubeR/open_data/\" earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$resources # A data frame: 7 × 6   name                                   last_modified       cached               size download parsed   <chr>                                  <dttm>              <dttm>              <dbl>    <dbl>  <dbl> 1 OGD_veste309_Veste309_1.json           2021-03-24 11:32:41 2021-09-17 15:37:04  4071    47.2  NA     2 OGD_veste309_Veste309_1.csv            2021-03-24 11:32:41 2021-09-17 15:37:04  3857     2.65  1.80  3 OGD_veste309_Veste309_1_HEADER.csv     2021-03-24 11:32:41 2021-09-17 15:37:04   516     1.48  9.48  4 OGD_veste309_Veste309_1_C-A11-0.csv    2021-03-24 11:32:41 2021-09-17 15:37:04   159     1.60  0.625 5 OGD_veste309_Veste309_1_C-STAATS-0.csv 2021-03-24 11:32:41 2021-09-17 15:37:04   697     1.73  4.85  6 OGD_veste309_Veste309_1_C-VEBDL-0.csv  2021-03-24 11:32:41 2021-09-17 15:37:04   518     1.53  0.558 7 OGD_veste309_Veste309_1_C-BESCHV-0.csv 2021-03-24 11:32:41 2021-09-17 15:37:04   641     1.52  0.584"},{"path":"/articles/od_resources.html","id":"access-and-updates","dir":"Articles","previous_headings":"","what":"Access and Updates","title":"File Management","text":"Cached files can acessed od_cache_file(). specified file exists cache, path file returned. Otherwise, file downloaded cache path returned. files use naming conventions open data fileserver. read files cache data.frames, use od_resource() parameters od_cache_file(). apply special parser dataset drops unneeded columns normalizes column names. parser behaves differently header files, data files fields. Json files can acessed od_json().","code":"od_cache_file(\"OGD_veste309_Veste309_1\") ## [1] \"/tmp/RtmpDy4tGn/STATcubeR/open_data/OGD_veste309_Veste309_1.csv\" od_cache_file(\"OGD_veste309_Veste309_1\", \"C-A11-0\") ## [1] \"/tmp/RtmpDy4tGn/STATcubeR/open_data/OGD_veste309_Veste309_1_C-A11-0.csv\" od_resource(\"OGD_veste309_Veste309_1\", \"C-A11-0\") # A data frame: 3 × 4   code  label label_de  label_en  * <chr> <chr> <chr>     <chr>     1 A11-1 NA    insgesamt Sum total 2 A11-2 NA    männlich  Male      3 A11-3 NA    weiblich  Female json <- od_json(\"OGD_veste309_Veste309_1\") unlist(json$tags) ## [1] \"Staatsangehörigkeit\"      \"Bundesland\"               \"Beschäftigungsverhältnis\""},{"path":"/articles/od_resources.html","id":"clearing-and-changing","dir":"Articles","previous_headings":"","what":"Clearing and Changing","title":"File Management","text":"od_cache_clear(id) can used clear cache files belonging passed dataset id. saw earnings$resources contains 7 rows, therefore 7 files deleted cleanup. want use persistent directory like ~/.cache/STATcubeR/open_data/ caching, directory can changed od_cache_dir(new).","code":"od_cache_clear(\"OGD_veste309_Veste309_1\") ## deleted 7 files from '/tmp/RtmpDy4tGn/STATcubeR/open_data/' od_cache_dir(\"~/.cache/STATcubeR/open_data/\")"},{"path":"/articles/od_resources.html","id":"the-resources-field","dir":"Articles","previous_headings":"","what":"The resources field","title":"File Management","text":"Let’s go back $resources field earnings. already looked name last_modified. remaining columns can interpreted follows cached tells us last time cache file resource modified. size file size bytes download contains amount milliseconds used retrieve resource last updated. parsed reports amount milliseconds took od_resource() convert file contents data.frame() format. json file, parsing time always reported NA.","code":"earnings$resources # A data frame: 7 × 6   name                                   last_modified       cached               size download parsed   <chr>                                  <dttm>              <dttm>              <dbl>    <dbl>  <dbl> 1 OGD_veste309_Veste309_1.json           2021-03-24 11:32:41 2021-09-17 15:37:04  4071    47.2  NA     2 OGD_veste309_Veste309_1.csv            2021-03-24 11:32:41 2021-09-17 15:37:04  3857     2.65  1.80  3 OGD_veste309_Veste309_1_HEADER.csv     2021-03-24 11:32:41 2021-09-17 15:37:04   516     1.48  9.48  4 OGD_veste309_Veste309_1_C-A11-0.csv    2021-03-24 11:32:41 2021-09-17 15:37:04   159     1.60  0.625 5 OGD_veste309_Veste309_1_C-STAATS-0.csv 2021-03-24 11:32:41 2021-09-17 15:37:04   697     1.73  4.85  6 OGD_veste309_Veste309_1_C-VEBDL-0.csv  2021-03-24 11:32:41 2021-09-17 15:37:04   518     1.53  0.558 7 OGD_veste309_Veste309_1_C-BESCHV-0.csv 2021-03-24 11:32:41 2021-09-17 15:37:04   641     1.52  0.584"},{"path":"/articles/od_resources.html","id":"whats-in-the-cache","dir":"Articles","previous_headings":"","what":"What’s in the cache?","title":"File Management","text":"od_cache_summary() give overview files available cache directory. returned table contains one row every dataset. column updated contains last modified date datasets json file. json, data header give file sizes bytes corresponding files. fields total size fields n_fields number classification files available. can get clear picture much disk space used dataset. Note od_cache_summary() gathers information local file system based filenames, file.mtime() file.size().","code":"od_cache_summary() # A data frame: 37 × 7    id                                         updated              json     data header fields n_fields    <chr>                                      <dttm>              <dbl>    <dbl>  <dbl>  <dbl>    <int>  1 OGD_aeapp_biber_abschl_ext_BIBER_ABSCHL_1  2021-08-26 16:17:19  5063    35682    429   1327        4  2 OGD_aest_erv_statw_haupt_ERV_STATWECHSEL_1 2021-08-27 13:47:59  6237    88258    476   1700        5  3 OGD_ake002q_AKEQ_1                         2021-09-07 12:57:32  2575     1122    115   3585        1  4 OGD_bevstandjbab2002_BevStand_2008         2021-08-26 16:29:35  3929 17779213    303 102908        4  5 OGD_bevstandjbab2002_BevStand_2012         2021-08-13 19:04:33  3929 17934370    303 102908        4  6 OGD_bevstandjbab2002_BevStand_2015         2021-08-13 19:04:45  3929 18048955    303 102908        4  7 OGD_bevstandjbab2002_BevStand_2020         2021-09-17 15:02:27  3930 18226893    303 102908        4  8 OGD_bevwan020_AUSSENWAND_100               2021-09-08 11:16:25  3756 10227834    441  15324        4  9 OGD_bevwan020_AUSSENWAND_201               2021-08-19 17:48:26  3876 29505360    544  99475        4 10 OGD_bevwan020_AUSSENWAND_300               2021-08-13 18:59:27  3903  3725683    483  10733        4 # … with 27 more rows"},{"path":"/articles/od_resources.html","id":"download-history","dir":"Articles","previous_headings":"","what":"Download history","title":"File Management","text":"get history files downloaded server, use od_downloads(). file, timestamp download recorded well download time milliseconds.","code":"od_downloads() # A data frame: 7 × 3   time                file                                   downloaded * <dttm>              <chr>                                       <dbl> 1 2021-09-17 15:37:04 OGD_veste309_Veste309_1_C-BESCHV-0.csv       1.52 2 2021-09-17 15:37:04 OGD_veste309_Veste309_1_C-VEBDL-0.csv        1.53 3 2021-09-17 15:37:04 OGD_veste309_Veste309_1_C-STAATS-0.csv       1.73 4 2021-09-17 15:37:04 OGD_veste309_Veste309_1_C-A11-0.csv          1.60 5 2021-09-17 15:37:04 OGD_veste309_Veste309_1_HEADER.csv           1.48 6 2021-09-17 15:37:04 OGD_veste309_Veste309_1.csv                  2.65 7 2021-09-17 15:37:04 OGD_veste309_Veste309_1.json                47.2"},{"path":"/articles/od_table.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Open Government Data","text":"import dataset, provide dataset id argument. returned object class od_table. provides overview dataset via print() method.","code":"table <- od_table(\"OGD_krebs_ext_KREBS_1\") table ## An object of class od_table ##  ## Dataset     Cancer statistics by reporting year, province of residence and localisation of cancer  ## Measures    Number of records F-KRE  ## Fields      Tumore ICD/10 3-Steller, Reporting year, Province of residence, Sex  ##  ## Request     2021-09-17 15:37:08  ## STATcubeR   0.2.8"},{"path":"/articles/od_table.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Open Government Data","text":"Information OGD_krebs_ext_KREBS_1_HEADER.csv can obtained via $header. Additional metadata can obtained via $meta. See STATcubeR data article details.","code":"table$header # STATcubeR metadata: 5 x 4   code               label label_de                    label_en                  <chr>              <chr> <chr>                       <chr>                   1 F-KRE              NA    Anzahl der Datensätze F-KRE Number of records F-KRE 2 C-TUM_ICD10_3ST-0  NA    Tumore ICD/10 3-Steller     NA                      3 C-BERJ-0           NA    Berichtsjahr                Reporting year          4 C-BUNDESLAND-0     NA    Bundesland                  Province of residence   5 C-KRE_GESCHLECHT-0 NA    Geschlecht                  Sex"},{"path":"/articles/od_table.html","id":"field-infos","dir":"Articles","previous_headings":"Metadata","what":"Field infos","title":"Open Government Data","text":"method table$field() can used get information specific fields. Thise contain data {dataset_id}_{field_code}.csv. Unlike metadata sc_table, od_table class always contains german english labels. can used label dataset. Tumor type Year Province Sex https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-TUM_ICD10_3ST-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-BERJ-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-BUNDESLAND-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-KRE_GESCHLECHT-0.csv","code":"table$field(\"C-TUM_ICD10_3ST-0\") # STATcubeR metadata: 94 x 7   code              label                                              parsed                                              <chr>             <chr>                                              <chr>                                             1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe               <C00> Bösartige Neubildung der Lippe              2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes       <C01> Bösartige Neubildung des Zungengrundes      3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht nä… <C02> Bösartige Neubildung sonstiger und nicht n… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches       <C03> Bösartige Neubildung des Zahnfleisches      5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens          <C04> Bösartige Neubildung des Mundbodens         # … with 89 more rows # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' table$field(\"C-BERJ-0\") # STATcubeR metadata: 36 x 7   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # … with 31 more rows # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' table$field(\"C-BUNDESLAND-0\") # STATcubeR metadata: 9 x 7   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      # … with 4 more rows # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' table$field(\"C-KRE_GESCHLECHT-0\") # STATcubeR metadata: 2 x 7   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order'"},{"path":"/articles/od_table.html","id":"table-contents","dir":"Articles","previous_headings":"","what":"Table Contents","title":"Open Government Data","text":"get actual microdata OGD_krebs_ext_KREBS_1.csv, use table$data. output similar returned read.csv2(\"OGD_krebs_ext_KREBS_1.csv\"). od_table() makes sure levels factor columns order metadata. want use labels rather codes, labelled version data can obtained via table$tabulate(). labelling done mapping codes english names using previsously mentioned metadata. Time variables converted <date> format satisfy certain STATcube standards. can read $tabulate() tabulation article.","code":"table$data # A STATcubeR tibble: 45,059 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # … with 45,054 more rows levels(table$data$`C-BUNDESLAND-0`) == table$field(\"C-BUNDESLAND-0\")$code ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE table$tabulate() # A STATcubeR tibble: 45,059 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of residence` Sex    `Number of records F-KRE` * <fct>                                <date>           <fct>                   <fct>                      <int> 1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"           male                           2 2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             male                           8 3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             female                         2 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         male                           6 5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         female                         2 # … with 45,054 more rows"},{"path":"/articles/od_table.html","id":"sauerkraut","dir":"Articles","previous_headings":"","what":"A Trip to Germany","title":"Open Government Data","text":"possible switch language used labelling dataset using $language field. field can used get set language. Allowed options \"en\" english \"de\" german. option affects print() method well output $data. english labels available, german labels used fallback mechanism.","code":"table$language ## [1] \"en\" table$language <- \"de\" table ## An object of class od_table ##  ## Dataset     Krebsstatistik  ## Measures    Anzahl der Datensätze F-KRE  ## Fields      Tumore ICD/10 3-Steller, Berichtsjahr, Bundesland, Geschlecht  ##  ## Request     2021-09-17 15:37:08  ## STATcubeR   0.2.8 table$tabulate() # A STATcubeR tibble: 45,059 x 5   `Tumore ICD/10 3-Steller`            Berichtsjahr Bundesland       Geschlecht `Anzahl der Datensätze F-KRE` * <fct>                                <date>       <fct>            <fct>                              <int> 1 <C00> Bösartige Neubildung der Lippe 1983-01-01   Burgenland       männlich                               2 2 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          männlich                               8 3 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          weiblich                               2 4 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich männlich                               6 5 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich weiblich                               2 # … with 45,054 more rows"},{"path":"/articles/od_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Open Government Data","text":"See available datasets article list datasets compatible od_table(). Open data datasets often contain large amount rows. Check tabulation article see can summarized compact form. STATcubeR caches files requested server hood. caching article explains caches stored.","code":""},{"path":"/articles/sc_data.html","id":"constructing-sc_data-objects","dir":"Articles","previous_headings":"","what":"Constructing sc_data objects","title":"The STATcubeR Data Class","text":"sc_data class exported STATcubeR. Therefore, objects class created one following functions od_table() obtains data OGD portal. See OGD article sc_table_saved() sc_table_custom() also use /table endpoint. However, request specified via ids rather json file. df_table() creates sc_data object based data.frame. function developed make STATcubeR data data frames interchangable internal project. illustrate, use one OGD datasets showcase functionalities class. Notice however, objects created sc_table() can used interchangibly.","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")"},{"path":"/articles/sc_data.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"The STATcubeR Data Class","text":"data table can extracted using active binding $data. Notice OGD_krebs_ext_KREBS_1 includes codes possibly totals. data always provided long format one column field one column measure. explained labeled data can obtained Tabulation section.","code":"x$data # A STATcubeR tibble: 45,059 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # … with 45,054 more rows"},{"path":"/articles/sc_data.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"The STATcubeR Data Class","text":"Metadata sc_data object includes labels information relevant correctly parse raw data. active binding $meta contains least entries $source, $measures $fields.","code":""},{"path":"/articles/sc_data.html","id":"source","dir":"Articles","previous_headings":"Metadata","what":"Source","title":"The STATcubeR Data Class","text":"source field contains information data source. important entries code label. bottom, see additional information source available, namely label_en, label_de, etc. metadata added derived class od_table part sc_table interface.","code":"x$meta$source # STATcubeR metadata: 1 x 7   code                  label                                                                                 lang    <chr>                 <chr>                                                                                 <chr> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, province of residence and localisation of cancer en    # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version'"},{"path":"/articles/sc_data.html","id":"measures","dir":"Articles","previous_headings":"Metadata","what":"Measures","title":"The STATcubeR Data Class","text":"part metadata data.frame one row measure. contains codes labels well number NAs found $data particular column.","code":"x$meta$measures # STATcubeR metadata: 1 x 5   code  label                     NAs   <chr> <chr>                   <int> 1 F-KRE Number of records F-KRE     0 # … with 2 more columns: 'label_de', 'label_en'"},{"path":"/articles/sc_data.html","id":"fields","dir":"Articles","previous_headings":"Metadata","what":"Fields","title":"The STATcubeR Data Class","text":"fields entry summarizes categorical variables. includes codes labels well total code registered particular field.","code":"x$meta$fields # STATcubeR metadata: 4 x 7   code               label                   total_code   <chr>              <chr>                   <chr>      1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA         2 C-BERJ-0           Reporting year          NA         3 C-BUNDESLAND-0     Province of residence   NA         4 C-KRE_GESCHLECHT-0 Sex                     NA         # … with 4 more columns: 'label_de', 'label_en', 'nitems', 'type'"},{"path":"/articles/sc_data.html","id":"field-information","dir":"Articles","previous_headings":"","what":"Field information","title":"The STATcubeR Data Class","text":"get info specific fields, use $field() method.","code":""},{"path":"/articles/sc_data.html","id":"section","dir":"Articles","previous_headings":"","what":"The STATcubeR Data Class","title":"The STATcubeR Data Class","text":"Tumor types Year Province Sex","code":"x$field(\"Tumore\") # STATcubeR metadata: 94 x 7   code              label                                              parsed                                              <chr>             <chr>                                              <chr>                                             1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe               <C00> Bösartige Neubildung der Lippe              2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes       <C01> Bösartige Neubildung des Zungengrundes      3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht nä… <C02> Bösartige Neubildung sonstiger und nicht n… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches       <C03> Bösartige Neubildung des Zahnfleisches      5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens          <C04> Bösartige Neubildung des Mundbodens         # … with 89 more rows # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' x$field(\"Reporting year\") # STATcubeR metadata: 36 x 7   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # … with 31 more rows # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' x$field(\"Province\") # STATcubeR metadata: 9 x 7   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      6 BUNDESLAND-6 \"Styria\"        \"Styria\"        7 BUNDESLAND-7 \"Tyrol\"         \"Tyrol\"         8 BUNDESLAND-8 \"Vorarlberg\"    \"Vorarlberg\"    9 BUNDESLAND-9 \"Vienna\"        \"Vienna\"        # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' x$field(\"Sex\") # STATcubeR metadata: 2 x 7   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order'"},{"path":"/articles/sc_data.html","id":"tabulation","dir":"Articles","previous_headings":"","what":"Tabulation","title":"The STATcubeR Data Class","text":"method $tabulate() can used turn sc_table objects tidy data.frames. See tabulation article defails.","code":"x$tabulate() # A STATcubeR tibble: 45,059 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of residence` Sex    `Number of records F-KRE` * <fct>                                <date>           <fct>                   <fct>                      <int> 1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"           male                           2 2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             male                           8 3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             female                         2 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         male                           6 5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         female                         2 # … with 45,054 more rows"},{"path":"/articles/sc_key.html","id":"adding-an-api-key","dir":"Articles","previous_headings":"","what":"Adding an API key","title":"Setup the API Key","text":"order use REST API STATcube necessary provide API key. STATcube account configured use key, following address can used view key make key available STATcubeR, use function sc_key_set(). Replace \"XXXX\" key. suggested code output, key can set persistently modifying .Renviron. can done easily usethis::edit_r_environ().","code":"http://sdbext:8081/statistik.at/ext/statcube/jsf/preferences/editPreferences.xhtml sc_key_set(\"XXXX\") #> The provided key will be available for this R session. Add #> #>   STATCUBE_KEY=XXXX #> #> to your .Renviron to set the key persistently"},{"path":"/articles/sc_key.html","id":"how-do-i-get-an-api-key","dir":"Articles","previous_headings":"","what":"How do I get an API key?","title":"Setup the API Key","text":"Currently, api available inside firewall statistics austria. Therefore, api keys can requested employees. Api access external users statcube subscription planned near future. Please get contact package maintainers STATcubeR details.","code":""},{"path":"/articles/sc_key.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Setup the API Key","text":"See JSON requests article see tables can defined STATcube GUI imported R. Alternatively, import saved table following saved tables article.","code":""},{"path":"/articles/sc_schema.html","id":"browsing-the-catalogue","dir":"Articles","previous_headings":"","what":"Browsing the Catalogue","title":"Metadata with the Schema Endpoint","text":"first function shows catalogue, lists available databases tree form. tree structure determined API closely resembles “Katalog” view GUI. see catalog 8 child nodes: Four childs type FOLDER four childs type TABLE. folders include folders root level GUI: “Statistics”, “Publication Services” well “Examples”.  get access child nodes use my_catalogue${child_label} child node Statistics also class sc_schema shows entries subfolder. syntax can used navigate folders. cases, API shows folders GUI case folders API empty.","code":"my_catalogue <- sc_schema_catalogue() my_catalogue FOLDER: Extern V9 # A data frame: 8 × 2   child                     type     <chr>                     <chr>  1 Examples                  FOLDER 2 Publications and services FOLDER 3 Default Tables            FOLDER 4 Statistics                FOLDER 5 ts_tourism                TABLE  6 krankenbewegungen         TABLE  7 tourism_ts                TABLE  8 entlassungen              TABLE my_catalogue$Statistics FOLDER: Statistics # A data frame: 20 × 2   child               type     <chr>               <chr>  1 Labour Market       FOLDER 2 Foreign Trade       FOLDER 3 Population          FOLDER 4 Education, Culture  FOLDER 5 Energy, Environment FOLDER # … with 15 more rows my_catalogue$`Default Tables` FOLDER: Default Tables"},{"path":"/articles/sc_schema.html","id":"databases-and-tables","dir":"Articles","previous_headings":"","what":"Databases and Tables","title":"Metadata with the Schema Endpoint","text":"Inside catalogue, leafs tree mostly type DATABASE TABLE. example TABLE node. suggested output, tables can used /table endpoint via sc_table_saved(). See saved tables article details. example DATABASE node.","code":"my_catalogue$Statistics$`Labour Market`$`Standardtabelle / Default table (defaulttable_deake005)` TABLE: Standardtabelle / Default table (defaulttable_deake005) Get the data with `sc_table_saved('str:table:defaulttable_deake005')` my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)` DATABASE: Working hours (Labour Force Survey) # Get more info with `sc_schema_db('str:database:deake005')`"},{"path":"/articles/sc_schema.html","id":"database-infos","dir":"Articles","previous_headings":"","what":"Database infos","title":"Metadata with the Schema Endpoint","text":"get information specific database, can pass database id sc_schema_db(). , contents tree structure similar sidebar “Tabellenansicht” view. my_db_info can used similar fashion my_catalogue obtain details resources tree. example, VALUESET label “Gender” can viewed like . leafs database schemas mostly type VALUE MEASURE.","code":"my_db_info <- sc_schema_db(\"deake005\") my_db_info DATABASE: Working hours (Labour Force Survey) # A data frame: 9 × 2   child                       type    <chr>                       <chr> 1 Factors                     GROUP 2 Facts                       GROUP 3 Datensätze/Records          GROUP 4 Time (mandatory field)      GROUP 5 Demographic Characteristics GROUP # … with 4 more rows my_db_info$`Demographic Characteristics` GROUP: Demographic Characteristics # A data frame: 8 × 2   child                                                         type    <chr>                                                         <chr> 1 Gender                                                        FIELD 2 Age in years-groups                                           FIELD 3 Highest level of training completed (national classification) FIELD 4 Highest level of training completed (ISCED 97)                FIELD 5 Highest level of training completed (ISCED 2011)              FIELD # … with 3 more rows my_db_info$`Demographic Characteristics`$Gender$Gender VALUESET: Gender # A data frame: 3 × 2   child                type    <chr>                <chr> 1 male                 VALUE 2 female               VALUE 3 Not classifiable <0> VALUE my_db_info$`Demographic Characteristics`$Gender$Gender$male VALUE: male"},{"path":"/articles/sc_schema.html","id":"data-structure-od-sc_schema-objects","dir":"Articles","previous_headings":"","what":"Data structure od sc_schema objects","title":"Metadata with the Schema Endpoint","text":"shown , sc_schema objets tree like structure. sc_schema object id, label, location type last four entries Schema objects can arbitrary amount childs. Childs always type sc_schema. x$type determines type schema object. See SuperSTAR API documentation complete list schema types.","code":"str(tail(my_db_info$`Demographic Characteristics`, 4)) ## List of 4 ##  $ id      : chr \"str:group:deake005:X_B1\" ##  $ label   : chr \"Demographic Characteristics\" ##  $ location: chr \"http://sdbext:8082/statistik.at/ext/statcube/rest/v1/schema/str:group:deake005:X_B1\" ##  $ type    : chr \"GROUP\" str(tail(my_catalogue$Statistics, 4)) ## List of 4 ##  $ id      : chr \"str:folder:festat\" ##  $ label   : chr \"Statistics\" ##  $ location: chr \"http://sdbext:8082/statistik.at/ext/statcube/rest/v1/schema/str:folder:festat\" ##  $ type    : chr \"FOLDER\""},{"path":"/articles/sc_schema.html","id":"other-resources","dir":"Articles","previous_headings":"","what":"Other resources","title":"Metadata with the Schema Endpoint","text":"Information resources databases catalogue can obtained passing resource id sc_schema(). Note tree returned depth 1, .e. child nodes measures available group_info. However, ids child nodes can obtained $id. ids can used send another request /schema endpoint Alternatively, use depth parameter sc_schema.","code":"my_db_info$Facts$id ## [1] \"str:group:deake005:M_F2\" group_info <- sc_schema(my_db_info$Facts$id) group_info GROUP: Facts # A data frame: 17 × 2   child                            type      <chr>                            <chr>   1 GEWTATJAHR                       MEASURE 2 GEWJAHR                          MEASURE 3 TATSTUNDMALGEW                   MEASURE 4 STUNDMALGEW                      MEASURE 5 Zweittät: tats. gel. Arbeitszeit MEASURE # … with 12 more rows group_info$GEWTATJAHR$id ## [1] \"str:measure:deake005:F-DATA:F-GEWTATJAHR\" group_info <- sc_schema(my_db_info$Facts$id, depth = \"valueset\")"},{"path":"/articles/sc_schema.html","id":"printing-with-data-tree","dir":"Articles","previous_headings":"","what":"Printing with data.tree","title":"Metadata with the Schema Endpoint","text":"data.tree package installed, can used alternative print mehtod. data.tree implementation can set default options()","code":"print(my_catalogue, tree = TRUE) ##                                                                         levelName     type ## 1  Extern V9                                                                        FOLDER ## 2   ¦--Examples                                                                     FOLDER ## 3   ¦   ¦--Communes (Demo)                                                        DATABASE ## 4   ¦   ¦--People                                                                 DATABASE ## 5   ¦   ¦--People multilingual                                                    DATABASE ## 6   ¦   ¦--Retail Banking ML en                                                   DATABASE ## 7   ¦   ¦--Monitoring                                                                TABLE ## 8   ¦   ¦--Standardtabelle / Default table (defaulttable_depeopleml)                 TABLE ## 9   ¦   ¦--Standardtabelle / Default table (defaulttable_dedemo)                     TABLE ## 10  ¦   ¦--E-A_nach_Bundeslaendern_dedemo                                            TABLE ## 11  ¦   °--Jahre_nach_NUTS_dedemo                                                    TABLE ## 12  ¦--Publications and services                                                    FOLDER ## 13  ¦   ¦--Economic Trend Monitor                                                   FOLDER ## 14  ¦   ¦   ¦--Economic Trend Monitor                                             DATABASE ## 15  ¦   ¦   °--Standardtabelle / Default table (defaulttable_dekonjunkturmonitor)    TABLE ## 16  ¦   °--Austrian Economic Atlas                                                  FOLDER ## 17  ¦       ¦--01 Key data Austria and European Union                             DATABASE ## 18  ¦       ¦--02 Key data Federal provinces                                      DATABASE ## 19  ¦       ¦--03 Key data on economic branches                                   DATABASE ## 20  ¦       ¦--04 Key data on economic branches by enterprise size classes        DATABASE ## 21  ¦       ¦--05 Key data on economic branches compared with the EU              DATABASE ## 22  ¦       ¦--06 Key data on economic branches by federal provinces              DATABASE ## 23  ¦       ¦--07 Key data industry                                               DATABASE ## 24  ¦       ¦--08 Key data construction                                           DATABASE ## 25  ¦       ¦--09 Key data trade                                                  DATABASE ## 26  ¦       ¦--10 Key data tourism                                                DATABASE ## 27  ¦       ¦--11 Key data transport                                              DATABASE ## 28  ¦       ¦--12 Key data foreign trade                                          DATABASE ## 29  ¦       ¦--13 Key data agriculture and foresty                                DATABASE ## 30  ¦       °--... 13 nodes w/ 0 sub                                                       ## 31  °--... 6 nodes w/ 1288 sub options(STATcubeR.print_tree = TRUE) my_catalogue$Statistics levelName     type 1  Statistics                                                                    FOLDER 2   ¦--Labour Market                                                             FOLDER 3   ¦   ¦--Job Seeker                                                            FOLDER 4   ¦   ¦--Labour Market Policy                                                  FOLDER 5   ¦   ¦--Working Time                                                          FOLDER 6   ¦   ¦--Activity Status                                                       FOLDER 7   ¦   ¦--Employment                                                            FOLDER 8   ¦   ¦--Job Vacancies                                                         FOLDER 9   ¦   ¦   ¦--Offene Stellen (Jahresdurchschnitt) ab 2009                     DATABASE 10  ¦   ¦   ¦--Offene Stellen Quartale ab 2009                                 DATABASE 11  ¦   ¦   ¦--Standardtabelle / Default table (defaulttable_deoffstelljd)        TABLE 12  ¦   ¦   °--Standardtabelle / Default table (defaulttable_deoffstell)          TABLE 13  ¦   ¦--Working hours (Labour Force Survey)                                 DATABASE 14  ¦   ¦--Austrian Micro census - Labour Force Survey Yearly Data             DATABASE 15  ¦   ¦--Austrian Micro census - Labour Force Survey Quarterly Data          DATABASE 16  ¦   ¦--Microcensus Time Series since 1974                                  DATABASE 17  ¦   ¦--Standardtabelle / Default table (defaulttable_deake001j)               TABLE 18  ¦   ¦--Standardtabelle / Default table (defaulttable_deake003j)               TABLE 19  ¦   ¦--Standardtabelle / Default table (defaulttable_deake005)                TABLE 20  ¦   °--Standardtabelle / Default table (defaulttable_deake002q)               TABLE 21  ¦--Foreign Trade                                                             FOLDER 22  ¦   ¦--TEC - Trade by enterprise characteristics                             FOLDER 23  ¦   ¦   ¦--Trade by number of partner countries and activity sector (NACE) DATABASE 24  ¦   ¦   ¦--Trade by type of trader and activity sector (NACE)              DATABASE 25  ¦   ¦   ¦--Trade by partner countries and enterprise size class            DATABASE 26  ¦   ¦   ¦--Trade by enterprise size class and activity sector (NACE)       DATABASE 27  ¦   ¦   ¦--Trade by type of ownership and activity sector (NACE)           DATABASE 28  ¦   ¦   ¦--Trade by exports intensity and activity sector (NACE)           DATABASE 29  ¦   ¦   ¦--Trade by commodity (CPA) and activity sector (NACE)             DATABASE 30  ¦   ¦   °--... 13 nodes w/ 0 sub                                                    31  ¦   °--... 3 nodes w/ 31 sub                                                        32  °--... 18 nodes w/ 1229 sub"},{"path":"/articles/sc_table.html","id":"create-a-table-with-the-statcube-gui","dir":"Articles","previous_headings":"","what":"Create a table with the STATcube GUI","title":"Get Data via JSON Requests","text":"Use graphical user interface STATcube create table. Visit STATcube select database. open table view can create table. See STATcube manual details.","code":""},{"path":"/articles/sc_table.html","id":"download-an-api-request","dir":"Articles","previous_headings":"","what":"Download an API request","title":"Get Data via JSON Requests","text":"Choose “Open Data API Abfrage (.json)” download options. save json file local file system.  might case thatthis download option listed download format. means current user permitted use API.","code":""},{"path":"/articles/sc_table.html","id":"send-the-json-to-the-api","dir":"Articles","previous_headings":"","what":"Send the json to the API","title":"Get Data via JSON Requests","text":"Provide path downloaded string file sc_table(). object my_table created via raw API response httr::POST() /table endpoint. Printing object summarize request. demonstrate example json via sc_example().","code":"my_table <- sc_table(json_file = \"path/to/api_request.json\") (json_path <- sc_example(\"population_timeseries.json\")) ## [1] \"/data/home/decill/STATgraph/STATcubeR/inst/json_examples/population_timeseries.json\" my_table <- sc_table(json_path) my_table ## An object of class sc_table ##  ## Database    Population at the beginning of the quarter since 2002  ## Measures    Number of persons  ## Fields      Quarter, Age in single years <96>, Sex <2>, Commune <2383> (Province-District)  ##  ## Request     2021-08-30 08:58:29  ## STATcubeR   0.2.8"},{"path":"/articles/sc_table.html","id":"convert-the-response-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Convert the response into a data frame","title":"Get Data via JSON Requests","text":"return value sc_table() can converted data.frame. , use $tabulate() method. produce tidy table, contains column field table. Furthermore, one column present measure.","code":"my_table$tabulate() # A STATcubeR tibble: 8,316 x 5    Quarter    `Age in single years <96>` `Sex <2>` `Commune <2383> (Province-District)` `Number of persons`  * <date>     <fct>                      <fct>     <fct>                                              <dbl>  1 2002-01-01 Up to 14 years old         male      Burgenland <AT11>                                  21287  2 2002-01-01 Up to 14 years old         male      Carinthia <AT21>                                   47230  3 2002-01-01 Up to 14 years old         male      Vienna <AT13>                                     117920  4 2002-01-01 Up to 14 years old         male      Vorarlberg <AT34>                                  34798  5 2002-01-01 Up to 14 years old         male      Tyrol <AT33>                                       62794  6 2002-01-01 Up to 14 years old         male      Styria <AT22>                                      97538  7 2002-01-01 Up to 14 years old         male      Salzburg <AT32>                                    46955  8 2002-01-01 Up to 14 years old         male      Upper Austria <AT31>                              127316  9 2002-01-01 Up to 14 years old         male      Lower Austria <AT12>                              133928 10 2002-01-01 Up to 14 years old         female    Burgenland <AT11>                                  20405 # … with 8,306 more rows"},{"path":"/articles/sc_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get Data via JSON Requests","text":"Functionalities returned object explained STATcubeR data article. saved tables article shows alternative way importing tables.","code":""},{"path":"/articles/sc_table_saved.html","id":"keys-and-accounts","dir":"Articles","previous_headings":"","what":"Keys and accounts","title":"Load Saved Tables","text":"Tables always saved logged STATcube account. API key bound account can list saved tables account. Saved tables accounts can listed requested.","code":""},{"path":"/articles/sc_table_saved.html","id":"converting-saved-tables-to-json-requests","dir":"Articles","previous_headings":"","what":"Converting saved tables to JSON requests","title":"Load Saved Tables","text":"make table available later use users rSTATcubeR`, response can exported json. generated json file contains API request can used sc_table().","code":"tourism_ts$json$write(\"tourism_ts.json\") my_response <- sc_table(\"tourism_ts.json\")"},{"path":"/articles/sc_tabulate.html","id":"tabulate","dir":"Articles","previous_headings":"","what":"Tabulating Data","title":"Tabulating STATcubeR Datasets","text":"Calling $tabulate() method arguments produces table dimensions $data. Instead cancer$tabulate(...) also possible use sc_tabulate(cancer, ...). available parameters $tabulate() method documented ?sc_tabulate.","code":"cancer$tabulate() # A STATcubeR tibble: 45,059 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of residence` Sex    `Number of records F-KRE` * <fct>                                <date>           <fct>                   <fct>                      <int> 1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"           male                           2 2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             male                           8 3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"             female                         2 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         male                           6 5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"         female                         2 # … with 45,054 more rows identical(dim(cancer$tabulate()), dim(cancer$data)) ## [1] TRUE"},{"path":"/articles/sc_tabulate.html","id":"aggregating-with-sums","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating with sums","title":"Tabulating STATcubeR Datasets","text":"get number cases reporting year sex, use labels variables arguments. one measure included dataset, measures aggregated. STATcubeR uses rowsum() ensure good performance big datasets. also possible use partial matching use codes. STATcubeR use pmatch() match supplied strings metadata identify variables used aggregation.","code":"cancer$tabulate(\"Reporting year\", \"Sex\") # A STATcubeR tibble: 72 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       14492 2 1983-01-01       female                     17478 3 1984-01-01       male                       14798 4 1984-01-01       female                     17456 5 1985-01-01       male                       14555 # … with 67 more rows cancer$tabulate(\"Reporting\", \"C-KRE\") # A STATcubeR tibble: 72 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       14492 2 1983-01-01       female                     17478 3 1984-01-01       male                       14798 4 1984-01-01       female                     17456 5 1985-01-01       male                       14555 # … with 67 more rows"},{"path":"/articles/sc_tabulate.html","id":"totals","dir":"Articles","previous_headings":"Aggregation","what":"Limitations of sums","title":"Tabulating STATcubeR Datasets","text":"cases, datasets aggregated using rowsum() approach. example, take structure earnings survey. can see print() output, measures contain means quartiles. Therefore, aggregating data via rowsum() meaningful. However, dataset contains “total code” every field.","code":"earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings ## An object of class od_table ##  ## Dataset     Structure of Earnings Survey (SES) 2018 Gross hourly earnings in EUR by citizenship, region (NUTS 2) and ##             form of employment  ## Measures    Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd quartile, Number of employees  ## Fields      Sex, Citizenship, Region (NUTS2), Form of employment  ##  ## Request     2021-09-17 15:37:38  ## STATcubeR   0.2.8 earnings$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                         `Arithmetic mea… `1st quartile`  * <fct>     <fct>       <fct>              <fct>                                                   <int>          <int>  1 Sum total Total       Total              \"Total\"                                                    18             12  2 Sum total Total       Total              \"Standard employment \"                                     19             13  3 Sum total Total       Total              \"Non-standard employment (total)\"                          15             10  4 Sum total Total       Total              \"Non-standard employment: part-time only\"                  16             11  5 Sum total Total       Total              \"Non-standard employment: fixed-term employ…               17             10  6 Sum total Total       Total              \"Non-standard employment: marginal part-tim…               12              9  7 Sum total Total       Total              \"Non-standard employment: temporary agency …               14             12  8 Sum total Total       AT11 Burgenland    \"Total\"                                                    16             11  9 Sum total Total       AT12 Lower Austria \"Total\"                                                    16             11 10 Sum total Total       AT13 Vienna        \"Total\"                                                    19             11 # … with 62 more rows, and 3 more variables: 2nd quartile (median) <int>, 3rd quartile <int>, Number of employees <int>"},{"path":"/articles/sc_tabulate.html","id":"aggregating-via-total-codes","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating via total codes","title":"Tabulating STATcubeR Datasets","text":"total codes can used aggregate data $tabulate(). order , total codes need specified using $total_codes(). Now $tabulate() use total codes form aggregates data. can see, method extracted rows 2 7 data. logic selecting rows equivalent following dplyr expression. $tabulate() method also works one variable.","code":"earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                       Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") # A STATcubeR tibble: 6 x 6   `Form of employment`                `Arithmetic mea… `1st quartile` `2nd quartile (m… `3rd quartile` `Number of emplo… * <fct>                                          <int>          <int>             <int>          <int>             <int> 1 \"Standard employment \"                            19             13                16             22           1685788 2 \"Non-standard employment (total)\"                 15             10                13             17            965150 3 \"Non-standard employment: part-tim…               16             11                14             18            598012 4 \"Non-standard employment: fixed-te…               17             10                13             19            125491 5 \"Non-standard employment: marginal…               12              9                10             12            141213 6 \"Non-standard employment: temporar…               14             12                14             16            100435 earnings$data %>% dplyr::filter(Sex == \"Sum total\" & Citizenship == \"Total\" &    `Region (NUTS2)` == \"Total\" & `Form of employment` != \"Total\") %>%    dplyr::select(-Sex, -Citizenship, -`Region (NUTS2)`)"},{"path":"/articles/sc_tabulate.html","id":"section","dir":"Articles","previous_headings":"","what":"Tabulating STATcubeR Datasets","title":"Tabulating STATcubeR Datasets","text":"Sex & Form employment Sex & Citizenship Sex & Region Citizenship & Region get empty table cross tabulation included OGD dataset. happen Citizenship & Form employment well Region & Form employment.","code":"earnings$tabulate(\"Sex\", \"Form of employment\") # A STATcubeR tibble: 12 x 7    Sex    `Form of employment`                       `Arithmetic mea… `1st quartile` `2nd quartile (medi… `3rd quartile`  * <fct>  <fct>                                                 <int>          <int>                <int>          <int>  1 Male   \"Standard employment \"                                   20             14                   17             23  2 Male   \"Non-standard employment (total)\"                        17             11                   14             18  3 Male   \"Non-standard employment: part-time only\"                19             11                   15             22  4 Male   \"Non-standard employment: fixed-term empl…               18             11                   14             20  5 Male   \"Non-standard employment: marginal part-t…               13              9                   10             13  6 Male   \"Non-standard employment: temporary agenc…               14             12                   14             16  7 Female \"Standard employment \"                                   16             11                   14             19  8 Female \"Non-standard employment (total)\"                        15             10                   13             17  9 Female \"Non-standard employment: part-time only\"                15             11                   14             18 10 Female \"Non-standard employment: fixed-term empl…               15             10                   13             16 11 Female \"Non-standard employment: marginal part-t…               12              9                   10             12 12 Female \"Non-standard employment: temporary agenc…               13             10                   12             15 # … with 1 more variable: Number of employees <int> earnings$tabulate(\"Sex\", \"Citizenship\") # A STATcubeR tibble: 16 x 7    Sex    Citizenship                                `Arithmetic mea… `1st quartile` `2nd quartile (medi… `3rd quartile`  * <fct>  <fct>                                                 <int>          <int>                <int>          <int>  1 Male   \"Austrian\"                                               20             14                   17             24  2 Male   \"Non-Austrian \"                                          15             11                   13             17  3 Male   \"EU-28/EWR/Switzerland (without Austria)\"                16             11                   14             17  4 Male   \"EU-15/EWR before 2004/Switzerland\"                      21             13                   17             24  5 Male   \"EU-13 EU Member States after 2004\"                      14             10                   13             15  6 Male   \"Former Yugoslavia (without Slovenia and …               14             11                   14             16  7 Male   \"Turkey\"                                                 13             10                   13             15  8 Male   \"Other\"                                                  14              9                   11             15  9 Female \"Austrian\"                                               16             11                   14             18 10 Female \"Non-Austrian \"                                          13              9                   11             14 11 Female \"EU-28/EWR/Switzerland (without Austria)\"                14              9                   11             15 12 Female \"EU-15/EWR before 2004/Switzerland\"                      17             11                   15             20 # … with 4 more rows, and 1 more variable: Number of employees <int> earnings$tabulate(\"Sex\", \"Region\") # A STATcubeR tibble: 18 x 7    Sex    `Region (NUTS2)`   `Arithmetic mean` `1st quartile` `2nd quartile (median)` `3rd quartile` `Number of employe…  * <fct>  <fct>                          <int>          <int>                   <int>          <int>               <int>  1 Male   AT11 Burgenland                   17             12                      14             18               35941  2 Male   AT12 Lower Austria                18             12                      15             20              257912  3 Male   AT13 Vienna                       21             12                      17             25              353371  4 Male   AT21 Carinthia                    18             13                      16             21               79189  5 Male   AT22 Styria                       18             13                      16             21              219265  6 Male   AT31 Upper Austria                20             14                      17             23              295783  7 Male   AT32 Salzburg                     19             13                      16             22              105792  8 Male   AT33 Tyrol                        19             13                      16             21              128282  9 Male   AT34 Vorarlberg                   20             15                      18             24               69053 10 Female AT11 Burgenland                   15             10                      13             17               29448 11 Female AT12 Lower Austria                14             10                      13             16              164107 12 Female AT13 Vienna                       17             11                      15             20              280267 # … with 6 more rows earnings$tabulate(\"Citizenship\", \"Region\") # A STATcubeR tibble: 0 x 7 # … with 7 variables: Citizenship <fct>, Region (NUTS2) <fct>, Arithmetic mean <int>, 1st quartile <int>, #   2nd quartile (median) <int>, 3rd quartile <int>, Number of employees <int> earnings$tabulate(\"Citizenship\", \"Form of employment\") %>% dim() ## [1] 0 7 earnings$tabulate(\"Region\", \"Form of employment\") %>% dim() ## [1] 0 7"},{"path":"/articles/sc_tabulate.html","id":"including-totals-in-the-oputput","dir":"Articles","previous_headings":"Aggregation","what":"Including totals in the oputput","title":"Tabulating STATcubeR Datasets","text":"necessary fields totals. example, suppose want include totals Sex output table. can just remove toal code running sc_tabulate(). special symbol NA can used unset total code.","code":"earnings$total_codes(Sex = NA) earnings$tabulate(\"Sex\") # A STATcubeR tibble: 3 x 6   Sex       `Arithmetic mean` `1st quartile` `2nd quartile (median)` `3rd quartile` `Number of employees` * <fct>                 <int>          <int>                   <int>          <int>                 <int> 1 Sum total                18             12                      15             20               2650938 2 Male                     19             13                      16             22               1544588 3 Female                   15             10                      13             18               1106350"},{"path":"/articles/sc_tabulate.html","id":"german-labels-and-codes","dir":"Articles","previous_headings":"","what":"German Labels and Codes","title":"Tabulating STATcubeR Datasets","text":"OGD datasets, possible switch language used labeling data. can done setting $language \"de\" \"en\". skip labelling altogether use variable codes output, use raw=TRUE. Switching languages currently available od_table() objects. sc_table() objects require support sc_schema() endpoint. See github issues development goals regarding labeling.","code":"earnings$language <- \"de\" earnings$tabulate(\"Geschlecht\") # A STATcubeR tibble: 3 x 6   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Median)` `3. Quartil` `Zahl d unselbst Beschäftigten` * <fct>                        <int>        <int>                 <int>        <int>                           <int> 1 insgesamt                       18           12                    15           20                         2650938 2 männlich                        19           13                    16           22                         1544588 3 weiblich                        15           10                    13           18                         1106350 earnings$tabulate(\"Geschlecht\", raw = TRUE) # A STATcubeR tibble: 3 x 6   `C-A11-0` `F-VESTE_AM` `F-VESTE_Q25` `F-VESTE_Q50` `F-VESTE_Q75` `F-VESTE_UB` * <fct>            <int>         <int>         <int>         <int>        <int> 1 A11-1               18            12            15            20      2650938 2 A11-2               19            13            16            22      1544588 3 A11-3               15            10            13            18      1106350"},{"path":"/articles/sc_tabulate.html","id":"subsetting-columns","dir":"Articles","previous_headings":"","what":"Subsetting columns","title":"Tabulating STATcubeR Datasets","text":"previous examples, supplied names /codes fields sc_tabulate(). also possible include measures case unlisted measures omitted. Just like fields, measures also support partial matching codes. example, \"2. Quartil\" matched \"2. Quartil (Median)\".","code":"earnings$tabulate(\"Geschlecht\", \"Arithmetisches Mittel\", \"2. Quartil\") # A STATcubeR tibble: 3 x 3   Geschlecht `Arithmetisches Mittel` `2. Quartil (Median)` * <fct>                        <int>                 <int> 1 insgesamt                       18                    15 2 männlich                        19                    16 3 weiblich                        15                    13"},{"path":"/articles/sc_tabulate.html","id":"programmatic-usage","dir":"Articles","previous_headings":"","what":"Programmatic usage","title":"Tabulating STATcubeR Datasets","text":"Notice used german label column \"Sex\" last calls tabulate(). necessary “active” labels available define tabulation. want use STATcubeR programatically, always use codes define tabulation also use .list parameter want pass several codes. $total_codes() currently uses ellipsis (...) parameter define total codes. future, programmatic updates sc_data objects defined $recodes. See #17.","code":"earnings$field(\"C-A11-0\") # STATcubeR metadata: 3 x 7   code  label     parsed      <chr> <chr>     <chr>     1 A11-1 insgesamt insgesamt 2 A11-2 männlich  männlich  3 A11-3 weiblich  weiblich  # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order' earnings$total_codes(`C-A11-0` = \"A11-1\") vars_to_tabulate <- c(\"C-A11-0\", \"C-BESCHV-0\") earnings$tabulate(.list = vars_to_tabulate) # A STATcubeR tibble: 12 x 7   Geschlecht `Form des Beschäftigungsverhä… `Arithmetisches… `1. Quartil` `2. Quartil (Me… `3. Quartil` `Zahl d unselbs… * <fct>      <fct>                                     <int>        <int>            <int>        <int>            <int> 1 männlich   \"Normalarbeitsverhältnis\"                    20           14               17           23          1225839 2 männlich   \"Atypische Beschäftigung (ins…               17           11               14           18           318749 3 männlich   \"Atypisch: ausschließlich Tei…               19           11               15           22           119316 4 männlich   \"Atypisch: befristete Beschäf…               18           11               14           20            65377 5 männlich   \"Atypisch: geringfügige Besch…               13            9               10           13            58175 6 männlich   \"Atypisch: Leih- und Zeitarbe…               14           12               14           16            75880 7 weiblich   \"Normalarbeitsverhältnis\"                    16           11               14           19           459949 # … with 5 more rows"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Gregor de Cillia. Author, maintainer. Bernhard Meindl. Contributor.","code":""},{"path":"/index.html","id":"statcuber-","dir":"","previous_headings":"","what":"STATcubeR","title":"STATcubeR","text":"R client things STATcube. Get data STATcube REST API via open government data portal https://data.statistik.gv.. STATcubeR makes easy include datasources R projects.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"STATcubeR","text":"package can installed directly github using remotes package.","code":"remotes::install_github(\"statistikat/STATcubeR\")"},{"path":"/index.html","id":"open-data","dir":"","previous_headings":"","what":"Open Data","title":"STATcubeR","text":"import datasets https://data.statistik.gv., pass dataset id od_table() function. example, OGD data austrian population 2020 can accessed follows. resulting object contains labeled data (see ), raw data, metadata . See OGD article details. available datasets article provides overview 268 datasets compatible od_table().","code":"library(STATcubeR) population <- od_table(\"OGD_bevstandjbab2002_BevStand_2020\") population$tabulate() # A STATcubeR tibble: 392,508 x 5   `Time section` Sex   `Commune (aggregation by political distri… `Age in single year… Number * <date>         <fct> <fct>                                      <fct>                 <int> 1 2020-01-01     male  Eisenstadt <10101>                         under 1 year old         77 2 2020-01-01     male  Eisenstadt <10101>                         1 year old               75 3 2020-01-01     male  Eisenstadt <10101>                         2 years old              70 4 2020-01-01     male  Eisenstadt <10101>                         3 years old              83 # … with 392,504 more rows"},{"path":"/index.html","id":"statcube-api","dir":"","previous_headings":"","what":"STATcube API","title":"STATcubeR","text":"order use REST API, required set API key. mentioned api key article, keys available employees Statistics Austria moment. Support external users added near future. four main functions interact API sc_schema_catalogue() lists available datasets tables sc_schema_db() provides metadata specific database sc_table() requests table API according json standard. sc_table_saved() requests table based id information first two functions can found schema article. sc_table() sc_table_saved() articles .","code":""},{"path":"/index.html","id":"consistent-data-formats","dir":"","previous_headings":"","what":"Consistent data formats","title":"STATcubeR","text":"OGD data tables form REST API wrapped R6 class provide easy access data metadata. example, $tabulate() method also available tables REST API. See base class article information features class.","code":"# https://statcube.at/statcube/openinfopage?id=debevstandjbab2002 population <- sc_table_saved(\"str:table:defaulttable_debevstandjbab2002\") population$tabulate() # A STATcubeR tibble: 10 x 3   `Time section` `Commune (aggregation by political district)`  Number   <date>         <fct>                                           <dbl> 1 2021-01-01     Burgenland <AT11>                              296010 2 2021-01-01     Carinthia <AT21>                               562089 3 2021-01-01     Lower Austria <AT12>                          1690879 4 2021-01-01     Upper Austria <AT31>                          1495608 # … with 6 more rows"},{"path":"/reference/df_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Experimental: turn data.frame objects into sc_data — df_table","title":"Experimental: turn data.frame objects into sc_data — df_table","text":"Adapter function initialize sc_data objects based data.frame. Currently, heavy restrictions data look like work function - see Details. function exported.","code":""},{"path":"/reference/df_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Experimental: turn data.frame objects into sc_data — df_table","text":"","code":"df_table(x, label = \"data\")"},{"path":"/reference/df_table.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Experimental: turn data.frame objects into sc_data — df_table","text":"x data.frame object compatible .data.frame()","code":""},{"path":"/reference/df_table.html","id":"pkg-arg-label","dir":"Reference","previous_headings":"","what":"label (argument)","title":"Experimental: turn data.frame objects into sc_data — df_table","text":"label character vector length one used display label dataset.","code":""},{"path":"/reference/df_table.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Experimental: turn data.frame objects into sc_data — df_table","text":"Codes automatically assigned field, measure level data. Allowed column types numeric, integer, factor character. several improvements need made exported function sc_tabulate() currently assumes combination field values occurs data. necessarily case . Time columns supported.","code":""},{"path":"/reference/od_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache management for Open Data — od_cache","title":"Cache management for Open Data — od_cache","text":"Functions inspect contents current cache.","code":""},{"path":"/reference/od_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache management for Open Data — od_cache","text":"","code":"od_cache_summary()  od_downloads()"},{"path":"/reference/od_cache.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache management for Open Data — od_cache","text":"od_cache_summary() provides overview contents cache data.frame. hasone row dataset following columns. file sizes given bytes id dataset id updated last modified time ${id}.json json file size ${id}.json data file size ${id}.csv header file size ${id}_HEADER.csv fields total file size files belonging fields ({id}_C*.csv). n_fields number field files od_downloads() shows download history current cache time timestamp download file filename downloaded download time milliseconds","code":""},{"path":"/reference/od_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List available Opendata datasets — od_list","title":"List available Opendata datasets — od_list","text":"od_list() returns data.frame  containing datasets published data.statistik.gv.","code":""},{"path":"/reference/od_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available Opendata datasets — od_list","text":"","code":"od_list(unique = TRUE)"},{"path":"/reference/od_list.html","id":"pkg-arg-unique","dir":"Reference","previous_headings":"","what":"unique (argument)","title":"List available Opendata datasets — od_list","text":"unique datasets pulbished multiple groups. listed first group appear unless parameter set FALSE.","code":""},{"path":"/reference/od_list.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"List available Opendata datasets — od_list","text":"data.frame two columns \"category\": Grouping dataset listed \"id\": Name dataset can later used od_table() \"label\": Description dataset","code":""},{"path":"/reference/od_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource management for open.data — od_resource","title":"Resource management for open.data — od_resource","text":"Helper functions caching parsing open.data resources.","code":""},{"path":"/reference/od_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource management for open.data — od_resource","text":"","code":"od_cache_dir(dir = NULL)  od_cache_clear(id)  od_cache_file(id, suffix = NULL, timestamp = NULL, ...)  od_resource(id, suffix = NULL, timestamp = NULL)  od_json(id, timestamp = Sys.time() - 3600)  od_resource_all(id, json = od_json(id))"},{"path":"/reference/od_resource.html","id":"pkg-arg-dir","dir":"Reference","previous_headings":"","what":"dir (argument)","title":"Resource management for open.data — od_resource","text":"dir NULL, cache directory returned. Otherwise, cache directory updated dir.","code":""},{"path":"/reference/od_resource.html","id":"pkg-arg-id","dir":"Reference","previous_headings":"","what":"id (argument)","title":"Resource management for open.data — od_resource","text":"id database id","code":""},{"path":"/reference/od_resource.html","id":"pkg-arg-suffix","dir":"Reference","previous_headings":"","what":"suffix (argument)","title":"Resource management for open.data — od_resource","text":"suffix suffix resource: \"HEADER\" field code.","code":""},{"path":"/reference/od_resource.html","id":"pkg-arg-timestamp","dir":"Reference","previous_headings":"","what":"timestamp (argument)","title":"Resource management for open.data — od_resource","text":"timestamp timestamp POSIXct format. provided, cached resource updated older value. Otherwise downloaded exist cache.","code":""},{"path":"/reference/od_resource.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Resource management for open.data — od_resource","text":"... internal use","code":""},{"path":"/reference/od_resource.html","id":"pkg-arg-json","dir":"Reference","previous_headings":"","what":"json (argument)","title":"Resource management for open.data — od_resource","text":"json JSON file belonging dataset","code":""},{"path":"/reference/od_resource.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource management for open.data — od_resource","text":"od_cache_file() od_resource(), returned objects contain hidden attribute attr(., \"od\") time used downloading parsing resource. od_resource_all() converts hidden attribute columns.","code":""},{"path":"/reference/od_resource.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource management for open.data — od_resource","text":"od_cache_clear(id) removes files belonging specified id. default, downloaded json files \"expire\" one hour 3600 seconds. , json requested, reused cache unless file.mtime() one hour behind Sys.time().","code":""},{"path":"/reference/od_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table","title":"Create a table-instance from an open-data dataset — od_table","text":"od_table(id) returns R6-class object containing relevant data metadata https://data.statistik.gv./data/","code":""},{"path":"/reference/od_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table","text":"","code":"od_table(id, language = c(\"en\", \"de\"))"},{"path":"/reference/od_table.html","id":"pkg-arg-id","dir":"Reference","previous_headings":"","what":"id (argument)","title":"Create a table-instance from an open-data dataset — od_table","text":"id id data-set accessed","code":""},{"path":"/reference/od_table.html","id":"pkg-arg-language","dir":"Reference","previous_headings":"","what":"language (argument)","title":"Create a table-instance from an open-data dataset — od_table","text":"language language used labeling. \"en\" \"de\"","code":""},{"path":"/reference/od_table.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table-instance from an open-data dataset — od_table","text":"returned objects class sc_table inherits several parsing methods sc_data. See od_table_class full class documentation.","code":""},{"path":"/reference/od_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table_class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"R6 Class open data datasets.","code":""},{"path":"/reference/od_table_class.html","id":"section-super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"STATcubeR::sc_data -> od_table","code":""},{"path":"/reference/od_table_class.html","id":"section-active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a table-instance from an open-data dataset — od_table_class","text":"json parsed version https://data.statistik.gv./ogd/json?dataset=${id} header parsed version https://data.statistik.gv./data/${id}_HEADER.csv.Similar contents can found $meta. resources lists files downloaded server contruct table","code":""},{"path":"/reference/od_table_class.html","id":"section-methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create a table-instance from an open-data dataset — od_table_class","text":"od_table_class$new() STATcubeR::sc_data$field() STATcubeR::sc_data$tabulate() STATcubeR::sc_data$total_codes() class exported. Use od_table() initialize objects class od_table.    id id data-set accessed language language used labeling. \"en\" \"de\"  class exported. Use od_table() initialize objects class od_table.    id id data-set accessed language language used labeling. \"en\" \"de\"","code":"od_table_class$new(id, language = c(\"en\", \"de\")) od_table_class$new(id, language = c(\"en\", \"de\"))"},{"path":"/reference/other_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Other endpoints of the STATcube REST API — other_endpoints","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"Utilize simple endpoints /info /table_rate_limit. provide information available locales amount requests available calls /table endpoint.","code":""},{"path":"/reference/other_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"","code":"sc_info(language = c(\"en\", \"de\"), key = sc_key())  sc_rate_limit_table(language = c(\"en\", \"de\"), key = sc_key())"},{"path":"/reference/other_endpoints.html","id":"pkg-arg-language","dir":"Reference","previous_headings":"","what":"language (argument)","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"language language used labeling. \"en\" \"de\"","code":""},{"path":"/reference/other_endpoints.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"/reference/other_endpoints.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"sc_info() returns information available database languages sc_rate_limit_table() returns 3x1 dataframe following columns remaining much requests can sent /table endpoint rate limit reached. limit number requests allowed per hour. reset tiestamp rate limit reset. Ususally, less one hour `current time.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/sc_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Links to important STATcube and OGD pages — sc_browse","title":"Links to important STATcube and OGD pages — sc_browse","text":"collection links, browse important STATcube pages.","code":""},{"path":"/reference/sc_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Links to important STATcube and OGD pages — sc_browse","text":"","code":"sc_browse()  sc_browse_preferences()  sc_browse_ogd()"},{"path":"/reference/sc_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache responses from the STATcube REST API — sc_cache","title":"Cache responses from the STATcube REST API — sc_cache","text":"Functions cache requested resources directory ~/.STATcubeR_cache reuse calls sc_table(), sc_table_custom() sc_schema() forth. functions designed testing documentation regarded part STATcubeR interface. caching logic likely change future case sc_cache_clear() required purge old cache entries.","code":""},{"path":"/reference/sc_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache responses from the STATcube REST API — sc_cache","text":"","code":"## enable caching for the current R session sc_cache_enable()  ## disable caching for the current R session sc_cache_disable()  ## remove all files from the cache sc_cache_clear()"},{"path":"/reference/sc_cache.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache responses from the STATcube REST API — sc_cache","text":"Caching can set using environment variables. set persistent cache Open Data REST API, following lines .Renviron can used. Note caches always used check verify resources unchanged server. Caching implemented endpoints sc_info() sc_rate_limit_table().``","code":"STATCUBE_KEY       = YOUR_API_KEY_GOES_HERE STATCUBE_CACHE     = TRUE OD_CACHE_DIR       = \"~/.cache/STATcubeR/open_data/\" STATCUBE_CACHE_DIR = \"~/.cache/STATcubeR/api/\""},{"path":"/reference/sc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Common interface for STATcubeR datasets — sc_data","title":"Common interface for STATcubeR datasets — sc_data","text":"class represents common interface datasets returned STATcube REST API OGD datasets. sc_data obects usually created od_table(), sc_table() df_table().","code":""},{"path":"/reference/sc_data.html","id":"section-active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Common interface for STATcubeR datasets — sc_data","text":"data raw data. data.frame uses codes field variables column names. obtain labeled data, use $tabulate(). language language used labeling. \"en\" \"de\" meta list containing metadata dataset. least following entries $source dataframe single row contains information data source. $measures dataframe one row every measure dataset. contains codes labels measure well number NAs. Derived classes might add additional columns. $fields dataframe one row every field dataset. contains codes labels measure well total codes. Derived classes might add additional columns recode object class sc_recoder can used change labels perform recoding operations.","code":""},{"path":"/reference/sc_data.html","id":"section-methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Common interface for STATcubeR datasets — sc_data","text":"sc_data$new() sc_data$field() sc_data$tabulate() sc_data$total_codes() sc_data$clone()  class exported. Use od_table(), sc_table() df_table() initialize objects class sc_data.    data, meta, fields raw data, metadata field information. use directly initialize objects sc_table(), od_table() df_table()  class exported. Use od_table(), sc_table() df_table() initialize objects class sc_data.    data, meta, fields raw data, metadata field information. use directly initialize objects sc_table(), od_table() df_table()   get information specific field. format reurn value similar $meta. data.frame includes codes labels level field.    specifier field. Integer character. interger provided, match row number $meta$fields. character provided, field matched using pmatch() available codes labels.    get information specific field. format reurn value similar $meta. data.frame includes codes labels level field.    specifier field. Integer character. interger provided, match row number $meta$fields. character provided, field matched using pmatch() available codes labels.     create tidy dataset. See sc_tabulate() details.    ... arguments passed sc_tabulate()    create tidy dataset. See sc_tabulate() details.    ... arguments passed sc_tabulate()        ... key value pairs define total codes. Key field code value code $field(). empty, return data.frame specified total codes. Keys values can also use labels instead codes. See examples.       ... key value pairs define total codes. Key field code value code $field(). empty, return data.frame specified total codes. Keys values can also use labels instead codes. See examples.     objects class cloneable method.    deep Whether make deep clone.  objects class cloneable method.    deep Whether make deep clone.","code":"sc_data$new(data, meta, fields) sc_data$new(data, meta, fields) sc_data$field(i = 1) x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) x$field(\"Sex\") sc_data$field(i = 1) x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) x$field(\"Sex\") sc_data$tabulate(...) x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\") sc_data$tabulate(...) x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\") sc_data$total_codes(...) earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") earnings$tabulate(\"Sex\", \"Form of employment\") sc_data$total_codes(...) earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") earnings$tabulate(\"Sex\", \"Form of employment\") sc_data$clone(deep = FALSE) sc_data$clone(deep = FALSE)"},{"path":"/reference/sc_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage your API Key — sc_key","title":"Manage your API Key — sc_key","text":"Functions get/set STATcube API key make available calls STATcube API.","code":""},{"path":"/reference/sc_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage your API Key — sc_key","text":"","code":"sc_key()  sc_key_set(key, test = TRUE)  sc_key_get()  sc_key_prompt(test = TRUE)  sc_key_exists()"},{"path":"/reference/sc_key.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Manage your API Key — sc_key","text":"key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"/reference/sc_key.html","id":"pkg-arg-test","dir":"Reference","previous_headings":"","what":"test (argument)","title":"Manage your API Key — sc_key","text":"test Use test-requst verify key?","code":""},{"path":"/reference/sc_key.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage your API Key — sc_key","text":"functions return key (invisibly) except sc_key_exists(), returns logical() length one.","code":""},{"path":"/reference/sc_key.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage your API Key — sc_key","text":"sc_key() forwards sc_key_get() key already present. Otherwise, sc_key_prompt() invoked. sc_key_set() can used pass key parameter (string) sc_key_get() returns key, exists. Otherwise, error thrown. sc_key_prompt() prompts key via readline() sc_key_exists() returns TRUE key set FALSE otherwise.","code":""},{"path":"/reference/sc_last_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Error handling for the STATcube REST API — sc_last_error","title":"Error handling for the STATcube REST API — sc_last_error","text":"case API requests unsuccessfull, STATcubeR throw errors summarize httr error type meaning. Requests considered unsuccessfull one following applies response returns TRUE httr::http_error(). response type \"application/json\" cases useful get direct access faulty response object. purpose, possible use sc_last_error() provide httr response object last unsuccessfull request.","code":""},{"path":"/reference/sc_last_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error handling for the STATcube REST API — sc_last_error","text":"","code":"sc_last_error()"},{"path":"/reference/sc_last_error.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Error handling for the STATcube REST API — sc_last_error","text":"return value httr::GET() httr::POST().","code":""},{"path":"/reference/sc_recoder.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode sc_table objects — sc_recoder","title":"Recode sc_table objects — sc_recoder","text":"collection methods can used modify object class sc_table reference. Typical usage acces recode binding sc_table object use method chaining perform recode operations. See example section details.","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$recode$   label_field(\"C-BERJ-0\", \"de\", \"JAHR\")$   label_measure(\"F-KRE\", \"de\", \"Anzahl\")"},{"path":"/reference/sc_recoder.html","id":"section-methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Recode sc_table objects — sc_recoder","text":"sc_recoder$new() sc_recoder$label_field() sc_recoder$label_measure() sc_recoder$level() sc_recoder$total_codes() sc_recoder$visible() sc_recoder$order()  Create new recoder instance. automatically performed setup sc_data objects    x private environment sc_data object  Create new recoder instance. automatically performed setup sc_data objects    x private environment sc_data object   Change label field variable    field field code language language, \"de\" \"en\" new new label  Change label field variable    field field code language language, \"de\" \"en\" new new label   Change label measure variable    measure measure code language language \"de\" \"en\" new new label  Change label measure variable    measure measure code language language \"de\" \"en\" new new label   Change labels level    field field code level level code field language language \"de\" \"en\" new new label level  Change labels level    field field code level level code field language language \"de\" \"en\" new new label level   Cheange total code field    field field code new level code field NA. used new total code. case NA, total code unset.  Cheange total code field    field field code new level code field NA. used new total code. case NA, total code unset.   set visibility level. Invisible levels ommited output $tabulate() affect aggregation    field field code level level code field new visibility. TRUE FALSE  set visibility level. Invisible levels ommited output $tabulate() affect aggregation    field field code level level code field new visibility. TRUE FALSE   set order levels.    field field code new new order. permutation level codes field. alternatively, integer vector defines permutation.  set order levels.    field field code new new order. permutation level codes field. alternatively, integer vector defines permutation.","code":"sc_recoder$new(x) sc_recoder$new(x) sc_recoder$label_field(field, language, new) sc_recoder$label_field(field, language, new) sc_recoder$label_measure(measure, language, new) sc_recoder$label_measure(measure, language, new) sc_recoder$level(field, level, language, new) sc_recoder$level(field, level, language, new) sc_recoder$total_codes(field, new) sc_recoder$total_codes(field, new) sc_recoder$visible(field, level, new) sc_recoder$visible(field, level, new) sc_recoder$order(field, new) sc_recoder$order(field, new)"},{"path":"/reference/sc_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /schema endpoint — sc_schema","title":"Create a request against the /schema endpoint — sc_schema","text":"Invoke /schema endpoint STATcube REST API. case sc_schema_catalogue(), recurse datasets tables return nested list ids labels resources. sc_schema_db(), recurse valuesets return list resources available tor specific dataset. return values can displayed tree object.","code":""},{"path":"/reference/sc_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /schema endpoint — sc_schema","text":"","code":"sc_schema(   resource_id = NULL,   depth = NULL,   language = c(\"en\", \"de\"),   key = sc_key() )  # S3 method for sc_schema print(x, tree = NULL, ..., limit = 30)  sc_schema_catalogue(depth = \"folder\", language = c(\"en\", \"de\"), key = sc_key())  sc_schema_db(   db_id,   depth = \"valueset\",   language = c(\"en\", \"de\"),   key = sc_key() )"},{"path":"/reference/sc_schema.html","id":"pkg-arg-resource_id","dir":"Reference","previous_headings":"","what":"resource_id (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"resource_id resource identifier uid format","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-depth","dir":"Reference","previous_headings":"","what":"depth (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"depth provided, request recurse given level. datasets, available options NULL (recursion), \"folder\", \"field\" \"valueset\". catalogue, NULL \"folder\" applicable.","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-language","dir":"Reference","previous_headings":"","what":"language (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"language language used labeling. \"en\" \"de\"","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"x object printed","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-tree","dir":"Reference","previous_headings":"","what":"tree (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"tree wether use data.tree package printing.","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-limit, ...","dir":"Reference","previous_headings":"","what":"limit, ... (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"limit, ... passed data.tree::print.Node()","code":""},{"path":"/reference/sc_schema.html","id":"pkg-arg-db_id","dir":"Reference","previous_headings":"","what":"db_id (argument)","title":"Create a request against the /schema endpoint — sc_schema","text":"db_id database id","code":""},{"path":"/reference/sc_schema.html","id":"section-printing-with-data-tree","dir":"Reference","previous_headings":"","what":"Printing with data.tree","title":"Create a request against the /schema endpoint — sc_schema","text":"limit ... simply ignored tree set FALSE, default. printing via data.tree can take longer default implementation x need converted data.tree node. use data.tree printing permanently, use","code":"options(STATcubeR.print_tree = TRUE)"},{"path":"/reference/sc_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /table endpoint — sc_table","title":"Create a request against the /table endpoint — sc_table","text":"Send requests /table endpoint STATcube REST API. requests can use three formats corresponding functions sc_table() uses json file downloaded via STATcube GUI sc_table_custom() uses ids database, measures fields sc_table_saved() uses table uri saved table. three functions return object class \"sc_table\".","code":""},{"path":"/reference/sc_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /table endpoint — sc_table","text":"","code":"sc_table(   json_file,   language = c(\"en\", \"de\", \"both\"),   add_totals = TRUE,   key = sc_key() )  sc_examples_list()  sc_example(filename)  sc_table_custom(   db,   measures,   dimensions,   language = c(\"en\", \"de\"),   add_totals = TRUE,   key = sc_key() )  sc_table_saved_list()  sc_table_saved(table_uri, language = c(\"en\", \"de\"), key = sc_key())"},{"path":"/reference/sc_table.html","id":"pkg-arg-json_file","dir":"Reference","previous_headings":"","what":"json_file (argument)","title":"Create a request against the /table endpoint — sc_table","text":"json_file path json file, downloaded via STATcube GUI (\"Open Data API Abfrage\")","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-language","dir":"Reference","previous_headings":"","what":"language (argument)","title":"Create a request against the /table endpoint — sc_table","text":"language language used labeling. \"en\" \"de\". third option \"\" import languages sending two requests /table endpoint.","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-add_totals","dir":"Reference","previous_headings":"","what":"add_totals (argument)","title":"Create a request against the /table endpoint — sc_table","text":"add_totals totals added measure json request?","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-key","dir":"Reference","previous_headings":"","what":"key (argument)","title":"Create a request against the /table endpoint — sc_table","text":"key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-filename","dir":"Reference","previous_headings":"","what":"filename (argument)","title":"Create a request against the /table endpoint — sc_table","text":"filename name example json file.","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-db","dir":"Reference","previous_headings":"","what":"db (argument)","title":"Create a request against the /table endpoint — sc_table","text":"db uid database","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-measures","dir":"Reference","previous_headings":"","what":"measures (argument)","title":"Create a request against the /table endpoint — sc_table","text":"measures character vector uids measures. Can either type MEASURE type STAT_FUNCTION","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-dimensions","dir":"Reference","previous_headings":"","what":"dimensions (argument)","title":"Create a request against the /table endpoint — sc_table","text":"dimensions character vector dimensions cube. Can either type FIELD type VALUESET. entries referred fields parsed API response","code":""},{"path":"/reference/sc_table.html","id":"pkg-arg-table_uri","dir":"Reference","previous_headings":"","what":"table_uri (argument)","title":"Create a request against the /table endpoint — sc_table","text":"table_uri Identifier saved table returned sc_table_saved_list()","code":""},{"path":"/reference/sc_table.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a request against the /table endpoint — sc_table","text":"object class sc_table contains return value httr::POST() request obj$response. object also provides member functions parse response object. See sc_table_class class documentation.","code":""},{"path":"/reference/sc_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for /table responses — sc_table_class","title":"Class for /table responses — sc_table_class","text":"R6 Class responses /table endpoint STATcube REST API.","code":""},{"path":"/reference/sc_table_class.html","id":"section-super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for /table responses — sc_table_class","text":"STATcubeR::sc_data -> sc_table","code":""},{"path":"/reference/sc_table_class.html","id":"section-active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for /table responses — sc_table_class","text":"response httr response raw raw response content annotation_legend list annotations occuring data data.frame two columns annotation keys annotation labels. rate_limit much requests left POST request table sent? Uses format sc_rate_limit_table(). json object class sc_json based json file used request","code":""},{"path":"/reference/sc_table_class.html","id":"section-methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for /table responses — sc_table_class","text":"sc_table_class$new() sc_table_class$update() sc_table_class$tabulate() sc_table_class$browse() sc_table_class$add_language() STATcubeR::sc_data$field() STATcubeR::sc_data$total_codes() Ususally, objects class sc_table generated one factory methods sc_table(), sc_table_saved() sc_table_custom(). constructor invoked directly, either omit parameters json file make sure match response.    response response httr::POST() /table endpoint. json json file used request string. file file path json file  Ususally, objects class sc_table generated one factory methods sc_table(), sc_table_saved() sc_table_custom(). constructor invoked directly, either omit parameters json file make sure match response.    response response httr::POST() /table endpoint. json json file used request string. file file path json file   Update data re-sending json API. still experimental break object case new levels added one fields. example, new entry added timeseries   Update data re-sending json API. still experimental break object case new levels added one fields. example, new entry added timeseries    extension sc_tabulate() additional parameters.    ... Parameters passed sc_tabulate() round apply rounding measure accoring precision provided API. annotations Include separate annotation columns returned table. parameter currently broken needs re-implemented  extension sc_tabulate() additional parameters.    ... Parameters passed sc_tabulate() round apply rounding measure accoring precision provided API. annotations Include separate annotation columns returned table. parameter currently broken needs re-implemented   open dataset browser   open dataset browser    add second language dataset    language language add. \"en\" \"de\".  add second language dataset    language language add. \"en\" \"de\".","code":"sc_table_class$new(response, json = NULL, file = NULL) sc_table_class$new(response, json = NULL, file = NULL) sc_table_class$update() sc_table_class$update() sc_table_class$tabulate(..., round = TRUE, annotations = FALSE) sc_table_class$tabulate(..., round = TRUE, annotations = FALSE) sc_table_class$browse() sc_table_class$browse() sc_table_class$add_language(language = c(\"en\", \"de\")) sc_table_class$add_language(language = c(\"en\", \"de\"))"},{"path":"/reference/sc_tabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn sc_data objects into tidy data frames — sc_tabulate","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"sc_tabulate() extracts data table turns tidy data.frame. applies labeling data transforms time variables Date format satisfy certain STATcube Standards. sc_tabulate(table, ...) just alias table$tabulate(...) added rather complicated method can separate documentation page. recommended use table$tabulate() syntax ... argument decides measures /fields included output. measures given, measures included. true fields.","code":""},{"path":"/reference/sc_tabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"","code":"sc_tabulate(   table,   ...,   .list = NULL,   raw = FALSE,   parse_time = TRUE,   recode_zeros = inherits(table, \"sc_table\"),   language = NULL )"},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-table","dir":"Reference","previous_headings":"","what":"table (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"table object class sc_data","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"... Names measures /fields","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-.list","dir":"Reference","previous_headings":"","what":".list (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":".list allows define arguments ... character vector.","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-raw","dir":"Reference","previous_headings":"","what":"raw (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"raw FALSE (default), apply labeling dataset. Otherwise, return codes.","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-parse_time","dir":"Reference","previous_headings":"","what":"parse_time (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"parse_time time variables converted Date format? Ignored raw set TRUE.","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-recode_zeros","dir":"Reference","previous_headings":"","what":"recode_zeros (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"recode_zeros turn zero values NAs","code":""},{"path":"/reference/sc_tabulate.html","id":"pkg-arg-language","dir":"Reference","previous_headings":"","what":"language (argument)","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"language language used labelling. default, dataset language (table$language) used.","code":""},{"path":"/reference/sc_tabulate.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"Aggregation done follows First, columns priovide total code via table$total_codes() used filter column == total_code column != total_code , remaining data aggregated using rowsum() ellipsis (...) supports partial matching codes labels. See Examples objects class sc_table two additional operations performed. zeros recoded NAs rounding done according precision measure. Ronding happens recoding NA values","code":""},{"path":"/news/index.html","id":"statcuber-024","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.4","title":"STATcubeR 0.2.4","text":"add user-agent according vignette(\"api-packages\", \"httr\") check content types http status consistently document error handling ?sc_last_error new export: sc_last_error()","code":""},{"path":"/news/index.html","id":"statcuber-023","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.3","title":"STATcubeR 0.2.3","text":"Almost changes 0.2.2 0.2.3 included #13 cleanup function names faster parsing sc_table() remove dependencies rmarkdown rstudioapi improve caching REST API support sc_schema() sc_table_saved()","code":""},{"path":"/news/index.html","id":"documentation-updates","dir":"Changelog","previous_headings":"","what":"Documentation updates","title":"STATcubeR 0.2.3","text":"refactor pkgdown articles including old articles REST API modify readme showcase OGD, API base class update reference documentation reference index","code":""},{"path":"/news/index.html","id":"statcuber-022","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.2","title":"STATcubeR 0.2.2","text":"version finalizes #11 Common base class OGD data data REST API Improved print methods tibble Direct documentation certain R6 classes roxygen2 remove unnecessary exports","code":""},{"path":"/news/index.html","id":"statcuber-021","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.1","title":"STATcubeR 0.2.1","text":"remove dependency openssl avoid EOL warnings reading JSON requests start using NEWS.md reorganize README.md put open data front center","code":""},{"path":"/news/index.html","id":"open-data","dir":"Changelog","previous_headings":"","what":"Open Data","title":"STATcubeR 0.2.1","text":"STATcubeR now contains functions access open government data https://data.statistik.gv./ new class od_table get OGD data methods tabulate reponses caching four new pkgdown articles od_table(), od_list(), od_resource() sc_data","code":""},{"path":"/news/index.html","id":"statcuber-020","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.0","title":"STATcubeR 0.2.0","text":"Update contents sc_example() Use Date instead POSIXct time variables Cache $meta $field memory class sc_table Add caching","code":""},{"path":"/news/index.html","id":"statcuber-011","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.1.1","title":"STATcubeR 0.1.1","text":"Improve sc_example() Add sc_examples_list() get available examples add $browse() $edit() add language parameter sc_schema() pkgdown article custom tables (#6) update harmonize naming functions parameters","code":""}]
