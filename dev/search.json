[{"path":"https://statistikat.github.io/STATcubeR/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"The GNU General Public License, Version 2, June 1991 (GPLv2)","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"Terms And Conditions For Copying, Distribution And Modification","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"No Warranty","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_list.html","id":"interactive-overview","dir":"Articles","previous_headings":"","what":"Interactive overview","title":"Available Datasets","text":"Since metadata contained OGD JSON files available german, following overview uses german labels. Click individual table cells get information.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_list.html","id":"cli-usage","dir":"Articles","previous_headings":"","what":"CLI usage","title":"Available Datasets","text":"get simplified viersion summary, use od_list() function. uses webscraping techniques get dataset ids german labels based contents https://data.statistik.gv./web/catalog.jsp.","code":"all_datasets <- od_list() all_datasets # A data frame: 315 × 3    category    id                              label                                <chr>       <chr>                           <chr>                              1 Arbeit      OGD_konjunkturmonitor_KonMon_1  Konjunkturmonitor                  2 Arbeit      OGD_veste309_Veste309_1         Verdienststrukturerhebung 2018 B…  3 Arbeit      OGD_veste307_Veste307_1         Verdienststrukturerhebung 2018 B…  4 Arbeit      OGD_veste305_Veste305_1         Verdienststrukturerhebung 2018 B…  5 Arbeit      OGD_veste303_Veste203_1         Verdienststrukturerhebung 2018 B…  6 Arbeit      OGD_veste301_Veste301_1         Verdienststrukturerhebung 2018 n…  7 Arbeit      OGD_aeapp_biber_abschl_ext_BIB… BibEr Monitoring 2021 - Bildungs…  8 Arbeit      OGD_aest_erv_statw_haupt_ERV_S… Erwerbsverläufe - Statuswechsel …  9 Bevölkerung OGD_gestorbenesaeuglinge_ext_G… Gestorbene Säuglinge              10 Bevölkerung OGD_gestorbene_ext_ohmed_GES_1  Gestorbene                        # … with 305 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_list.html","id":"overview-via-json","dir":"Articles","previous_headings":"","what":"Overview via json","title":"Available Datasets","text":"identify interesting dataset, consider downloading metadata json get details. json contains links metadata including link data.statistik.gv.. json can also used programatically get details ommited print() output.","code":"(id <- all_datasets$id[2]) ## [1] \"OGD_veste309_Veste309_1\" json <- od_json(id) json ## Verdienststrukturerhebung 2018 Bruttostundenverdienste in EUR nach ## Staatsangehörigkeit, Bundesland und Beschäftigungsverhältnis  ##  ## Verdienststruktur nach Geschlecht, Staatsangehörigkeit, Bundesland und ## Beschäftigungsverhältnis ##  ## Measures:   Arithmetisches Mittel, 1. Quartil, 2. Quartil (Median), 3. Quartil, ##             Zahl d unselbst Beschäftigten  ## Fields:     Geschlecht, Staatsangehörigkeit, Bundesland (NUTS 2), Form des ##             Beschäftigungsverhältnisses  ## Updated:    2022-03-24 11:29:48  ## Tags:       Staatsangehörigkeit, Bundesland, Beschäftigungsverhältnis  ## Categories: Arbeit, Bevölkerung  ##  ## https://data.statistik.gv.at/web/meta.jsp?dataset=OGD_veste309_Veste309_1 ## https://statcube.at/statcube/opendatabase?id=deveste309 ## http://www.statistik.at/web_de/dokumentationen/Soziales/index.html ## http://www.statistik.at/web_en/documentations/people_and_society/social_statistics/index.html json$extras$update_frequency ## [1] \"nicht geplant\""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_list.html","id":"showcase","dir":"Articles","previous_headings":"","what":"Showcase","title":"Available Datasets","text":"Population Hospitalizations Earnings Household forecast Gross regional product population dataset measures austrian population 2115 different regions. hospitalizations dataset timeseries 2009 2019 115 different medical procedures. structure earnings dataset showcases average earnings four different classifications. See tabulation article usage examples dataset. household forecast contains predictions number private households 4 household characteristics 2011 2080. GRP dataset contains GRP NUTS-3 regions 2000 2019.","code":"od_table(\"OGD_bevstandjbab2002_BevStand_2020\")$tabulate() # A STATcubeR tibble: 392,144 x 5    `Time section` Sex   `Commune (aggregation by poli… `Age in single ye… Number  * <date>         <fct> <fct>                          <fct>               <int>  1 2020-01-01     male  Eisenstadt <10101>             under 1 year old       77  2 2020-01-01     male  Eisenstadt <10101>             1 year old             75  3 2020-01-01     male  Eisenstadt <10101>             2 years old            70  4 2020-01-01     male  Eisenstadt <10101>             3 years old            83  5 2020-01-01     male  Eisenstadt <10101>             4 years old            67  6 2020-01-01     male  Eisenstadt <10101>             5 years old            56  7 2020-01-01     male  Eisenstadt <10101>             6 years old            75  8 2020-01-01     male  Eisenstadt <10101>             7 years old            73  9 2020-01-01     male  Eisenstadt <10101>             8 years old            74 10 2020-01-01     male  Eisenstadt <10101>             9 years old            86 # … with 392,134 more rows od_table(\"OGD_krankenbewegungen_ex_LEISTUNGEN_1\")$tabulate() # A STATcubeR tibble: 91,898 x 6    `Year of discharge` Sex   `Age (four classes)` `NUTS-2 region (place of resi…  * <date>              <fct> <fct>                <fct>                           1 2009-01-01          male  Up to 14 years old   Non-Austria                     2 2009-01-01          male  Up to 14 years old   Non-Austria                     3 2009-01-01          male  Up to 14 years old   Non-Austria                     4 2009-01-01          male  Up to 14 years old   Non-Austria                     5 2009-01-01          male  Up to 14 years old   Non-Austria                     6 2009-01-01          male  Up to 14 years old   Non-Austria                     7 2009-01-01          male  Up to 14 years old   Non-Austria                     8 2009-01-01          male  Up to 14 years old   Non-Austria                     9 2009-01-01          male  Up to 14 years old   Non-Austria                    10 2009-01-01          male  Up to 14 years old   Non-Austria                    # … with 91,888 more rows, and 2 more variables: #   Medical procedures - subchapters <fct>, Medical procedures <int> od_table(\"OGD_veste309_Veste309_1\")$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                  * <fct>     <fct>       <fct>              <fct>                                 1 Sum total Total       Total              \"Total\"                               2 Sum total Total       Total              \"Standard employment \"                3 Sum total Total       Total              \"Non-standard employment (total)\"     4 Sum total Total       Total              \"Non-standard employment: part-time…  5 Sum total Total       Total              \"Non-standard employment: fixed-ter…  6 Sum total Total       Total              \"Non-standard employment: marginal …  7 Sum total Total       Total              \"Non-standard employment: temporary…  8 Sum total Total       AT11 Burgenland    \"Total\"                               9 Sum total Total       AT12 Lower Austria \"Total\"                              10 Sum total Total       AT13 Vienna        \"Total\"                              # … with 62 more rows, and 5 more variables: Arithmetic mean <dbl>, #   1st quartile <dbl>, 2nd quartile (median) <dbl>, 3rd quartile <dbl>, #   Number of employees <dbl> od_table(\"OGD_f1741_HH_Proj_2\")$tabulate() # A STATcubeR tibble: 17,640 x 7    `Alter des Haushalts… Time       `Province (NUTS 2-Ei… `Type of household  <…  * <fct>                 <date>     <fct>                 <fct>                   1 15 to 24 years old    2011-01-01 Burgenland <AT11>     One-person household    2 15 to 24 years old    2011-01-01 Burgenland <AT11>     One-person household    3 15 to 24 years old    2011-01-01 Burgenland <AT11>     Multi-person household  4 15 to 24 years old    2011-01-01 Burgenland <AT11>     Multi-person household  5 15 to 24 years old    2011-01-01 Carinthia <AT21>      One-person household    6 15 to 24 years old    2011-01-01 Carinthia <AT21>      One-person household    7 15 to 24 years old    2011-01-01 Carinthia <AT21>      Multi-person household  8 15 to 24 years old    2011-01-01 Carinthia <AT21>      Multi-person household  9 15 to 24 years old    2011-01-01 Lower Austria <AT12>  One-person household   10 15 to 24 years old    2011-01-01 Lower Austria <AT12>  One-person household   # … with 17,630 more rows, and 3 more variables: #   Sex of household reference person <2> <fct>, #   Private households at the end of the year <int>, #   Annual average of private households <int> od_table(\"OGD_vgrrgr104_RGR104_1\")$tabulate() # A STATcubeR tibble: 964 x 6    Time       `NUTS-3`                        `Gross regional … `Gross regional…  * <date>     <fct>                                       <dbl>            <dbl>  1 2000-01-01 Mittelburgenland <AT111>                      597            15700  2 2000-01-01 Nordburgenland <AT112>                       2641            19200  3 2000-01-01 Südburgenland <AT113>                        1559            15500  4 2000-01-01 Mostviertel-Eisenwurzen <AT121>              4778            20400  5 2000-01-01 Niederösterreich-Süd <AT122>                 4714            19000  6 2000-01-01 Sankt Pölten <AT123>                         3647            26000  7 2000-01-01 Waldviertel <AT124>                          3947            16700  8 2000-01-01 Weinviertel <AT125>                          1722            13300  9 2000-01-01 Wiener Umland-Nordteil <AT126>               4841            18900 10 2000-01-01 Wiener Umland-Südteil <AT127>                9886            33800 # … with 954 more rows, and 2 more variables: #   Gross regional product per person employed <dbl>, #   Change in % to previous year prices <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"File Management","text":"default, STATcubeR caches accessed resources data.statistik.gv.temporary directory current R session. Let’s examine example happens data structure earnings suvey (SES) requested. First STATcubeR grab json metadata dataset https://data.statistik.gv./ogd/json?dataset=OGD_veste309_Veste309_1 check resources belong . resource, attributes name last_modified extracted json. also included od_table object $resources. last_modified tells us resource changed fileserver. resource exist cache last modified entry json newer cached file, dowloaded server. Otherwise, cached version reused.","code":"od_cache_dir() ## [1] \"/tmp/Rtmp31XMUp/STATcubeR/open_data/\" earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$resources # A data frame: 7 × 6   name                             last_modified       cached               size   <fct>                            <dttm>              <dttm>              <dbl> 1 OGD_veste309_Veste309_1.json     2022-03-24 11:29:48 2022-08-27 16:39:56  4062 2 OGD_veste309_Veste309_1.csv      2022-03-24 11:29:48 2022-08-27 16:39:56  4931 3 OGD_veste309_Veste309_1_HEADER.… 2022-03-24 11:29:48 2022-08-27 16:39:56   516 4 OGD_veste309_Veste309_1_C-A11-0… 2022-03-24 11:29:48 2022-08-27 16:39:56   159 5 OGD_veste309_Veste309_1_C-STAAT… 2022-03-24 11:29:48 2022-08-27 16:39:56   697 6 OGD_veste309_Veste309_1_C-VEBDL… 2022-03-24 11:29:48 2022-08-27 16:39:56   518 7 OGD_veste309_Veste309_1_C-BESCH… 2022-03-24 11:29:48 2022-08-27 16:39:56   641 # … with 2 more variables: download <dbl>, parsed <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"access-and-updates","dir":"Articles","previous_headings":"","what":"Access and Updates","title":"File Management","text":"Cached files can acessed od_cache_file(). specified file exists cache, path file returned. Otherwise, file downloaded cache path returned. files use naming conventions open data fileserver. read files cache data.frames, use od_resource() parameters od_cache_file(). apply special parser dataset drops unneeded columns normalizes column names. parser behaves differently header files, data files fields. Json files can acessed od_json().","code":"od_cache_file(\"OGD_veste309_Veste309_1\") ## [1] \"/tmp/Rtmp31XMUp/STATcubeR/open_data/OGD_veste309_Veste309_1.csv\" od_cache_file(\"OGD_veste309_Veste309_1\", \"C-A11-0\") ## [1] \"/tmp/Rtmp31XMUp/STATcubeR/open_data/OGD_veste309_Veste309_1_C-A11-0.csv\" od_resource(\"OGD_veste309_Veste309_1\", \"C-A11-0\") # A data frame: 3 × 5   code  label label_de  label_en  parent * <chr> <chr> <chr>     <chr>     <fct>  1 A11-1 NA    insgesamt Sum total NA     2 A11-2 NA    männlich  Male      NA     3 A11-3 NA    weiblich  Female    NA json <- od_json(\"OGD_veste309_Veste309_1\") unlist(json$tags) ## [1] \"Staatsangehörigkeit\"      \"Bundesland\"               ## [3] \"Beschäftigungsverhältnis\""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"clearing-and-changing","dir":"Articles","previous_headings":"","what":"Clearing and Changing","title":"File Management","text":"od_cache_clear(id) can used clear cache files belonging passed dataset id. saw earnings$resources contains 7 rows, therefore 7 files deleted cleanup. want use persistent directory like ~/.cache/STATcubeR/open_data/ caching, directory can changed od_cache_dir(new).","code":"od_cache_clear(\"OGD_veste309_Veste309_1\") ## deleted 7 files from '/tmp/Rtmp31XMUp/STATcubeR/open_data/' od_cache_dir(\"~/.cache/STATcubeR/open_data/\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"the-resources-field","dir":"Articles","previous_headings":"","what":"The resources field","title":"File Management","text":"Let’s go back $resources field earnings. already looked name last_modified. remaining columns can interpreted follows cached tells us last time cache file resource modified. size file size bytes download contains amount milliseconds used retrieve resource last updated. parsed reports amount milliseconds took od_resource() convert file contents data.frame() format. json file, parsing time always reported NA.","code":"earnings$resources # A data frame: 7 × 6   name                             last_modified       cached               size   <fct>                            <dttm>              <dttm>              <dbl> 1 OGD_veste309_Veste309_1.json     2022-03-24 11:29:48 2022-08-27 16:39:56  4062 2 OGD_veste309_Veste309_1.csv      2022-03-24 11:29:48 2022-08-27 16:39:56  4931 3 OGD_veste309_Veste309_1_HEADER.… 2022-03-24 11:29:48 2022-08-27 16:39:56   516 4 OGD_veste309_Veste309_1_C-A11-0… 2022-03-24 11:29:48 2022-08-27 16:39:56   159 5 OGD_veste309_Veste309_1_C-STAAT… 2022-03-24 11:29:48 2022-08-27 16:39:56   697 6 OGD_veste309_Veste309_1_C-VEBDL… 2022-03-24 11:29:48 2022-08-27 16:39:56   518 7 OGD_veste309_Veste309_1_C-BESCH… 2022-03-24 11:29:48 2022-08-27 16:39:56   641 # … with 2 more variables: download <dbl>, parsed <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"whats-in-the-cache","dir":"Articles","previous_headings":"","what":"What’s in the cache?","title":"File Management","text":"od_cache_summary() give overview files available cache directory. returned table contains one row every dataset. column updated contains last modified date datasets json file. json, data header give file sizes bytes corresponding files. fields total size fields n_fields number classification files available. can get clear picture much disk space used dataset. Note od_cache_summary() gathers information local file system based filenames, file.mtime() file.size().","code":"od_cache_summary() # A data frame: 273 × 7    id                             updated              json   data header fields    <chr>                          <dttm>              <dbl>  <dbl>  <dbl>  <dbl>  1 OGD__steuer_lst_ab_2015_3_LSt… 2021-08-13 00:53:09  6528  83665   4259   1695  2 OGD__steuer_lst_ab_2015_6_LSt… 2021-08-13 00:53:09  6208 305349   4297   2653  3 OGD__steuer_lst_ab_2017_3_LSt… 2021-08-13 00:53:09  6513  42023   4259   1676  4 OGD__steuer_lst_ab_2017_6_LSt… 2021-08-13 00:53:09  6193 153282   4297   2634  5 OGD__steuer_lue_2015_1a_LuE_a… 2021-11-13 06:38:21  4862 269849   2263   3436  6 OGD_1531kn2_Aussenhandel_4     2021-08-13 00:53:09  3089 106427    277   9435  7 OGD_aeapp_biber_abschl_ext_BI… 2022-01-26 04:24:58  5059  39639    407   1612  8 OGD_aest_erv_statw_haupt_ERV_… 2022-05-14 22:01:44  6237  97051    476   1736  9 OGD_ahlgrhs_Aussenhandel_2     2021-08-13 00:53:09  3318  13886    270   1276 10 OGD_ahlgrhs_Aussenhandel_3     2021-08-13 00:53:09  2974  28513    225   7681 # … with 263 more rows, and 1 more variable: n_fields <int>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_resources.html","id":"download-history","dir":"Articles","previous_headings":"","what":"Download history","title":"File Management","text":"get history files downloaded server, use od_downloads(). file, timestamp download recorded well download time milliseconds.","code":"od_downloads() # A data frame: 7 × 3   time                file                                   downloaded * <dttm>              <fct>                                       <dbl> 1 2022-08-27 16:39:56 OGD_veste309_Veste309_1_C-BESCHV-0.csv      13.5  2 2022-08-27 16:39:56 OGD_veste309_Veste309_1_C-VEBDL-0.csv       10.2  3 2022-08-27 16:39:56 OGD_veste309_Veste309_1_C-STAATS-0.csv      11.9  4 2022-08-27 16:39:56 OGD_veste309_Veste309_1_C-A11-0.csv         10.4  5 2022-08-27 16:39:56 OGD_veste309_Veste309_1_HEADER.csv           9.42 6 2022-08-27 16:39:56 OGD_veste309_Veste309_1.csv                 10.9  7 2022-08-27 16:39:56 OGD_veste309_Veste309_1.json                73.3"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Open Government Data","text":"import dataset, provide dataset id argument. returned object class od_table. provides overview dataset via print() method.","code":"table <- od_table(\"OGD_krebs_ext_KREBS_1\") table ## An object of class od_table ##  ## Dataset     Cancer statistics by reporting year, province of residence and ##             localisation of cancer  ## Measures    Number of records F-KRE  ## Fields      Tumore ICD/10 3-Steller, Reporting year, Province of residence, Sex  ##  ## Request     2022-08-27 16:40:01  ## STATcubeR   0.3.4.4"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Open Government Data","text":"Information OGD_krebs_ext_KREBS_1_HEADER.csv can obtained via $header. Additional metadata can obtained via $meta. See STATcubeR data article details.","code":"table$header # STATcubeR metadata: 5 x 4   code               label label_de                    label_en                  <chr>              <chr> <chr>                       <chr>                   1 F-KRE              NA    Anzahl der Datensätze F-KRE Number of records F-KRE 2 C-TUM_ICD10_3ST-0  NA    Tumore ICD/10 3-Steller     NA                      3 C-BERJ-0           NA    Berichtsjahr                Reporting year          4 C-BUNDESLAND-0     NA    Bundesland                  Province of residence   5 C-KRE_GESCHLECHT-0 NA    Geschlecht                  Sex"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"field-infos","dir":"Articles","previous_headings":"Metadata","what":"Field infos","title":"Open Government Data","text":"method table$field() can used get information specific fields. Thise contain data {dataset_id}_{field_code}.csv. Unlike metadata sc_table, od_table class always contains german english labels. can used label dataset. Tumor type Year Province Sex https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-TUM_ICD10_3ST-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-BERJ-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-BUNDESLAND-0.csv https://data.statistik.gv./data/OGD_krebs_ext_KREBS_1_C-KRE_GESCHLECHT-0.csv","code":"table$field(\"C-TUM_ICD10_3ST-0\") # STATcubeR metadata: 95 x 8   code              label                                                          <chr>             <chr>                                                        1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe                         2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes                 3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht näher bezeic… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches                 5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens                    # … with 90 more rows, and 1 more variable: parsed <chr> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' table$field(\"C-BERJ-0\") # STATcubeR metadata: 37 x 8   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # … with 32 more rows # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' table$field(\"C-BUNDESLAND-0\") # STATcubeR metadata: 9 x 8   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      # … with 4 more rows # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' table$field(\"C-KRE_GESCHLECHT-0\") # STATcubeR metadata: 2 x 8   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"table-contents","dir":"Articles","previous_headings":"","what":"Table Contents","title":"Open Government Data","text":"get actual microdata OGD_krebs_ext_KREBS_1.csv, use table$data. output similar returned read.csv2(\"OGD_krebs_ext_KREBS_1.csv\"). od_table() makes sure levels factor columns order metadata. want use labels rather codes, labelled version data can obtained via table$tabulate(). labelling done mapping codes english names using previsously mentioned metadata. Time variables converted <date> format satisfy certain STATcube standards. can read $tabulate() tabulation article.","code":"table$data # A STATcubeR tibble: 46,479 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # … with 46,474 more rows levels(table$data$`C-BUNDESLAND-0`) == table$field(\"C-BUNDESLAND-0\")$code ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE table$tabulate() # A STATcubeR tibble: 46,479 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of res… Sex    * <fct>                                <date>           <fct>             <fct>  1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"     male   2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       male   3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       female 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   male   5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   female # … with 46,474 more rows, and 1 more variable: Number of records F-KRE <int>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"sauerkraut","dir":"Articles","previous_headings":"","what":"A Trip to Germany","title":"Open Government Data","text":"possible switch language used labelling dataset using $language field. field can used get set language. Allowed options \"en\" english \"de\" german. option affects print() method well output $data. english labels available, german labels used fallback mechanism.","code":"table$language ## [1] \"en\" table$language <- \"de\" table ## An object of class od_table ##  ## Dataset     Krebsstatistik  ## Measures    Anzahl der Datensätze F-KRE  ## Fields      Tumore ICD/10 3-Steller, Berichtsjahr, Bundesland, Geschlecht  ##  ## Request     2022-08-27 16:40:01  ## STATcubeR   0.3.4.4 table$tabulate() # A STATcubeR tibble: 46,479 x 5   `Tumore ICD/10 3-Steller`            Berichtsjahr Bundesland       Geschlecht * <fct>                                <date>       <fct>            <fct>      1 <C00> Bösartige Neubildung der Lippe 1983-01-01   Burgenland       männlich   2 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          männlich   3 <C00> Bösartige Neubildung der Lippe 1983-01-01   Kärnten          weiblich   4 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich männlich   5 <C00> Bösartige Neubildung der Lippe 1983-01-01   Niederösterreich weiblich   # … with 46,474 more rows, and 1 more variable: #   Anzahl der Datensätze F-KRE <int>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/od_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Open Government Data","text":"See available datasets article list datasets compatible od_table(). Open data datasets often contain large amount rows. Check tabulation article see can summarized compact form. STATcubeR caches files requested server hood. caching article explains caches stored.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"constructing-sc_data-objects","dir":"Articles","previous_headings":"","what":"Constructing sc_data objects","title":"The STATcubeR Data Class","text":"sc_data class exported STATcubeR. Therefore, objects class created one following functions od_table() obtains data OGD portal. See OGD article sc_table_saved() sc_table_custom() also use /table endpoint. However, request specified via ids rather json file. illustrate, use one OGD datasets showcase functionalities class. Notice however, objects created sc_table() can used interchangibly.","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"The STATcubeR Data Class","text":"data table can extracted using active binding $data. Notice OGD_krebs_ext_KREBS_1 includes codes possibly totals. data always provided long format one column field one column measure. explained labeled data can obtained Tabulation section.","code":"x$data # A STATcubeR tibble: 46,479 x 5   `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-0` `F-KRE` * <fct>               <fct>      <fct>            <fct>                  <int> 1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1               2 2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1               8 3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2               2 4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1               6 5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2               2 # … with 46,474 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"The STATcubeR Data Class","text":"Metadata sc_data object includes labels information relevant correctly parse raw data. active binding $meta contains least entries $source, $measures $fields.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"source","dir":"Articles","previous_headings":"Metadata","what":"Source","title":"The STATcubeR Data Class","text":"source field contains information data source. important entries code label. bottom, see additional information source available, namely label_en, label_de, etc. additional metadata entries might available sc_table objects.","code":"x$meta$source # STATcubeR metadata: 1 x 7   code                  label                                              lang    <chr>                 <chr>                                              <chr> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, province of … en    # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"measures","dir":"Articles","previous_headings":"Metadata","what":"Measures","title":"The STATcubeR Data Class","text":"part metadata data.frame one row measure. contains codes labels well number NAs found $data particular column.","code":"x$meta$measures # STATcubeR metadata: 1 x 5   code  label                     NAs   <chr> <chr>                   <int> 1 F-KRE Number of records F-KRE     0 # … with 2 more columns: 'label_de', 'label_en'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"fields","dir":"Articles","previous_headings":"Metadata","what":"Fields","title":"The STATcubeR Data Class","text":"fields entry summarizes classification fields .e. categorical variables. includes codes labels well total code registered particular field.","code":"x$meta$fields # STATcubeR metadata: 4 x 7   code               label                   total_code   <chr>              <chr>                   <chr>      1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA         2 C-BERJ-0           Reporting year          NA         3 C-BUNDESLAND-0     Province of residence   NA         4 C-KRE_GESCHLECHT-0 Sex                     NA         # … with 4 more columns: 'label_de', 'label_en', 'nitems', 'type'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"field-information","dir":"Articles","previous_headings":"","what":"Field information","title":"The STATcubeR Data Class","text":"get info specific fields, use $field() method. return classification elements data.frame.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"section","dir":"Articles","previous_headings":"","what":"The STATcubeR Data Class","title":"The STATcubeR Data Class","text":"Tumor types Year Province Sex","code":"x$field(\"Tumore\") # STATcubeR metadata: 95 x 8   code              label                                                          <chr>             <chr>                                                        1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubildung der Lippe                         2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubildung des Zungengrundes                 3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubildung sonstiger und nicht näher bezeic… 4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubildung des Zahnfleisches                 5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubildung des Mundbodens                    # … with 90 more rows, and 1 more variable: parsed <chr> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' x$field(\"Reporting year\") # STATcubeR metadata: 37 x 8   code      label parsed       <chr>     <chr> <date>     1 BERJ-1983 1983  1983-01-01 2 BERJ-1984 1984  1984-01-01 3 BERJ-1985 1985  1985-01-01 4 BERJ-1986 1986  1986-01-01 5 BERJ-1987 1987  1987-01-01 # … with 32 more rows # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' x$field(\"Province\") # STATcubeR metadata: 9 x 8   code         label           parsed            <chr>        <chr>           <chr>           1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      6 BUNDESLAND-6 \"Styria\"        \"Styria\"        7 BUNDESLAND-7 \"Tyrol\"         \"Tyrol\"         8 BUNDESLAND-8 \"Vorarlberg\"    \"Vorarlberg\"    9 BUNDESLAND-9 \"Vienna\"        \"Vienna\"        # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' x$field(\"Sex\") # STATcubeR metadata: 2 x 8   code         label  parsed   <chr>        <chr>  <chr>  1 GESCHLECHT-1 male   male   2 GESCHLECHT-2 female female # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_data.html","id":"tabulation","dir":"Articles","previous_headings":"","what":"Tabulation","title":"The STATcubeR Data Class","text":"method $tabulate() can used turn sc_table objects tidy data.frames. See tabulation article defails.","code":"x$tabulate() # A STATcubeR tibble: 46,479 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of res… Sex    * <fct>                                <date>           <fct>             <fct>  1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"     male   2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       male   3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       female 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   male   5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   female # … with 46,474 more rows, and 1 more variable: Number of records F-KRE <int>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_key.html","id":"adding-an-api-key","dir":"Articles","previous_headings":"","what":"Adding an API key","title":"Setup the API Key","text":"order use REST API STATcube necessary provide API key. means need subscription STATcube. Subscribed users automatically get access STATcube API. API key can displayed preferences menu STATcube make key available STATcubeR, use function sc_key_set(). Replace \"XXXX\" key. suggested code output, key used API requests happen R session. can set persistently modifying .Renviron. can done easily usethis::edit_r_environ(). default, sc_key_set() perform test request verify key valid throw error test request unsuccessfull.","code":"http://sdbext:8081/statistik.at/ext/statcube/jsf/preferences/editPreferences.xhtml sc_key_set(\"XXXX\") #> The provided key will be available for this R session. Add #> #>   STATCUBE_KEY=XXXX #> #> to your .Renviron to set the key persistently sc_key_set('wrong key') #> Error in sc_key_set(\"wrong key\") : The key could not be verified"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_key.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Setup the API Key","text":"See JSON requests article see tables can defined STATcube GUI imported R. Alternatively, import saved table following saved tables article. advanced usage STATcubeR, see schema article custom tables article","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_key.html","id":"a-note-for-employees-of-statistics-austria","dir":"Articles","previous_headings":"","what":"A note for employees of statistics austria","title":"Setup the API Key","text":"employees can log external STATcube server using statportal credentials use API like user subscrption. Additionaly, internal STATcube servers can used STATcubeR. Please refer following internal confluence documentation details: https://confluence.com/xkakjff","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"browsing-the-catalogue","dir":"Articles","previous_headings":"","what":"Browsing the Catalogue","title":"Metadata with the Schema Endpoint","text":"first function shows catalogue, lists available databases tree form. tree structure determined API closely resembles “Katalog” view GUI. see catalog 8 child nodes: Four childs type FOLDER four childs type TABLE. folders include folders root level GUI: “Statistics”, “Publication Services” well “Examples”.  get access child nodes use my_catalogue${child_label} child node Statistics also class sc_schema shows entries subfolder. syntax can used navigate folders. cases, API shows folders GUI case folders API empty.","code":"my_catalogue <- sc_schema_catalogue() my_catalogue FOLDER: Extern V9 # A data frame: 9 × 2   child                     type     <chr>                     <chr>  1 Examples                  FOLDER 2 Publications and services FOLDER 3 Default Tables            FOLDER 4 Statistics                FOLDER 5 Bier auf Wein             TABLE  6 hierarchical              TABLE  7 neu                       TABLE  8 lebenserwartung           TABLE  9 test123                   TABLE my_catalogue$Statistics FOLDER: Statistics # A data frame: 20 × 2   child               type     <chr>               <chr>  1 Labour Market       FOLDER 2 Foreign Trade       FOLDER 3 Population          FOLDER 4 Education, Culture  FOLDER 5 Energy, Environment FOLDER # … with 15 more rows my_catalogue$`Default Tables` FOLDER: Default Tables"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"databases-and-tables","dir":"Articles","previous_headings":"","what":"Databases and Tables","title":"Metadata with the Schema Endpoint","text":"Inside catalogue, leafs tree mostly type DATABASE TABLE. example TABLE node. suggested output, tables can used /table endpoint via sc_table_saved(). See saved tables article details. example DATABASE node.","code":"my_catalogue$Statistics$`Labour Market`$`Standardtabelle / Default table (defaulttable_deake005)` TABLE: Standardtabelle / Default table (defaulttable_deake005) Get the data with `sc_table_saved('str:table:defaulttable_deake005')` my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)` DATABASE: Working hours (Labour Force Survey) # Get more info with `sc_schema_db('str:database:deake005')`"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"database-infos","dir":"Articles","previous_headings":"","what":"Database infos","title":"Metadata with the Schema Endpoint","text":"get information specific database, can pass database id sc_schema_db(). , contents tree structure similar sidebar “Tabellenansicht” view. my_db_info can used similar fashion my_catalogue obtain details resources tree. example, VALUESET label “Gender” can viewed like . leafs database schemas mostly type VALUE MEASURE.","code":"my_db_info <- sc_schema_db(\"deake005\") my_db_info DATABASE: Working hours (Labour Force Survey) # A data frame: 8 × 2   child                       type    <chr>                       <chr> 1 Factors                     GROUP 2 Datensätze/Records          GROUP 3 Time (mandatory field)      GROUP 4 Demographic Characteristics GROUP 5 Employment Characteristics  GROUP # … with 3 more rows my_db_info$`Demographic Characteristics` GROUP: Demographic Characteristics # A data frame: 8 × 2   child                                                         type    <chr>                                                         <chr> 1 Gender                                                        FIELD 2 Age in years-groups                                           FIELD 3 Highest level of training completed (national classification) FIELD 4 Highest level of training completed (ISCED 97)                FIELD 5 Highest level of training completed (ISCED 2011)              FIELD # … with 3 more rows my_db_info$`Demographic Characteristics`$Gender$Gender VALUESET: Gender # A data frame: 3 × 2   child                type    <chr>                <chr> 1 male                 VALUE 2 female               VALUE 3 Not classifiable <0> VALUE my_db_info$`Demographic Characteristics`$Gender$Gender$male VALUE: male"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"data-structure-od-sc_schema-objects","dir":"Articles","previous_headings":"","what":"Data structure od sc_schema objects","title":"Metadata with the Schema Endpoint","text":"shown , sc_schema objets tree like structure. sc_schema object id, label, location type last four entries Schema objects can arbitrary amount childs. Childs always type sc_schema. x$type determines type schema object. See SuperSTAR API documentation complete list schema types.","code":"str(tail(my_db_info$`Demographic Characteristics`, 4)) ## List of 4 ##  $ id      : chr \"str:group:deake005:X_B1\" ##  $ label   : chr \"Demographic Characteristics\" ##  $ location: chr \"http://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1/schema/str:group:deake005:X_B1\" ##  $ type    : chr \"GROUP\" str(tail(my_catalogue$Statistics, 4)) ## List of 4 ##  $ id      : chr \"str:folder:festat\" ##  $ label   : chr \"Statistics\" ##  $ location: chr \"http://statcubeapi.statistik.at/statistik.at/ext/statcube/rest/v1/schema/str:folder:festat\" ##  $ type    : chr \"FOLDER\""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"other-resources","dir":"Articles","previous_headings":"","what":"Other resources","title":"Metadata with the Schema Endpoint","text":"Information resources databases catalogue can obtained passing resource id sc_schema(). Note tree returned depth 1, .e. child nodes measures available group_info. However, ids child nodes can obtained $id. ids can used send another request /schema endpoint Alternatively, use depth parameter sc_schema.","code":"my_db_info$Factors$id ## [1] \"str:group:deake005:M_F1\" group_info <- sc_schema(my_db_info$Factors$id) group_info GROUP: Factors # A data frame: 9 × 2   child                                                              type      <chr>                                                              <chr>   1 Average hours actually worked per week                             MEASURE 2 Average hours usually worked per week                              MEASURE 3 Volume of hours worked in the main job per year in million hours   MEASURE 4 Volume of hours worked overtime (paid) per year in million hours   MEASURE 5 Volume of hours worked overtime (unpaid) per year in million hours MEASURE # … with 4 more rows group_info$`Average hours usually worked per week`$id ## [1] \"str:measure:deake005:F-DATA:F-FAKTOR2\" group_info <- sc_schema(my_db_info$Factors$id, depth = \"valueset\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_schema.html","id":"printing-with-data-tree","dir":"Articles","previous_headings":"","what":"Printing with data.tree","title":"Metadata with the Schema Endpoint","text":"data.tree package installed, can used alternative print mehtod. data.tree implementation can set default options()","code":"print(my_catalogue, tree = TRUE) ##                                                                         levelName ## 1  Extern V9                                                                      ## 2   ¦--Examples                                                                   ## 3   ¦   ¦--Communes (Demo)                                                        ## 4   ¦   ¦--People                                                                 ## 5   ¦   ¦--People multilingual                                                    ## 6   ¦   ¦--Retail Banking ML en                                                   ## 7   ¦   ¦--Monitoring                                                             ## 8   ¦   ¦--Standardtabelle / Default table (defaulttable_depeopleml)              ## 9   ¦   ¦--Standardtabelle / Default table (defaulttable_dedemo)                  ## 10  ¦   ¦--E-A_nach_Bundeslaendern_dedemo                                         ## 11  ¦   °--Jahre_nach_NUTS_dedemo                                                 ## 12  ¦--Publications and services                                                  ## 13  ¦   ¦--Economic Trend Monitor                                                 ## 14  ¦   ¦   ¦--Economic Trend Monitor                                             ## 15  ¦   ¦   °--Standardtabelle / Default table (defaulttable_dekonjunkturmonitor) ## 16  ¦   °--Austrian Economic Atlas                                                ## 17  ¦       ¦--01 Key data Austria and European Union                             ## 18  ¦       ¦--02 Key data Federal provinces                                      ## 19  ¦       ¦--03 Key data on economic branches                                   ## 20  ¦       ¦--04 Key data on economic branches by enterprise size classes        ## 21  ¦       ¦--05 Key data on economic branches compared with the EU              ## 22  ¦       ¦--06 Key data on economic branches by federal provinces              ## 23  ¦       ¦--07 Key data industry                                               ## 24  ¦       ¦--08 Key data construction                                           ## 25  ¦       ¦--09 Key data trade                                                  ## 26  ¦       ¦--10 Key data tourism                                                ## 27  ¦       ¦--11 Key data transport                                              ## 28  ¦       ¦--12 Key data foreign trade                                          ## 29  ¦       ¦--13 Key data agriculture and foresty                                ## 30  ¦       °--... 13 nodes w/ 0 sub                                              ## 31  °--... 7 nodes w/ 1398 sub                                                    ##        type ## 1    FOLDER ## 2    FOLDER ## 3  DATABASE ## 4  DATABASE ## 5  DATABASE ## 6  DATABASE ## 7     TABLE ## 8     TABLE ## 9     TABLE ## 10    TABLE ## 11    TABLE ## 12   FOLDER ## 13   FOLDER ## 14 DATABASE ## 15    TABLE ## 16   FOLDER ## 17 DATABASE ## 18 DATABASE ## 19 DATABASE ## 20 DATABASE ## 21 DATABASE ## 22 DATABASE ## 23 DATABASE ## 24 DATABASE ## 25 DATABASE ## 26 DATABASE ## 27 DATABASE ## 28 DATABASE ## 29 DATABASE ## 30          ## 31 options(STATcubeR.print_tree = TRUE)"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table.html","id":"create-a-table-with-the-statcube-gui","dir":"Articles","previous_headings":"","what":"Create a table with the STATcube GUI","title":"Get Data via JSON Requests","text":"Use graphical user interface STATcube create table. Visit STATcube select database. open table view can create table. See STATcube manual details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table.html","id":"download-an-api-request","dir":"Articles","previous_headings":"","what":"Download an API request","title":"Get Data via JSON Requests","text":"Choose “Open Data API Abfrage (.json)” download options. save json file local file system.  might case thatthis download option listed download format. means current user permitted use API.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table.html","id":"send-the-json-to-the-api","dir":"Articles","previous_headings":"","what":"Send the json to the API","title":"Get Data via JSON Requests","text":"Provide path downloaded string file sc_table(). object my_table created via raw API response httr::POST() /table endpoint. Printing object summarize request. demonstrate example json via sc_example().","code":"my_table <- sc_table(json_file = \"path/to/api_request.json\") (json_path <- sc_example(\"population_timeseries.json\")) ## [1] \"/home/gregor/workspace/STATgraph/STATcubeR/inst/json_examples/population_timeseries.json\" my_table <- sc_table(json_path) my_table ## An object of class sc_table ##  ## Database    Population at the beginning of the quarter since 2002  ## Measures    Number of persons  ## Fields      Quarter, Age in single years <96>, Sex <2>, Commune <2383> ##             (Province-District)  ##  ## Request     2021-11-20 13:18:34  ## STATcubeR   0.3.4.4"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table.html","id":"convert-the-response-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Convert the response into a data frame","title":"Get Data via JSON Requests","text":"return value sc_table() can converted data.frame. , use $tabulate() method. produce tidy table, contains column field table. Furthermore, one column present measure.","code":"my_table$tabulate() # A STATcubeR tibble: 8,316 x 5    Quarter    `Age in single ye… `Sex <2>` `Commune <2383> (Pr… `Number of pers…  * <date>     <fct>              <fct>     <fct>                           <dbl>  1 2002-01-01 Up to 14 years old male      Burgenland <AT11>               21287  2 2002-01-01 Up to 14 years old male      Carinthia <AT21>                47230  3 2002-01-01 Up to 14 years old male      Vienna <AT13>                  117920  4 2002-01-01 Up to 14 years old male      Vorarlberg <AT34>               34798  5 2002-01-01 Up to 14 years old male      Tyrol <AT33>                    62794  6 2002-01-01 Up to 14 years old male      Styria <AT22>                   97538  7 2002-01-01 Up to 14 years old male      Salzburg <AT32>                 46955  8 2002-01-01 Up to 14 years old male      Upper Austria <AT31>           127316  9 2002-01-01 Up to 14 years old male      Lower Austria <AT12>           133928 10 2002-01-01 Up to 14 years old female    Burgenland <AT11>               20405 # … with 8,306 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get Data via JSON Requests","text":"Functionalities returned object explained STATcubeR data article. saved tables article shows alternative way importing tables.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table_saved.html","id":"keys-and-accounts","dir":"Articles","previous_headings":"","what":"Keys and accounts","title":"Load Saved Tables","text":"Tables always saved logged STATcube account. API key bound account can list saved tables account. Saved tables accounts can listed requested.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_table_saved.html","id":"converting-saved-tables-to-json-requests","dir":"Articles","previous_headings":"","what":"Converting saved tables to JSON requests","title":"Load Saved Tables","text":"make table available later use users STATcubeR, response can exported json. generated json file contains API request can used sc_table().","code":"wine$json$write(\"wine.json\") my_response <- sc_table(\"wine.json\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"tabulate","dir":"Articles","previous_headings":"","what":"Tabulating Data","title":"Tabulating STATcubeR Datasets","text":"Calling $tabulate() method arguments produces table dimensions $data. Instead cancer$tabulate(...) also possible use sc_tabulate(cancer, ...). available parameters $tabulate() method documented ?sc_tabulate.","code":"cancer$tabulate() # A STATcubeR tibble: 46,479 x 5   `Tumore ICD/10 3-Steller`            `Reporting year` `Province of res… Sex    * <fct>                                <date>           <fct>             <fct>  1 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Burgenland \"     male   2 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       male   3 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Carinthia\"       female 4 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   male   5 <C00> Bösartige Neubildung der Lippe 1983-01-01       \"Lower Austria\"   female # … with 46,474 more rows, and 1 more variable: Number of records F-KRE <int> identical(dim(cancer$tabulate()), dim(cancer$data)) ## [1] TRUE"},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"aggregating-with-sums","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating with sums","title":"Tabulating STATcubeR Datasets","text":"get number cases reporting year sex, use labels variables arguments. one measure included dataset, measures aggregated. STATcubeR uses rowsum() ensure good performance big datasets. also possible use partial matching use codes. STATcubeR use pmatch() match supplied strings metadata identify variables used aggregation.","code":"cancer$tabulate(\"Reporting year\", \"Sex\") # A STATcubeR tibble: 74 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       14492 2 1983-01-01       female                     17476 3 1984-01-01       male                       14794 4 1984-01-01       female                     17449 5 1985-01-01       male                       14552 # … with 69 more rows cancer$tabulate(\"Reporting\", \"C-KRE\") # A STATcubeR tibble: 74 x 3   `Reporting year` Sex    `Number of records F-KRE` * <date>           <fct>                      <int> 1 1983-01-01       male                       14492 2 1983-01-01       female                     17476 3 1984-01-01       male                       14794 4 1984-01-01       female                     17449 5 1985-01-01       male                       14552 # … with 69 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"totals","dir":"Articles","previous_headings":"Aggregation","what":"Limitations of sums","title":"Tabulating STATcubeR Datasets","text":"cases, datasets aggregated using rowsum() approach. example, take structure earnings survey. can see print() output, measures contain means quartiles. Therefore, aggregating data via rowsum() meaningful. However, dataset contains “total code” every field.","code":"earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings ## An object of class od_table ##  ## Dataset     Structure of Earnings Survey (SES) 2018 Gross hourly earnings in ##             EUR by citizenship, region (NUTS 2) and form of ##             employment  ## Measures    Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd quartile, ##             Number of employees  ## Fields      Sex, Citizenship, Region (NUTS2), Form of employment  ##  ## Request     2022-08-27 16:40:37  ## STATcubeR   0.3.4.4 earnings$tabulate() # A STATcubeR tibble: 72 x 9    Sex       Citizenship `Region (NUTS2)`   `Form of employment`                  * <fct>     <fct>       <fct>              <fct>                                 1 Sum total Total       Total              \"Total\"                               2 Sum total Total       Total              \"Standard employment \"                3 Sum total Total       Total              \"Non-standard employment (total)\"     4 Sum total Total       Total              \"Non-standard employment: part-time…  5 Sum total Total       Total              \"Non-standard employment: fixed-ter…  6 Sum total Total       Total              \"Non-standard employment: marginal …  7 Sum total Total       Total              \"Non-standard employment: temporary…  8 Sum total Total       AT11 Burgenland    \"Total\"                               9 Sum total Total       AT12 Lower Austria \"Total\"                              10 Sum total Total       AT13 Vienna        \"Total\"                              # … with 62 more rows, and 5 more variables: Arithmetic mean <dbl>, #   1st quartile <dbl>, 2nd quartile (median) <dbl>, 3rd quartile <dbl>, #   Number of employees <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"aggregating-via-total-codes","dir":"Articles","previous_headings":"Aggregation","what":"Aggregating via total codes","title":"Tabulating STATcubeR Datasets","text":"total codes can used aggregate data $tabulate(). order , total codes need specified using $total_codes(). Now $tabulate() use total codes form aggregates data. can see, method extracted rows 2 7 data. logic selecting rows equivalent following dplyr expression. $tabulate() method also works one variable.","code":"earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                       Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") # A STATcubeR tibble: 6 x 6   `Form of employment`                           `Arithmetic mea… `1st quartile` * <fct>                                                     <dbl>          <dbl> 1 \"Standard employment \"                                     19.0           12.8 2 \"Non-standard employment (total)\"                          15.2           10.2 3 \"Non-standard employment: part-time only\"                  15.9           10.7 4 \"Non-standard employment: fixed-term employme…             16.8           10.2 5 \"Non-standard employment: marginal part-time …             12              9   6 \"Non-standard employment: temporary agency wo…             14.0           11.5 # … with 3 more variables: 2nd quartile (median) <dbl>, 3rd quartile <dbl>, #   Number of employees <dbl> earnings$data %>% dplyr::filter(Sex == \"Sum total\" & Citizenship == \"Total\" &    `Region (NUTS2)` == \"Total\" & `Form of employment` != \"Total\") %>%    dplyr::select(-Sex, -Citizenship, -`Region (NUTS2)`)"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"section","dir":"Articles","previous_headings":"","what":"Tabulating STATcubeR Datasets","title":"Tabulating STATcubeR Datasets","text":"Sex & Form employment Sex & Citizenship Sex & Region Citizenship & Region get empty table cross tabulation included OGD dataset. happen Citizenship & Form employment well Region & Form employment.","code":"earnings$tabulate(\"Sex\", \"Form of employment\") # A STATcubeR tibble: 12 x 7    Sex    `Form of employment`                   `Arithmetic mea… `1st quartile`  * <fct>  <fct>                                             <dbl>          <dbl>  1 Male   \"Standard employment \"                             20.0          13.5   2 Male   \"Non-standard employment (total)\"                  16.5          10.5   3 Male   \"Non-standard employment: part-time o…             18.8          11.1   4 Male   \"Non-standard employment: fixed-term …             18.3          10.9   5 Male   \"Non-standard employment: marginal pa…             12.6           9     6 Male   \"Non-standard employment: temporary a…             14.4          12     7 Female \"Standard employment \"                             16.3          11.1   8 Female \"Non-standard employment (total)\"                  14.6          10.0   9 Female \"Non-standard employment: part-time o…             15.2          10.6  10 Female \"Non-standard employment: fixed-term …             15.2           9.68 11 Female \"Non-standard employment: marginal pa…             11.6           9.02 12 Female \"Non-standard employment: temporary a…             13.0          10.4  # … with 3 more variables: 2nd quartile (median) <dbl>, 3rd quartile <dbl>, #   Number of employees <dbl> earnings$tabulate(\"Sex\", \"Citizenship\") # A STATcubeR tibble: 16 x 7    Sex    Citizenship                            `Arithmetic mea… `1st quartile`  * <fct>  <fct>                                             <dbl>          <dbl>  1 Male   \"Austrian\"                                         20.4          13.8   2 Male   \"Non-Austrian \"                                    15.3          10.6   3 Male   \"EU-28/EWR/Switzerland (without Austr…             16.0          10.9   4 Male   \"EU-15/EWR before 2004/Switzerland\"                21.2          12.6   5 Male   \"EU-13 EU Member States after 2004\"                13.6          10.3   6 Male   \"Former Yugoslavia (without Slovenia …             14.1          11.2   7 Male   \"Turkey\"                                           13.3          10.4   8 Male   \"Other\"                                            14.0           9.07  9 Female \"Austrian\"                                         15.9          11.1  10 Female \"Non-Austrian \"                                    13.0           9.19 11 Female \"EU-28/EWR/Switzerland (without Austr…             13.7           9.38 12 Female \"EU-15/EWR before 2004/Switzerland\"                17.1          11.0  # … with 4 more rows, and 3 more variables: 2nd quartile (median) <dbl>, #   3rd quartile <dbl>, Number of employees <dbl> earnings$tabulate(\"Sex\", \"Region\") # A STATcubeR tibble: 18 x 7    Sex    `Region (NUTS2)`   `Arithmetic mean` `1st quartile` `2nd quartile (me…  * <fct>  <fct>                          <dbl>          <dbl>              <dbl>  1 Male   AT11 Burgenland                 16.6           11.6               14.2  2 Male   AT12 Lower Austria              17.8           12.3               15.4  3 Male   AT13 Vienna                     20.9           12.2               16.7  4 Male   AT21 Carinthia                  18.3           12.6               15.5  5 Male   AT22 Styria                     18.4           12.8               15.9  6 Male   AT31 Upper Austria              19.7           13.7               17.1  7 Male   AT32 Salzburg                   19.2           12.7               16.1  8 Male   AT33 Tyrol                      18.6           12.8               16.2  9 Male   AT34 Vorarlberg                 20.4           14.5               18.4 10 Female AT11 Burgenland                 14.5           10.2               12.6 11 Female AT12 Lower Austria              14.2           10                 12.7 12 Female AT13 Vienna                     17.1           10.6               14.6 # … with 6 more rows, and 2 more variables: 3rd quartile <dbl>, #   Number of employees <dbl> earnings$tabulate(\"Citizenship\", \"Region\") # A STATcubeR tibble: 0 x 7 # … with 7 variables: Citizenship <fct>, Region (NUTS2) <fct>, #   Arithmetic mean <dbl>, 1st quartile <dbl>, 2nd quartile (median) <dbl>, #   3rd quartile <dbl>, Number of employees <dbl> earnings$tabulate(\"Citizenship\", \"Form of employment\") %>% dim() ## [1] 0 7 earnings$tabulate(\"Region\", \"Form of employment\") %>% dim() ## [1] 0 7"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"totals-and-the-rest-api","dir":"Articles","previous_headings":"Aggregation","what":"Totals and the REST API","title":"Tabulating STATcubeR Datasets","text":"default, STATcubeR always add totals datasets REST API use totals aggregate datasets.","code":"x <- sc_table(sc_example(\"accomodation\")) x$meta$fields # STATcubeR metadata: 3 x 7   code          label                      total_code   <chr>         <chr>                      <chr>      1 C-SDB_TIT-0   Season/Tourism Month       SC_TOTAL   2 C-C93SUM-0    Country of origin          SC_TOTAL   3 C-BBTR_REG2-0 Accomodation establishment SC_TOTAL   # … with 4 more columns: 'nitems', 'type', 'label_de', 'label_en'"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"including-totals-in-the-oputput","dir":"Articles","previous_headings":"Aggregation","what":"Including totals in the oputput","title":"Tabulating STATcubeR Datasets","text":"necessary fields totals. example, suppose want include totals Sex output table. can just remove toal code running sc_tabulate(). special symbol NA can used unset total code.","code":"earnings$total_codes(Sex = NA) earnings$tabulate(\"Sex\") # A STATcubeR tibble: 3 x 6   Sex       `Arithmetic mean` `1st quartile` `2nd quartile (medi… `3rd quartile` * <fct>                 <dbl>          <dbl>                <dbl>          <dbl> 1 Sum total              17.6           11.6                 15.1           20.1 2 Male                   19.2           12.8                 16.3           22.0 3 Female                 15.3           10.4                 13.4           17.6 # … with 1 more variable: Number of employees <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"german-labels-and-codes","dir":"Articles","previous_headings":"","what":"German Labels and Codes","title":"Tabulating STATcubeR Datasets","text":"possible switch language used labeling data. can done setting $language \"de\" \"en\". skip labelling altogether use variable codes output, use raw=TRUE. Switching languages always available od_table() objects. sc_table(), depends whcih languages requested.","code":"earnings$language <- \"de\" earnings$tabulate(\"Geschlecht\") # A STATcubeR tibble: 3 x 6   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Med… `3. Quartil` * <fct>                        <dbl>        <dbl>             <dbl>        <dbl> 1 insgesamt                     17.6         11.6              15.1         20.1 2 männlich                      19.2         12.8              16.3         22.0 3 weiblich                      15.3         10.4              13.4         17.6 # … with 1 more variable: Zahl d unselbst Beschäftigten <dbl> earnings$tabulate(\"Geschlecht\", raw = TRUE) # A STATcubeR tibble: 3 x 6   `C-A11-0` `F-VESTE_AM` `F-VESTE_Q25` `F-VESTE_Q50` `F-VESTE_Q75` `F-VESTE_UB` * <fct>            <dbl>         <dbl>         <dbl>         <dbl>        <dbl> 1 A11-1             17.6          11.6          15.1          20.1      2650938 2 A11-2             19.2          12.8          16.3          22.0      1544588 3 A11-3             15.3          10.4          13.4          17.6      1106350 # default: get labels in german and english  x <- sc_table(sc_example(\"accomodation\")) # only get english labels x <- sc_table(sc_example(\"accomodation\"), lang = \"en\") # only get german labels x <- sc_table(sc_example(\"accomodation\"), lang = \"de\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"subsetting-columns","dir":"Articles","previous_headings":"","what":"Subsetting columns","title":"Tabulating STATcubeR Datasets","text":"previous examples, supplied names /codes fields sc_tabulate(). also possible include measures case unlisted measures omitted. Just like fields, measures also support partial matching codes. example, \"2. Quartil\" matched \"2. Quartil (Median)\".","code":"earnings$tabulate(\"Geschlecht\", \"Arithmetisches Mittel\", \"2. Quartil\") # A STATcubeR tibble: 3 x 3   Geschlecht `Arithmetisches Mittel` `2. Quartil (Median)` * <fct>                        <dbl>                 <dbl> 1 insgesamt                     17.6                  15.1 2 männlich                      19.2                  16.3 3 weiblich                      15.3                  13.4"},{"path":"https://statistikat.github.io/STATcubeR/dev/articles/sc_tabulate.html","id":"programmatic-usage","dir":"Articles","previous_headings":"","what":"Programmatic usage","title":"Tabulating STATcubeR Datasets","text":"Notice used german label column \"Sex\" last calls tabulate(). necessary “active” labels available define tabulation. want use STATcubeR programatically, always use codes define tabulation also use .list parameter want pass several codes. $total_codes() currently uses ellipsis (...) parameter define total codes. future, programmatic updates sc_data objects defined $recodes. See #17.","code":"earnings$field(\"C-A11-0\") # STATcubeR metadata: 3 x 8   code  label     parsed      <chr> <chr>     <chr>     1 A11-1 insgesamt insgesamt 2 A11-2 männlich  männlich  3 A11-3 weiblich  weiblich  # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' earnings$total_codes(`C-A11-0` = \"A11-1\") vars_to_tabulate <- c(\"C-A11-0\", \"C-BESCHV-0\") earnings$tabulate(.list = vars_to_tabulate) # A STATcubeR tibble: 12 x 7   Geschlecht `Form des Beschäftigungsverhältni… `Arithmetisches Mi… `1. Quartil` * <fct>      <fct>                                            <dbl>        <dbl> 1 männlich   \"Normalarbeitsverhältnis\"                         20.0         13.5 2 männlich   \"Atypische Beschäftigung (insgesa…                16.5         10.5 3 männlich   \"Atypisch: ausschließlich Teilzei…                18.8         11.1 4 männlich   \"Atypisch: befristete Beschäftigu…                18.3         10.9 5 männlich   \"Atypisch: geringfügige Beschäfti…                12.6          9   6 männlich   \"Atypisch: Leih- und Zeitarbeit \"                 14.4         12   7 weiblich   \"Normalarbeitsverhältnis\"                         16.3         11.1 # … with 5 more rows, and 3 more variables: 2. Quartil (Median) <dbl>, #   3. Quartil <dbl>, Zahl d unselbst Beschäftigten <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregor de Cillia. Author, maintainer. Bernhard Meindl. Contributor.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Cillia G (2022). STATcubeR: R interface STATcube REST API Open Government Data. https://statistikat.github.io/STATcubeR, https://github.com/statistikat/STATcubeR.","code":"@Manual{,   title = {STATcubeR: R interface for the STATcube REST API and Open Government Data},   author = {Gregor {de Cillia}},   year = {2022},   note = {https://statistikat.github.io/STATcubeR, https://github.com/statistikat/STATcubeR}, }"},{"path":"https://statistikat.github.io/STATcubeR/dev/index.html","id":"statcuber-","dir":"","previous_headings":"","what":"STATcubeR","title":"STATcubeR","text":"R client things STATcube. Get data STATcube REST API via open government data portal https://data.statistik.gv.. STATcubeR makes easy include datasources R projects.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"STATcubeR","text":"package can installed directly github using remotes package.","code":"remotes::install_github(\"statistikat/STATcubeR\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/index.html","id":"open-data","dir":"","previous_headings":"","what":"Open Data","title":"STATcubeR","text":"import datasets https://data.statistik.gv., pass dataset id od_table() function. example, OGD data austrian population 2020 can accessed follows. resulting object contains labeled data (see ), raw data, metadata . See OGD article details. available datasets article provides overview 315 datasets compatible od_table().","code":"library(STATcubeR) population <- od_table(\"OGD_bevstandjbab2002_BevStand_2020\") population$tabulate() # A STATcubeR tibble: 392,508 x 5   `Time section` Sex   `Commune (aggregation by polit… `Age in single ye… Number * <date>         <fct> <fct>                           <fct>               <int> 1 2020-01-01     male  Eisenstadt <10101>              under 1 year old       77 2 2020-01-01     male  Eisenstadt <10101>              1 year old             75 3 2020-01-01     male  Eisenstadt <10101>              2 years old            70 4 2020-01-01     male  Eisenstadt <10101>              3 years old            83 # … with 392,504 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/index.html","id":"statcube-api","dir":"","previous_headings":"","what":"STATcube API","title":"STATcubeR","text":"order use REST API, required set API key. mentioned api key article, requres STATcube subscription. four main functions interact API sc_schema_catalogue() lists available datasets tables sc_schema_db() provides metadata specific database sc_table() requests table API according json standard. sc_table_saved() requests table based id information first two functions can found schema article. sc_table() sc_table_saved() articles .","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/index.html","id":"consistent-data-formats","dir":"","previous_headings":"","what":"Consistent data formats","title":"STATcubeR","text":"OGD data tables form REST API wrapped R6 class provide easy access data metadata. example, $tabulate() method also available tables REST API. See base class article information features class.","code":"# https://statcube.at/statcube/openinfopage?id=debevstandjbab2002 population <- sc_table_saved(\"str:table:defaulttable_debevstandjbab2002\") population$tabulate() # A STATcubeR tibble: 10 x 3   `Time section` `Commune (aggregation by political district)`  Number   <date>         <fct>                                           <dbl> 1 2021-01-01     Burgenland <AT11>                              296010 2 2021-01-01     Carinthia <AT21>                               562089 3 2021-01-01     Lower Austria <AT12>                          1690879 4 2021-01-01     Upper Austria <AT31>                          1495608 # … with 6 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache management for Open Data — od_cache","title":"Cache management for Open Data — od_cache","text":"Functions inspect contents current cache.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache management for Open Data — od_cache","text":"","code":"od_cache_summary(server = \"ext\")  od_downloads(server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache management for Open Data — od_cache","text":"server OGD-Server use. \"ext\" external server (default) \"red\" editing server","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache management for Open Data — od_cache","text":"od_cache_summary() provides overview contents cache data.frame. hasone row dataset following columns. file sizes given bytes id dataset id updated last modified time ${id}.json json file size ${id}.json data file size ${id}.csv header file size ${id}_HEADER.csv fields total file size files belonging fields ({id}_C*.csv). n_fields number field files od_downloads() shows download history current cache time timestamp download file filename downloaded download time milliseconds","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache management for Open Data — od_cache","text":"","code":"## make sure the cache is not empty od_table(\"OGD_krebs_ext_KREBS_1\") #> An object of class od_table #>  #> Dataset     Cancer statistics by reporting year, province of #>             residence and localisation of cancer  #> Measures    Number of records F-KRE  #> Fields      Tumore ICD/10 3-Steller, Reporting year, Province of #>             residence, Sex  #>  #> Request     2022-08-27 16:39:19  #> STATcubeR   0.3.4.4  od_table(\"OGD_veste309_Veste309_1\") #> An object of class od_table #>  #> Dataset     Structure of Earnings Survey (SES) 2018 Gross hourly #>             earnings in EUR by citizenship, region (NUTS #>             2) and form of employment  #> Measures    Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>             quartile, Number of employees  #> Fields      Sex, Citizenship, Region (NUTS2), Form of employment  #>  #> Request     2022-08-27 16:39:19  #> STATcubeR   0.3.4.4   ## inspect od_cache_summary() #> # A data frame: 273 × 7 #>    id          updated              json   data header fields n_fields #>    <chr>       <dttm>              <dbl>  <dbl>  <dbl>  <dbl>    <int> #>  1 OGD_1531kn… 2021-08-13 00:53:09  3089 106427    277   9435        2 #>  2 OGD__steue… 2021-08-13 00:53:09  6528  83665   4259   1695        5 #>  3 OGD__steue… 2021-08-13 00:53:09  6208 305349   4297   2653        4 #>  4 OGD__steue… 2021-08-13 00:53:09  6513  42023   4259   1676        5 #>  5 OGD__steue… 2021-08-13 00:53:09  6193 153282   4297   2634        4 #>  6 OGD__steue… 2021-11-13 06:38:21  4862 269849   2263   3436        3 #>  7 OGD_aeapp_… 2022-01-26 04:24:58  5059  39639    407   1612        4 #>  8 OGD_aest_e… 2022-05-14 22:01:44  6237  97051    476   1736        5 #>  9 OGD_ahlgrh… 2021-08-13 00:53:09  3318  13886    270   1276        3 #> 10 OGD_ahlgrh… 2021-08-13 00:53:09  2974  28513    225   7681        2 #> # … with 263 more rows od_downloads() #> # A data frame: 5,367 × 3 #>    time                file                                 downloaded #>  * <dttm>              <fct>                                     <dbl> #>  1 2022-08-27 15:41:44 OGD_veste309_Veste309_1.json               25.0 #>  2 2022-08-27 15:41:44 OGD_krebs_ext_KREBS_1.json                124.  #>  3 2022-08-27 03:52:06 OGD_fhsstud_ext_FHS_S_1_C-SEMESTER-…       25.8 #>  4 2022-08-27 03:52:06 OGD_fhsstud_ext_FHS_S_1_HEADER.csv         13.6 #>  5 2022-08-27 03:52:06 OGD_fhsstud_ext_FHS_S_1.csv                11.7 #>  6 2022-08-27 03:52:06 OGD_fhsstud_ext_FHS_S_1.json               23.1 #>  7 2022-08-27 03:25:28 OGD_veste303_Veste203_1.json               14.3 #>  8 2022-08-27 03:25:28 OGD_f1741_HH_Proj_1.json                   15.1 #>  9 2022-08-27 03:25:28 OGD_krankenbewegungen_ex_LEISTUNGEN…       16.4 #> 10 2022-08-27 03:25:28 OGD_konjunkturmonitor_KonMon_1.json        18.1 #> # … with 5,357 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List available Opendata datasets — od_list","title":"List available Opendata datasets — od_list","text":"od_list() returns data.frame  containing datasets published data.statistik.gv.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available Opendata datasets — od_list","text":"","code":"od_list(unique = TRUE, server = c(\"ext\", \"red\"))"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available Opendata datasets — od_list","text":"unique datasets pulbished multiple groups. listed first group appear unless parameter set FALSE. server open data server use. Either ext external server (default) red editing server. editing server accessible employees Statistics Austria","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available Opendata datasets — od_list","text":"data.frame two columns \"category\": Grouping dataset listed \"id\": Name dataset can later used od_table() \"label\": Description dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available Opendata datasets — od_list","text":"","code":"df <- od_list() df #> # A data frame: 315 × 3 #>    category    id                                         label        #>    <chr>       <chr>                                      <chr>        #>  1 Arbeit      OGD_konjunkturmonitor_KonMon_1             Konjunkturm… #>  2 Arbeit      OGD_veste309_Veste309_1                    Verdienstst… #>  3 Arbeit      OGD_veste307_Veste307_1                    Verdienstst… #>  4 Arbeit      OGD_veste305_Veste305_1                    Verdienstst… #>  5 Arbeit      OGD_veste303_Veste203_1                    Verdienstst… #>  6 Arbeit      OGD_veste301_Veste301_1                    Verdienstst… #>  7 Arbeit      OGD_aeapp_biber_abschl_ext_BIBER_ABSCHL_1  BibEr Monit… #>  8 Arbeit      OGD_aest_erv_statw_haupt_ERV_STATWECHSEL_1 Erwerbsverl… #>  9 Bevölkerung OGD_gestorbenesaeuglinge_ext_GESS_1        Gestorbene … #> 10 Bevölkerung OGD_gestorbene_ext_ohmed_GES_1             Gestorbene   #> # … with 305 more rows subset(df, category == \"Bildung und Forschung\") #> # A data frame: 43 × 3 #>    category              id                                    label   #>  * <chr>                 <chr>                                 <chr>   #>  1 Bildung und Forschung OGD_innov015_CIS_015_Unt_Innovation_1 Untern… #>  2 Bildung und Forschung OGD_innov014_CIS_014_Unt_Innovation_1 Umsätz… #>  3 Bildung und Forschung OGD_innov012_CIS_012_Unt_Innovation_1 Untern… #>  4 Bildung und Forschung OGD_innov011_CIS_011_Unt_Innovation_1 Untern… #>  5 Bildung und Forschung OGD_innov013_CIS_013_Unt_Innovation_1 Innova… #>  6 Bildung und Forschung OGD_unistud1_ext_UNI_STUD1_1          Studie… #>  7 Bildung und Forschung OGD_fhsstud_ext_FHS_S_1               Studie… #>  8 Bildung und Forschung OGD_uptstud_ext_UPT_S_1               Studie… #>  9 Bildung und Forschung OGD_uptabs_ext_UPT_A_1                Studie… #> 10 Bildung und Forschung OGD_fhsabs_ext_FHS_A_1                Studie… #> # … with 33 more rows # use an id to load a dataset od_table(\"OGD_fhsstud_ext_FHS_S_1\") #> An object of class od_table #>  #> Dataset     Studies at universities of applied sciences  #> Measures    Ordinary Studies, Courses of studies (Lehrgang), Newly #>             enrolled ordinary studies, Newly enrolled #>             courses of studies (Lehrgang)  #> Fields      Semester  #>  #> Request     2022-08-27 16:39:20  #> STATcubeR   0.3.4.4"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource management for open.data — od_resource","title":"Resource management for open.data — od_resource","text":"Helper functions caching parsing open.data resources.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource management for open.data — od_resource","text":"","code":"od_cache_dir(dir = NULL)  od_cache_clear(id, server = \"ext\")  od_cache_file(id, suffix = NULL, timestamp = NULL, ..., server = \"ext\")  od_resource(id, suffix = NULL, timestamp = NULL, server = \"ext\")  od_json(id, timestamp = Sys.time() - 3600, server = \"ext\")  od_resource_all(id, json = od_json(id), server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource management for open.data — od_resource","text":"dir NULL, cache directory returned. Otherwise, cache directory updated dir. id database id server OGD-Server use load update resources case outdated. \"ext\" external server (default) od \"red\" editing server. suffix suffix resource: \"HEADER\" field code. timestamp timestamp POSIXct format. provided, cached resource updated older value. Otherwise downloaded exist cache. ... internal use json JSON file belonging dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource management for open.data — od_resource","text":"od_cache_file() od_resource(), returned objects contain hidden attribute attr(., \"od\") time used downloading parsing resource. od_resource_all() converts hidden attribute columns.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource management for open.data — od_resource","text":"od_cache_clear(id) removes files belonging specified id. default, downloaded json files \"expire\" one hour 3600 seconds. , json requested, reused cache unless file.mtime() one hour behind Sys.time().","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_resource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource management for open.data — od_resource","text":"","code":"# get the current cache directory od_cache_dir() #> [1] \"~/.cache/STATcubeR/open_data/\"  # Get paths to cached files od_cache_file(\"OGD_veste309_Veste309_1\") #> [1] \"~/.cache/STATcubeR/open_data/OGD_veste309_Veste309_1.csv\" od_cache_file(\"OGD_veste309_Veste309_1\", \"C-A11-0\") #> [1] \"~/.cache/STATcubeR/open_data/OGD_veste309_Veste309_1_C-A11-0.csv\"  # get a parsed verison of the resource od_resource(\"OGD_veste309_Veste309_1\", \"C-A11-0\") #> # A data frame: 3 × 5 #>   code  label label_de  label_en  parent #> * <chr> <chr> <chr>     <chr>     <fct>  #> 1 A11-1 NA    insgesamt Sum total NA     #> 2 A11-2 NA    männlich  Male      NA     #> 3 A11-3 NA    weiblich  Female    NA      # Bundle all resources od_resource_all(\"OGD_veste309_Veste309_1\") #> # A data frame: 6 × 7 #>   name   last_modified       cached               size download parsed #>   <chr>  <dttm>              <dttm>              <dbl>    <dbl>  <dbl> #> 1 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41  4931       NA  1.30  #> 2 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41   516       NA  1.03  #> 3 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41   159       NA  1.10  #> 4 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41   697       NA  0.773 #> 5 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41   518       NA  3.63  #> 6 OGD_v… 2022-03-24 11:29:48 2022-03-30 23:37:41   641       NA  1.78  #> # … with 1 more variable: data <I<list>>"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table","title":"Create a table-instance from an open-data dataset — od_table","text":"od_table(id) returns R6-class object containing relevant data metadata https://data.statistik.gv./data/","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table","text":"","code":"od_table(id, language = c(\"en\", \"de\"), server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table-instance from an open-data dataset — od_table","text":"id id data-set accessed language language used labeling. \"en\" \"de\" server OGD-server used. \"ext\" (default) external server prod production server","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table-instance from an open-data dataset — od_table","text":"returned objects class sc_table inherits several parsing methods sc_data. See od_table_class full class documentation.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table-instance from an open-data dataset — od_table","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  ## metadata x #> An object of class od_table #>  #> Dataset     Cancer statistics by reporting year, province of #>             residence and localisation of cancer  #> Measures    Number of records F-KRE  #> Fields      Tumore ICD/10 3-Steller, Reporting year, Province of #>             residence, Sex  #>  #> Request     2022-08-27 16:39:21  #> STATcubeR   0.3.4.4  x$meta #> $source #> # STATcubeR metadata: 1 x 7 #>   code                  label                                    lang  #>   <chr>                 <chr>                                    <chr> #> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, pr… en    #> # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 5 #>   code  label                     NAs #>   <chr> <chr>                   <int> #> 1 F-KRE Number of records F-KRE     0 #> # … with 2 more columns: 'label_de', 'label_en' #>  #> $fields #> # STATcubeR metadata: 4 x 7 #>   code               label                   total_code #>   <chr>              <chr>                   <chr>      #> 1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA         #> 2 C-BERJ-0           Reporting year          NA         #> 3 C-BUNDESLAND-0     Province of residence   NA         #> 4 C-KRE_GESCHLECHT-0 Sex                     NA         #> # … with 4 more columns: 'label_de', 'label_en', 'nitems', 'type' #>  x$field(\"Sex\") #> # STATcubeR metadata: 2 x 8 #>   code         label  parsed #>   <chr>        <chr>  <chr>  #> 1 GESCHLECHT-1 male   male   #> 2 GESCHLECHT-2 female female #> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' x$field(3) #> # STATcubeR metadata: 9 x 8 #>   code         label           parsed          #>   <chr>        <chr>           <chr>           #> 1 BUNDESLAND-1 \"Burgenland \"   \"Burgenland \"   #> 2 BUNDESLAND-2 \"Carinthia\"     \"Carinthia\"     #> 3 BUNDESLAND-3 \"Lower Austria\" \"Lower Austria\" #> 4 BUNDESLAND-4 \"Upper Austria\" \"Upper Austria\" #> 5 BUNDESLAND-5 \"Salzburg\"      \"Salzburg\"      #> 6 BUNDESLAND-6 \"Styria\"        \"Styria\"        #> 7 BUNDESLAND-7 \"Tyrol\"         \"Tyrol\"         #> 8 BUNDESLAND-8 \"Vorarlberg\"    \"Vorarlberg\"    #> 9 BUNDESLAND-9 \"Vienna\"        \"Vienna\"        #> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order'  ## data x$data #> # A STATcubeR tibble: 46,479 x 5 #>    `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-… #>  * <fct>               <fct>      <fct>            <fct>               #>  1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1        #>  2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1        #>  3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2        #>  4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1        #>  5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2        #>  6 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     GESCHLECHT-1        #>  7 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     GESCHLECHT-2        #>  8 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-5     GESCHLECHT-1        #>  9 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     GESCHLECHT-1        #> 10 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     GESCHLECHT-2        #> # … with 46,469 more rows, and 1 more variable: F-KRE <int> x$tabulate() #> # A STATcubeR tibble: 46,479 x 5 #>    `Tumore ICD/10 3-Stelle… `Reporting year` `Province of resid… Sex   #>  * <fct>                    <date>           <fct>               <fct> #>  1 <C00> Bösartige Neubild… 1983-01-01       \"Burgenland \"       male  #>  2 <C00> Bösartige Neubild… 1983-01-01       \"Carinthia\"         male  #>  3 <C00> Bösartige Neubild… 1983-01-01       \"Carinthia\"         fema… #>  4 <C00> Bösartige Neubild… 1983-01-01       \"Lower Austria\"     male  #>  5 <C00> Bösartige Neubild… 1983-01-01       \"Lower Austria\"     fema… #>  6 <C00> Bösartige Neubild… 1983-01-01       \"Upper Austria\"     male  #>  7 <C00> Bösartige Neubild… 1983-01-01       \"Upper Austria\"     fema… #>  8 <C00> Bösartige Neubild… 1983-01-01       \"Salzburg\"          male  #>  9 <C00> Bösartige Neubild… 1983-01-01       \"Styria\"            male  #> 10 <C00> Bösartige Neubild… 1983-01-01       \"Styria\"            fema… #> # … with 46,469 more rows, and 1 more variable: #> #   Number of records F-KRE <int>  ## tabulation: see `?sc_tabulate` for more examples x$tabulate(\"Reporting year\", \"Sex\") #> # A STATcubeR tibble: 74 x 3 #>    `Reporting year` Sex    `Number of records F-KRE` #>  * <date>           <fct>                      <int> #>  1 1983-01-01       male                       14492 #>  2 1983-01-01       female                     17476 #>  3 1984-01-01       male                       14794 #>  4 1984-01-01       female                     17449 #>  5 1985-01-01       male                       14552 #>  6 1985-01-01       female                     17445 #>  7 1986-01-01       male                       14626 #>  8 1986-01-01       female                     17236 #>  9 1987-01-01       male                       14850 #> 10 1987-01-01       female                     17838 #> # … with 64 more rows  ## switch language x$language <- \"de\" x #> An object of class od_table #>  #> Dataset     Krebsstatistik  #> Measures    Anzahl der Datensätze F-KRE  #> Fields      Tumore ICD/10 3-Steller, Berichtsjahr, Bundesland, #>             Geschlecht  #>  #> Request     2022-08-27 16:39:21  #> STATcubeR   0.3.4.4  x$tabulate() #> # A STATcubeR tibble: 46,479 x 5 #>    `Tumore ICD/10 3-Steller`     Berichtsjahr Bundesland    Geschlecht #>  * <fct>                         <date>       <fct>         <fct>      #>  1 <C00> Bösartige Neubildung d… 1983-01-01   Burgenland    männlich   #>  2 <C00> Bösartige Neubildung d… 1983-01-01   Kärnten       männlich   #>  3 <C00> Bösartige Neubildung d… 1983-01-01   Kärnten       weiblich   #>  4 <C00> Bösartige Neubildung d… 1983-01-01   Niederösterr… männlich   #>  5 <C00> Bösartige Neubildung d… 1983-01-01   Niederösterr… weiblich   #>  6 <C00> Bösartige Neubildung d… 1983-01-01   Oberösterrei… männlich   #>  7 <C00> Bösartige Neubildung d… 1983-01-01   Oberösterrei… weiblich   #>  8 <C00> Bösartige Neubildung d… 1983-01-01   Salzburg      männlich   #>  9 <C00> Bösartige Neubildung d… 1983-01-01   Steiermark    männlich   #> 10 <C00> Bösartige Neubildung d… 1983-01-01   Steiermark    weiblich   #> # … with 46,469 more rows, and 1 more variable: #> #   Anzahl der Datensätze F-KRE <int>  ## other interesting tables od_table(\"OGD_veste309_Veste309_1\") #> An object of class od_table #>  #> Dataset     Structure of Earnings Survey (SES) 2018 Gross hourly #>             earnings in EUR by citizenship, region (NUTS #>             2) and form of employment  #> Measures    Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>             quartile, Number of employees  #> Fields      Sex, Citizenship, Region (NUTS2), Form of employment  #>  #> Request     2022-08-27 16:39:21  #> STATcubeR   0.3.4.4  od_table(\"OGD_konjunkturmonitor_KonMon_1\") #> An object of class od_table #>  #> Dataset     Economic Trend Monitor  #> Measures    Production Index Industry (wd; 2015=100), Technical total #>             production Industry (in 1.000 €), Turnover #>             Index Industry (2015=100), Turnover Industry #>             (in 1.000 €), Index of new orders Industry #>             (2015=100), Index of persons employed #>             Industry (2015=100), Persons employed #>             Industry, Productivity Index Industry per #>             employee (2015=100), Productivity Index #>             Industry per hours worked (2015=100), #>             Industrial Output Price Index (2021=100), ...  #> Fields      reporting period, value indication  #>  #> Request     2022-08-27 16:39:21  #> STATcubeR   0.3.4.4  od_table(\"OGD_krankenbewegungen_ex_LEISTUNGEN_1\") #> An object of class od_table #>  #> Dataset     Medical procedures during inpatient stays since 1989 by #>             patient characteristics (number of medical #>             procedures)  #> Measures    Medical procedures  #> Fields      Year of discharge, Sex, Age (four classes), NUTS-2 region #>             (place of residence), Medical procedures - #>             subchapters  #>  #> Request     2022-08-27 16:39:22  #> STATcubeR   0.3.4.4  od_table(\"OGD_f1741_HH_Proj_1\") #> An object of class od_table #>  #> Dataset     Household forecast  #> Measures    Private households at the end of the year, Annual average #>             of private households  #> Fields      Time, Province (NUTS 2-Einheit) <9>, Type of household #>             <2>, Age of household representative in #>             10-year groups <7>, Sex of household #>             reference person <2>  #>  #> Request     2022-08-27 16:39:22  #> STATcubeR   0.3.4.4  od_table(\"OGD_veste303_Veste203_1\") #> An object of class od_table #>  #> Dataset     Structure of Earnings Survey (SES) 2018 Gross hourly #>             earnings in EUR by characteristics of the #>             enterprise  #> Measures    Arithmetic mean, 1st quartile, 2nd quartile (median), 3rd #>             quartile, Number of employees  #> Fields      ÖNACE 2008 (NACE Rev.2), Sex, Regions (Nuts1), Size of #>             the enterprise  #>  #> Request     2022-08-27 16:39:22  #> STATcubeR   0.3.4.4"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table-instance from an open-data dataset — od_table_class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"R6 Class open data datasets.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Create a table-instance from an open-data dataset — od_table_class","text":"STATcubeR::sc_data -> od_table","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a table-instance from an open-data dataset — od_table_class","text":"json parsed version https://data.statistik.gv./ogd/json?dataset=${id} header parsed version https://data.statistik.gv./data/${id}_HEADER.csv. Similar contents can found $meta. resources lists files downloaded server contruct table od_server server used initialization (see ?od_table)","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create a table-instance from an open-data dataset — od_table_class","text":"STATcubeR::sc_data$field() STATcubeR::sc_data$tabulate() STATcubeR::sc_data$total_codes()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create a table-instance from an open-data dataset — od_table_class","text":"od_table_class$new()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create a table-instance from an open-data dataset — od_table_class","text":"class exported. Use od_table() initialize objects class od_table.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table-instance from an open-data dataset — od_table_class","text":"","code":"od_table_class$new(id, language = c(\"en\", \"de\"), server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table-instance from an open-data dataset — od_table_class","text":"id id data-set accessed language language used labeling. \"en\" \"de\" server OGD-Server server used","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves an opendata dataset as a zip archive — od_table_save","title":"Saves an opendata dataset as a zip archive — od_table_save","text":"od_table_save() creates zip file containing relevant data OGD portal. od_table_local() creates od_table object based zipped version dataset. od_table_save() creates tar archive containing relevant data OGD portal. od_table_local() parses tar archive recreates od_table object.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves an opendata dataset as a zip archive — od_table_save","text":"","code":"od_table_save(x, file = NULL)  od_table_local(file)  od_table_save(x, file = NULL)  od_table_local(file)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves an opendata dataset as a zip archive — od_table_save","text":"x object class od_table file archive file file dataset. od_table_save(), default {id}.tar.gz id denotes OGD identifier.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/od_table_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves an opendata dataset as a zip archive — od_table_save","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  # save dataset to ./OGD_krebs_ext_KREBS_1.zip  od_table_save(x) #> No file argument provided. Using \"OGD_krebs_ext_KREBS_1.tar.gz\" od_table_local(\"OGD_krebs_ext_KREBS_1.zip\") #> Error in od_table_local(\"OGD_krebs_ext_KREBS_1.zip\"): file.exists(file) is not TRUE  # save dataset to a custom path  od_table_save(x, \"~/dataset.zip\") od_table_local(\"~/dataset.zip\") #> Warning: ‘/usr/bin/tar -xf '/home/gregor/dataset.zip' -C '/tmp/RtmpjNnJd2/dir59fa13b42a04'’ returned error code 2 #> Error in od_table_local_paths(): length(extracted) == 1 is not TRUE x <- od_table(\"OGD_krebs_ext_KREBS_1\")  # save dataset as an archive archive <- file.path(tempdir(), \"table.tar.gz\") od_table_save(x, archive)  # read the saved archive x2 <- od_table_local(archive)  # cleanup file.remove(archive) #> [1] TRUE"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/other_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Other endpoints of the STATcube REST API — other_endpoints","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"Utilize simple endpoints /info /table_rate_limit. provide information available locales amount requests available calls /table endpoint.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/other_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"","code":"sc_info(language = c(\"en\", \"de\"), key = NULL, server = \"ext\")  sc_rate_limit_table(language = c(\"en\", \"de\"), key = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/other_endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"language language used labeling. \"en\" \"de\" key (string) API key. display key, call sc_browse_preferences(). server STATcube API server. Defaults external Server via \"ext\". Oher options \"red\" editing server \"prod\" production server. External users always use defult option \"ext\".","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/other_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"sc_info() returns information available database languages sc_rate_limit_table() returns 3x1 dataframe following columns remaining much requests can sent /table endpoint rate limit reached. limit number requests allowed per hour. reset tiestamp rate limit reset. Ususally, less one hour `current time.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/other_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Other endpoints of the STATcube REST API — other_endpoints","text":"","code":"sc_info() #>   locale displayName #> 1     de     Deutsch #> 2     en     English sc_rate_limit_table() #> remaining: 100/100 #> reset:     2022-08-27 17:39:26"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Links to important STATcube and OGD pages — sc_browse","title":"Links to important STATcube and OGD pages — sc_browse","text":"collection links, browse important STATcube pages.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Links to important STATcube and OGD pages — sc_browse","text":"","code":"sc_browse(server = \"ext\")  sc_browse_preferences(server = \"ext\")  sc_browse_ogd()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Links to important STATcube and OGD pages — sc_browse","text":"server STATcube API server. Defaults external Server via \"ext\". Oher options \"red\" editing server \"prod\" production server. External users always use defult option \"ext\".","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Links to important STATcube and OGD pages — sc_browse","text":"","code":"# Show starting page sc_browse() # Show the preferences page with the API key sc_browse_preferences()  # Show the landing page for OGD datasets sc_browse_ogd()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache responses from the STATcube REST API — sc_cache","title":"Cache responses from the STATcube REST API — sc_cache","text":"Functions cache requested resources directory ~/.STATcubeR_cache reuse calls sc_table(), sc_table_custom() sc_schema() forth. functions designed testing documentation regarded part STATcubeR interface. caching logic likely change future case sc_cache_clear() required purge old cache entries.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache responses from the STATcube REST API — sc_cache","text":"","code":"## enable caching for the current R session sc_cache_enable(verbose)  ## disable caching for the current R session sc_cache_disable()  sc_cache_enabled()  ## remove all files from the cache sc_cache_clear()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache responses from the STATcube REST API — sc_cache","text":"verbose print instuctions set caching persistently via environment variables?","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cache responses from the STATcube REST API — sc_cache","text":"Caching can set using environment variables. set persistent cache Open Data REST API, following lines .Renviron can used.   Note caches always used check verify resources unchanged server. Caching implemented endpoints sc_info() sc_rate_limit_table().","code":"STATCUBE_KEY       = YOUR_API_KEY_GOES_HERE STATCUBE_CACHE     = TRUE OD_CACHE_DIR       = \"~/.cache/STATcubeR/open_data/\" STATCUBE_CACHE_DIR = \"~/.cache/STATcubeR/api/\""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_cache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cache responses from the STATcube REST API — sc_cache","text":"sc_cache_enabled: informs wether cache currently enabled","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Common interface for STATcubeR datasets — sc_data","title":"Common interface for STATcubeR datasets — sc_data","text":"class represents common interface datasets returned STATcube REST API OGD datasets. sc_data obects usually created od_table() sc_table().","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Common interface for STATcubeR datasets — sc_data","text":"data raw data. data.frame uses codes field variables column names. obtain labeled data, use $tabulate(). language language used labeling. \"en\" \"de\" meta list containing metadata dataset. least following entries $source dataframe single row contains information data source. $measures dataframe one row every measure dataset. contains codes labels measure well number NAs. Derived classes might add additional columns. $fields dataframe one row every field dataset. contains codes labels measure well total codes. Derived classes might add additional columns recode object class sc_recoder can used change labels perform recoding operations.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Common interface for STATcubeR datasets — sc_data","text":"sc_data$new() sc_data$field() sc_data$tabulate() sc_data$total_codes() sc_data$clone()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Common interface for STATcubeR datasets — sc_data","text":"class exported. Use od_table() sc_table() initialize objects class sc_data.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$new(data, meta, fields)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"data, meta, fields raw data, metadata field information. use directly initialize objects sc_table() od_table()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"method-field-","dir":"Reference","previous_headings":"","what":"Method field()","title":"Common interface for STATcubeR datasets — sc_data","text":"get information specific field. format reurn value similar $meta. data.frame includes codes labels level field.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$field(i = 1)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"specifier field. Integer character. interger provided, match row number $meta$fields. character provided, field matched using pmatch() available codes labels.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) x$field(\"Sex\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"method-tabulate-","dir":"Reference","previous_headings":"","what":"Method tabulate()","title":"Common interface for STATcubeR datasets — sc_data","text":"create tidy dataset. See sc_tabulate() details.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$tabulate(...)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"... arguments passed sc_tabulate()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\")"},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$total_codes(...)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"... key value pairs define total codes. Key field code value code $field(). empty, return data.frame specified total codes. Keys values can also use labels instead codes. See examples.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") earnings$tabulate(\"Sex\", \"Form of employment\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Common interface for STATcubeR datasets — sc_data","text":"objects class cloneable method.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"sc_data$clone(deep = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common interface for STATcubeR datasets — sc_data","text":"deep Whether make deep clone.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common interface for STATcubeR datasets — sc_data","text":"","code":"## create a new sc_data object via od_table() x <- od_table(\"OGD_krebs_ext_KREBS_1\")  ## show data x$data #> # A STATcubeR tibble: 46,479 x 5 #>    `C-TUM_ICD10_3ST-0` `C-BERJ-0` `C-BUNDESLAND-0` `C-KRE_GESCHLECHT-… #>  * <fct>               <fct>      <fct>            <fct>               #>  1 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-1     GESCHLECHT-1        #>  2 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-1        #>  3 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-2     GESCHLECHT-2        #>  4 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-1        #>  5 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-3     GESCHLECHT-2        #>  6 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     GESCHLECHT-1        #>  7 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-4     GESCHLECHT-2        #>  8 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-5     GESCHLECHT-1        #>  9 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     GESCHLECHT-1        #> 10 TUM_ICD10_3ST-C00   BERJ-1983  BUNDESLAND-6     GESCHLECHT-2        #> # … with 46,469 more rows, and 1 more variable: F-KRE <int>  ## show metadata x$meta #> $source #> # STATcubeR metadata: 1 x 7 #>   code                  label                                    lang  #>   <chr>                 <chr>                                    <chr> #> 1 OGD_krebs_ext_KREBS_1 Cancer statistics by reporting year, pr… en    #> # … with 4 more columns: 'label_de', 'label_en', 'requested', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 5 #>   code  label                     NAs #>   <chr> <chr>                   <int> #> 1 F-KRE Number of records F-KRE     0 #> # … with 2 more columns: 'label_de', 'label_en' #>  #> $fields #> # STATcubeR metadata: 4 x 7 #>   code               label                   total_code #>   <chr>              <chr>                   <chr>      #> 1 C-TUM_ICD10_3ST-0  Tumore ICD/10 3-Steller NA         #> 2 C-BERJ-0           Reporting year          NA         #> 3 C-BUNDESLAND-0     Province of residence   NA         #> 4 C-KRE_GESCHLECHT-0 Sex                     NA         #> # … with 4 more columns: 'label_de', 'label_en', 'nitems', 'type' #>   ## ------------------------------------------------ ## Method `sc_data$field` ## ------------------------------------------------  x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$field(1) #> # STATcubeR metadata: 95 x 8 #>    code              label                    parsed                   #>    <chr>             <chr>                    <chr>                    #>  1 TUM_ICD10_3ST-C00 <C00> Bösartige Neubild… <C00> Bösartige Neubild… #>  2 TUM_ICD10_3ST-C01 <C01> Bösartige Neubild… <C01> Bösartige Neubild… #>  3 TUM_ICD10_3ST-C02 <C02> Bösartige Neubild… <C02> Bösartige Neubild… #>  4 TUM_ICD10_3ST-C03 <C03> Bösartige Neubild… <C03> Bösartige Neubild… #>  5 TUM_ICD10_3ST-C04 <C04> Bösartige Neubild… <C04> Bösartige Neubild… #>  6 TUM_ICD10_3ST-C05 <C05> Bösartige Neubild… <C05> Bösartige Neubild… #>  7 TUM_ICD10_3ST-C06 <C06> Bösartige Neubild… <C06> Bösartige Neubild… #>  8 TUM_ICD10_3ST-C07 <C07> Bösartige Neubild… <C07> Bösartige Neubild… #>  9 TUM_ICD10_3ST-C08 <C08> Bösartige Neubild… <C08> Bösartige Neubild… #> 10 TUM_ICD10_3ST-C09 <C09> Bösartige Neubild… <C09> Bösartige Neubild… #> # … with 85 more rows #> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order' x$field(\"Sex\") #> # STATcubeR metadata: 2 x 8 #>   code         label  parsed #>   <chr>        <chr>  <chr>  #> 1 GESCHLECHT-1 male   male   #> 2 GESCHLECHT-2 female female #> # … with 5 more columns: 'label_de', 'label_en', 'parent', 'visible', 'order'  ## ------------------------------------------------ ## Method `sc_data$tabulate` ## ------------------------------------------------  x <- od_table(\"OGD_krebs_ext_KREBS_1\") x$tabulate(\"Reporting year\", \"Sex\") #> # A STATcubeR tibble: 74 x 3 #>    `Reporting year` Sex    `Number of records F-KRE` #>  * <date>           <fct>                      <int> #>  1 1983-01-01       male                       14492 #>  2 1983-01-01       female                     17476 #>  3 1984-01-01       male                       14794 #>  4 1984-01-01       female                     17449 #>  5 1985-01-01       male                       14552 #>  6 1985-01-01       female                     17445 #>  7 1986-01-01       male                       14626 #>  8 1986-01-01       female                     17236 #>  9 1987-01-01       male                       14850 #> 10 1987-01-01       female                     17838 #> # … with 64 more rows  ## ------------------------------------------------ ## Method `sc_data$total_codes` ## ------------------------------------------------  earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$total_codes(Sex = \"Sum total\", Citizenship = \"Total\",                      Region = \"Total\", `Form of employment` = \"Total\") earnings$tabulate(\"Form of employment\") #> # A STATcubeR tibble: 6 x 6 #>   `Form of employmen… `Arithmetic mea… `1st quartile` `2nd quartile (… #> * <fct>                          <dbl>          <dbl>            <dbl> #> 1 \"Standard employme…             19.0           12.8             16.2 #> 2 \"Non-standard empl…             15.2           10.2             13.0 #> 3 \"Non-standard empl…             15.9           10.7             13.8 #> 4 \"Non-standard empl…             16.8           10.2             13.4 #> 5 \"Non-standard empl…             12              9               10.1 #> 6 \"Non-standard empl…             14.0           11.5             13.5 #> # … with 2 more variables: 3rd quartile <dbl>, #> #   Number of employees <dbl> earnings$tabulate(\"Sex\", \"Form of employment\") #> # A STATcubeR tibble: 12 x 7 #>    Sex    `Form of employment`         `Arithmetic mea… `1st quartile` #>  * <fct>  <fct>                                   <dbl>          <dbl> #>  1 Male   \"Standard employment \"                   20.0          13.5  #>  2 Male   \"Non-standard employment (t…             16.5          10.5  #>  3 Male   \"Non-standard employment: p…             18.8          11.1  #>  4 Male   \"Non-standard employment: f…             18.3          10.9  #>  5 Male   \"Non-standard employment: m…             12.6           9    #>  6 Male   \"Non-standard employment: t…             14.4          12    #>  7 Female \"Standard employment \"                   16.3          11.1  #>  8 Female \"Non-standard employment (t…             14.6          10.0  #>  9 Female \"Non-standard employment: p…             15.2          10.6  #> 10 Female \"Non-standard employment: f…             15.2           9.68 #> 11 Female \"Non-standard employment: m…             11.6           9.02 #> 12 Female \"Non-standard employment: t…             13.0          10.4  #> # … with 3 more variables: 2nd quartile (median) <dbl>, #> #   3rd quartile <dbl>, Number of employees <dbl>"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_json_get_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the server from a json request — sc_json_get_server","title":"Get the server from a json request — sc_json_get_server","text":"parses json request returns short string representing corresponding STATcube server","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_json_get_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the server from a json request — sc_json_get_server","text":"","code":"sc_json_get_server(json)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_json_get_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the server from a json request — sc_json_get_server","text":"json path request json","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_json_get_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the server from a json request — sc_json_get_server","text":"\"ext\", \"red\" \"prod\" depending database uri json request","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_json_get_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the server from a json request — sc_json_get_server","text":"","code":"sc_example('accomodation') %>% sc_json_get_server() #> [1] \"ext\""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage your API Keys — sc_key","title":"Manage your API Keys — sc_key","text":"Functions get/set STATcube API keys make available calls STATcube API.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage your API Keys — sc_key","text":"","code":"sc_key(server = \"ext\", test = FALSE)  sc_key_set(key, server = \"ext\", test = TRUE)  sc_key_get(server = \"ext\")  sc_key_prompt(server = \"ext\", test = TRUE)  sc_key_exists(server = \"ext\")  sc_key_valid(key = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage your API Keys — sc_key","text":"server STATcube API server. Defaults external Server via \"ext\". Oher options \"red\" editing server \"prod\" production server. External users always use defult option \"ext\". test Use sc_key_valid() verify key? key invalid, error returned key set updated. key (string) API key. display key, call sc_browse_preferences().","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage your API Keys — sc_key","text":"functions return key (invisibly) except sc_key_exists() sc_key_valid(), return logical() length one.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_key.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage your API Keys — sc_key","text":"sc_key: forwards sc_key_get() key already present. Otherwise, sc_key_prompt() invoked. sc_key_set: can used pass key parameter (string) sc_key_get: returns key, exists. Otherwise, error thrown. sc_key_prompt: prompts key via readline() sc_key_exists: returns TRUE key set FALSE otherwise. sc_key_valid: performs test request returns TRUE key valid FALSE otherwise.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_last_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Error handling for the STATcube REST API — sc_last_error","title":"Error handling for the STATcube REST API — sc_last_error","text":"case API requests unsuccessfull, STATcubeR throw errors summarize httr error type meaning. Requests considered unsuccessfull one following applies response returns TRUE httr::http_error(). response type \"application/json\" cases useful get direct access faulty response object. purpose, possible use sc_last_error() provide httr response object last unsuccessfull request.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_last_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error handling for the STATcube REST API — sc_last_error","text":"","code":"sc_last_error()  sc_last_error_parsed()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_last_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error handling for the STATcube REST API — sc_last_error","text":"return value httr::GET() httr::POST().","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_last_error.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Error handling for the STATcube REST API — sc_last_error","text":"sc_last_error_parsed: returns last error list containing response content response status","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_last_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error handling for the STATcube REST API — sc_last_error","text":"","code":"try(sc_table_saved(\"invalid_id\")) #> Error in sc_check_response(.) : Bad Request (HTTP 400). last_error <- sc_last_error() httr::http_status(last_error) #> $category #> [1] \"Client error\" #>  #> $reason #> [1] \"Bad Request\" #>  #> $message #> [1] \"Client error: (400) Bad Request\" #>  sc_last_error_parsed() #> $content #> $content$message #> [1] \"The requested TXD 'invalid_id' could not be found for the current user.\" #>  #> $content$errorType #> [1] \"TXD_NOT_FOUND\" #>  #> $content$component #> [1] \"invalid_id\" #>  #>  #> $status #> $status$category #> [1] \"Client error\" #>  #> $status$reason #> [1] \"Bad Request\" #>  #> $status$message #> [1] \"Client error: (400) Bad Request\" #>  #>"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode sc_table objects — sc_recoder","title":"Recode sc_table objects — sc_recoder","text":"collection methods can used modify object class sc_table reference. Typical usage acces recode binding sc_table object use method chaining perform recode operations.   See example section details.","code":""},{"path":[]},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Recode sc_table objects — sc_recoder","text":"sc_recoder$new() sc_recoder$label_field() sc_recoder$label_measure() sc_recoder$level() sc_recoder$total_codes() sc_recoder$visible() sc_recoder$order()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Recode sc_table objects — sc_recoder","text":"Create new recoder instance. automatically performed setup sc_data objects","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$new(x)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"x private environment sc_data object","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-label-field-","dir":"Reference","previous_headings":"","what":"Method label_field()","title":"Recode sc_table objects — sc_recoder","text":"Change label field variable","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$label_field(field, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code language language, \"de\" \"en\" new new label","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-label-measure-","dir":"Reference","previous_headings":"","what":"Method label_measure()","title":"Recode sc_table objects — sc_recoder","text":"Change label measure variable","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$label_measure(measure, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"measure measure code language language \"de\" \"en\" new new label","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-level-","dir":"Reference","previous_headings":"","what":"Method level()","title":"Recode sc_table objects — sc_recoder","text":"Change labels level","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$level(field, level, language, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code level level code field language language \"de\" \"en\" new new label level","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-total-codes-","dir":"Reference","previous_headings":"","what":"Method total_codes()","title":"Recode sc_table objects — sc_recoder","text":"Cheange total code field","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$total_codes(field, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code new level code field NA. used new total code. case NA, total code unset.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-visible-","dir":"Reference","previous_headings":"","what":"Method visible()","title":"Recode sc_table objects — sc_recoder","text":"set visibility level. Invisible levels ommited output $tabulate() affect aggregation","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$visible(field, level, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code level level code field new visibility. TRUE FALSE","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"method-order-","dir":"Reference","previous_headings":"","what":"Method order()","title":"Recode sc_table objects — sc_recoder","text":"set order levels.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode sc_table objects — sc_recoder","text":"","code":"sc_recoder$order(field, new)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode sc_table objects — sc_recoder","text":"field field code new new order. permutation level codes field. alternatively, integer vector defines permutation.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_recoder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode sc_table objects — sc_recoder","text":"","code":"x <- od_table(\"OGD_krebs_ext_KREBS_1\")  x$recode$   label_field(\"C-KRE_GESCHLECHT-0\", \"en\", \"SEX\")$   label_measure(\"F-KRE\", \"en\", \"NUMBER\")$   level(\"C-KRE_GESCHLECHT-0\", \"GESCHLECHT-1\", \"en\", \"MALE\")  x$tabulate(\"C-KRE_GESCHLECHT-0\", \"F-KRE\") #> # A STATcubeR tibble: 2 x 2 #>   SEX    NUMBER #> * <fct>   <int> #> 1 female  25862 #> 2 MALE    27580  earnings <- od_table(\"OGD_veste309_Veste309_1\") earnings$recode$   total_codes(\"C-A11-0\", \"A11-1\")$   total_codes(\"C-STAATS-0\", \"STAATS-9\")$   total_codes(\"C-VEBDL-0\", \"VEBDL-10\")$   total_codes(\"C-BESCHV-0\", \"BESCHV-1\")  earnings$total_codes() #> # A data frame: 4 × 2 #>   code       total_code #>   <chr>      <chr>      #> 1 C-A11-0    A11-1      #> 2 C-STAATS-0 STAATS-9   #> 3 C-VEBDL-0  VEBDL-10   #> 4 C-BESCHV-0 BESCHV-1    earnings$tabulate(\"C-STAATS-0\") #> # A STATcubeR tibble: 8 x 6 #>   Citizenship        `Arithmetic mea… `1st quartile` `2nd quartile (m… #> * <fct>                         <dbl>          <dbl>             <dbl> #> 1 \"Austrian\"                     18.5          12.4               15.9 #> 2 \"Non-Austrian \"                14.4           9.72              12.3 #> 3 \"EU-28/EWR/Switze…             15.2          10.0               12.8 #> 4 \"EU-15/EWR before…             19.6          11.9               15.9 #> 5 \"EU-13 EU Member …             13.0           9.59              11.9 #> 6 \"Former Yugoslavi…             12.8           9.58              12.0 #> 7 \"Turkey\"                       12.2           9.35              11.3 #> 8 \"Other\"                        13.8           9.07              10.9 #> # … with 2 more variables: 3rd quartile <dbl>, #> #   Number of employees <dbl> earnings$recode$visible(\"C-STAATS-0\", \"STAATS-8\", FALSE) earnings$tabulate(\"C-STAATS-0\") #> # A STATcubeR tibble: 7 x 6 #>   Citizenship        `Arithmetic mea… `1st quartile` `2nd quartile (m… #> * <fct>                         <dbl>          <dbl>             <dbl> #> 1 \"Austrian\"                     18.5          12.4               15.9 #> 2 \"Non-Austrian \"                14.4           9.72              12.3 #> 3 \"EU-28/EWR/Switze…             15.2          10.0               12.8 #> 4 \"EU-15/EWR before…             19.6          11.9               15.9 #> 5 \"EU-13 EU Member …             13.0           9.59              11.9 #> 6 \"Former Yugoslavi…             12.8           9.58              12.0 #> 7 \"Turkey\"                       12.2           9.35              11.3 #> # … with 2 more variables: 3rd quartile <dbl>, #> #   Number of employees <dbl>  earnings$recode$   order(\"C-A11-0\", c(\"A11-3\", \"A11-1\", \"A11-2\"))"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /schema endpoint — sc_schema","title":"Create a request against the /schema endpoint — sc_schema","text":"Invoke /schema endpoint STATcube REST API. case sc_schema_catalogue(), recurse datasets tables return nested list ids labels resources. sc_schema_db(), recurse valuesets return list resources available tor specific dataset. return values can displayed tree object.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /schema endpoint — sc_schema","text":"","code":"sc_schema(   resource_id = NULL,   depth = NULL,   language = c(\"en\", \"de\"),   key = NULL,   server = \"ext\" )  # S3 method for sc_schema print(x, tree = NULL, ..., limit = 30)  sc_schema_catalogue(   depth = \"folder\",   language = c(\"en\", \"de\"),   key = NULL,   server = \"ext\" )  sc_schema_db(db_id, depth = \"valueset\", language = c(\"en\", \"de\"), key = NULL)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a request against the /schema endpoint — sc_schema","text":"resource_id resource identifier uid format depth provided, request recurse given level. datasets, available options NULL (recursion), \"folder\", \"field\" \"valueset\". catalogue, NULL \"folder\" applicable. language language used labeling. \"en\" \"de\" key (string) API key. display key, call sc_browse_preferences(). server STATcube API server. Defaults external Server via \"ext\". Oher options \"red\" editing server \"prod\" production server. External users always use defult option \"ext\". x object printed tree wether use data.tree package printing. limit, ... passed data.tree::print.Node() db_id database id","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_schema.html","id":"printing-with-data-tree","dir":"Reference","previous_headings":"","what":"Printing with data.tree","title":"Create a request against the /schema endpoint — sc_schema","text":"limit ... simply ignored tree set FALSE, default. printing via data.tree can take longer default implementation x need converted data.tree node. use data.tree printing permanently, use","code":"options(STATcubeR.print_tree = TRUE)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a request against the /schema endpoint — sc_schema","text":"","code":"my_catalogue <- sc_schema_catalogue()  ## print my_catalogue #>                                                                         levelName #> 1  Extern V9                                                                      #> 2   ¦--Examples                                                                   #> 3   ¦   ¦--Communes (Demo)                                                        #> 4   ¦   ¦--People                                                                 #> 5   ¦   ¦--People multilingual                                                    #> 6   ¦   ¦--Retail Banking ML en                                                   #> 7   ¦   ¦--Monitoring                                                             #> 8   ¦   ¦--Standardtabelle / Default table (defaulttable_depeopleml)              #> 9   ¦   ¦--Standardtabelle / Default table (defaulttable_dedemo)                  #> 10  ¦   ¦--E-A_nach_Bundeslaendern_dedemo                                         #> 11  ¦   °--Jahre_nach_NUTS_dedemo                                                 #> 12  ¦--Publications and services                                                  #> 13  ¦   ¦--Economic Trend Monitor                                                 #> 14  ¦   ¦   ¦--Economic Trend Monitor                                             #> 15  ¦   ¦   °--Standardtabelle / Default table (defaulttable_dekonjunkturmonitor) #> 16  ¦   °--Austrian Economic Atlas                                                #> 17  ¦       ¦--01 Key data Austria and European Union                             #> 18  ¦       ¦--02 Key data Federal provinces                                      #> 19  ¦       ¦--03 Key data on economic branches                                   #> 20  ¦       ¦--04 Key data on economic branches by enterprise size classes        #> 21  ¦       ¦--05 Key data on economic branches compared with the EU              #> 22  ¦       ¦--06 Key data on economic branches by federal provinces              #> 23  ¦       ¦--07 Key data industry                                               #> 24  ¦       ¦--08 Key data construction                                           #> 25  ¦       ¦--09 Key data trade                                                  #> 26  ¦       ¦--10 Key data tourism                                                #> 27  ¦       ¦--11 Key data transport                                              #> 28  ¦       ¦--12 Key data foreign trade                                          #> 29  ¦       ¦--13 Key data agriculture and foresty                                #> 30  ¦       °--... 13 nodes w/ 0 sub                                              #> 31  °--... 7 nodes w/ 1398 sub                                                    #>        type #> 1    FOLDER #> 2    FOLDER #> 3  DATABASE #> 4  DATABASE #> 5  DATABASE #> 6  DATABASE #> 7     TABLE #> 8     TABLE #> 9     TABLE #> 10    TABLE #> 11    TABLE #> 12   FOLDER #> 13   FOLDER #> 14 DATABASE #> 15    TABLE #> 16   FOLDER #> 17 DATABASE #> 18 DATABASE #> 19 DATABASE #> 20 DATABASE #> 21 DATABASE #> 22 DATABASE #> 23 DATABASE #> 24 DATABASE #> 25 DATABASE #> 26 DATABASE #> 27 DATABASE #> 28 DATABASE #> 29 DATABASE #> 30          #> 31           ## access the parsed catalogue my_catalogue$Statistics$`Labour Market` #>                                                              levelName #> 1  Labour Market                                                       #> 2   ¦--Job Seeker                                                      #> 3   ¦--Labour Market Policy                                            #> 4   ¦--Working Time                                                    #> 5   ¦--Activity Status                                                 #> 6   ¦--Employment                                                      #> 7   ¦--Job Vacancies                                                   #> 8   ¦   ¦--Offene Stellen (Jahresdurchschnitt) ab 2009                 #> 9   ¦   ¦--Job vacancies quarterly as of 2009                          #> 10  ¦   ¦--Standardtabelle / Default table (defaulttable_deoffstelljd) #> 11  ¦   °--Standardtabelle / Default table (defaulttable_deoffstell)   #> 12  ¦--Working hours (Labour Force Survey)                             #> 13  ¦--Austrian Micro census - Labour Force Survey Yearly Data         #> 14  ¦--Austrian Micro census - Labour Force Survey Quarterly Data      #> 15  ¦--Mikrozensus-Zeitreihe ab 1974                                   #> 16  ¦--Standardtabelle / Default table (defaulttable_deake002q)        #> 17  ¦--Standardtabelle / Default table (defaulttable_deake005)         #> 18  ¦--Standardtabelle / Default table (defaulttable_deake001j)        #> 19  °--Standardtabelle / Default table (defaulttable_deake003j)        #>        type #> 1    FOLDER #> 2    FOLDER #> 3    FOLDER #> 4    FOLDER #> 5    FOLDER #> 6    FOLDER #> 7    FOLDER #> 8  DATABASE #> 9  DATABASE #> 10    TABLE #> 11    TABLE #> 12 DATABASE #> 13 DATABASE #> 14 DATABASE #> 15 DATABASE #> 16    TABLE #> 17    TABLE #> 18    TABLE #> 19    TABLE my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)` #> DATABASE: Working hours (Labour Force Survey) #> # Get more info with `sc_schema_db('str:database:deake005')`   db_schema <- sc_schema_db(\"deake005\")  # printing db_schema #>                                                                                   levelName #> 1  Working hours (Labour Force Survey)                                                      #> 2   ¦--Factors                                                                              #> 3   ¦   ¦--Average hours actually worked per week                                           #> 4   ¦   ¦   ¦--Average hours actually worked per week                                       #> 5   ¦   ¦   °--functions                                                                    #> 6   ¦   ¦--Average hours usually worked per week                                            #> 7   ¦   ¦   ¦--Average hours usually worked per week                                        #> 8   ¦   ¦   °--functions                                                                    #> 9   ¦   ¦--Volume of hours worked in the main job per year in million hours                 #> 10  ¦   ¦   ¦--Volume of hours worked in the main job per year in million hours             #> 11  ¦   ¦   °--functions                                                                    #> 12  ¦   ¦--Volume of hours worked overtime (paid) per year in million hours                 #> 13  ¦   ¦   ¦--Volume of hours worked overtime (paid) per year in million hours             #> 14  ¦   ¦   °--functions                                                                    #> 15  ¦   ¦--Volume of hours worked overtime (unpaid) per year in million hours               #> 16  ¦   ¦   ¦--Volume of hours worked overtime (unpaid) per year in million hours           #> 17  ¦   ¦   °--functions                                                                    #> 18  ¦   ¦--Volume of hours worked overtime (paid/unpaid) per year in million hours          #> 19  ¦   ¦   ¦--Volume of hours worked overtime (paid/unpaid) per year in million hours      #> 20  ¦   ¦   °--functions                                                                    #> 21  ¦   ¦--Volume of hours worked in the second job per year in million hours               #> 22  ¦   ¦   ¦--Volume of hours worked in the second job per year in million hours           #> 23  ¦   ¦   °--functions                                                                    #> 24  ¦   ¦--Average hours worked overtime per week related to the total of employees         #> 25  ¦   ¦   ¦--Average hours worked overtime per week related to the total of employees     #> 26  ¦   ¦   °--functions                                                                    #> 27  ¦   °--Average hours worked overtime per week related to employees working overtime     #> 28  ¦       ¦--Average hours worked overtime per week related to employees working overtime #> 29  ¦       °--functions                                                                    #> 30  °--... 7 nodes w/ 1077 sub                                                              #>             type #> 1       DATABASE #> 2          GROUP #> 3        MEASURE #> 4  STAT_FUNCTION #> 5                #> 6        MEASURE #> 7  STAT_FUNCTION #> 8                #> 9        MEASURE #> 10 STAT_FUNCTION #> 11               #> 12       MEASURE #> 13 STAT_FUNCTION #> 14               #> 15       MEASURE #> 16 STAT_FUNCTION #> 17               #> 18       MEASURE #> 19 STAT_FUNCTION #> 20               #> 21       MEASURE #> 22 STAT_FUNCTION #> 23               #> 24       MEASURE #> 25 STAT_FUNCTION #> 26               #> 27       MEASURE #> 28 STAT_FUNCTION #> 29               #> 30                # access child nodes db_schema$`Demographic Characteristics` #>                           levelName     type #> 1  Demographic Characteristics         GROUP #> 2   ¦--Gender                          FIELD #> 3   ¦   °--Gender                   VALUESET #> 4   ¦       ¦--male                    VALUE #> 5   ¦       ¦--female                  VALUE #> 6   ¦       °--Not classifiable <0>    VALUE #> 7   ¦--Age in years-groups             FIELD #> 8   ¦   ¦--Age in years-groups      VALUESET #> 9   ¦   ¦   ¦--Under 15 years          VALUE #> 10  ¦   ¦   ¦--15 to 19 years          VALUE #> 11  ¦   ¦   ¦--20 to 24 years          VALUE #> 12  ¦   ¦   ¦--25 to 29 years          VALUE #> 13  ¦   ¦   ¦--30 to 34 years          VALUE #> 14  ¦   ¦   ¦--35 to 39 years          VALUE #> 15  ¦   ¦   ¦--40 to 44 years          VALUE #> 16  ¦   ¦   ¦--45 to 49 years          VALUE #> 17  ¦   ¦   ¦--50 to 54 years          VALUE #> 18  ¦   ¦   ¦--55 to 59 years          VALUE #> 19  ¦   ¦   ¦--60 to 64 years          VALUE #> 20  ¦   ¦   ¦--65 to 69 years          VALUE #> 21  ¦   ¦   ¦--70 to 74 years          VALUE #> 22  ¦   ¦   ¦--75 years and older      VALUE #> 23  ¦   ¦   °--Not classifiable <0>    VALUE #> 24  ¦   ¦--Alter in Jahresgruppen   VALUESET #> 25  ¦   ¦   ¦--Under 15 years          VALUE #> 26  ¦   ¦   ¦--15 to 24 years          VALUE #> 27  ¦   ¦   ¦--25 to 34 years          VALUE #> 28  ¦   ¦   ¦--35 to 44 years          VALUE #> 29  ¦   ¦   ¦--45 to 54 years          VALUE #> 30  ¦   ¦   °--... 3 nodes w/ 0 sub          #> 31  ¦   °--... 1 nodes w/ 6 sub              #> 32  °--... 6 nodes w/ 80 sub                 db_schema$`Demographic Characteristics`$Gender$Gender #>                  levelName     type #> 1 Gender                   VALUESET #> 2  ¦--male                    VALUE #> 3  ¦--female                  VALUE #> 4  °--Not classifiable <0>    VALUE db_schema$`Demographic Characteristics`$Gender$Gender$male #> VALUE: male  # access the raw response from httr::GET() my_response <- attr(db_schema, \"response\") my_response$headers$date #> [1] \"Fri, 26 Aug 2022 20:49:00 GMT\" my_content <- httr::content(my_response) my_content$label #> [1] \"Working hours (Labour Force Survey)\"  # print with data.tree print(my_catalogue$Examples, tree = TRUE) #>                                                        levelName #> 1  Examples                                                      #> 2   ¦--Communes (Demo)                                           #> 3   ¦--People                                                    #> 4   ¦--People multilingual                                       #> 5   ¦--Retail Banking ML en                                      #> 6   ¦--Monitoring                                                #> 7   ¦--Standardtabelle / Default table (defaulttable_depeopleml) #> 8   ¦--Standardtabelle / Default table (defaulttable_dedemo)     #> 9   ¦--E-A_nach_Bundeslaendern_dedemo                            #> 10  °--Jahre_nach_NUTS_dedemo                                    #>        type #> 1    FOLDER #> 2  DATABASE #> 3  DATABASE #> 4  DATABASE #> 5  DATABASE #> 6     TABLE #> 7     TABLE #> 8     TABLE #> 9     TABLE #> 10    TABLE"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a request against the /table endpoint — sc_table","title":"Create a request against the /table endpoint — sc_table","text":"Send requests /table endpoint STATcube REST API. requests can use three formats corresponding functions sc_table() uses json file downloaded via STATcube GUI sc_table_custom() uses ids database, measures fields sc_table_saved() uses table uri saved table. three functions return object class \"sc_table\".","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a request against the /table endpoint — sc_table","text":"","code":"sc_table(   json_file,   language = c(\"en\", \"de\", \"both\"),   add_totals = TRUE,   key = NULL )  sc_examples_list()  sc_example(filename)  sc_table_custom(   db,   measures,   dimensions,   language = c(\"en\", \"de\"),   add_totals = TRUE,   key = NULL )  sc_table_saved_list(key = NULL, server = \"ext\")  sc_table_saved(table_uri, language = c(\"en\", \"de\"), key = NULL, server = \"ext\")"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a request against the /table endpoint — sc_table","text":"json_file path json file, downloaded via STATcube GUI (\"Open Data API Abfrage\") language language used labeling. \"en\" \"de\". third option \"\" import languages sending two requests /table endpoint. add_totals totals added measure json request? key (string) API key. display key, call sc_browse_preferences(). filename name example json file. db uid database measures character vector uids measures. Can either type MEASURE type STAT_FUNCTION dimensions character vector dimensions cube. Can either type FIELD type VALUESET. entries referred fields parsed API response server STATcube API server. Defaults external Server via \"ext\". Oher options \"red\" editing server \"prod\" production server. External users always use defult option \"ext\". table_uri Identifier saved table returned sc_table_saved_list()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a request against the /table endpoint — sc_table","text":"object class sc_table contains return value httr::POST() request obj$response. object also provides member functions parse response object. See sc_table_class class documentation.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a request against the /table endpoint — sc_table","text":"","code":"my_table <- sc_table(json_file = sc_example(\"population_timeseries.json\"))  # print my_table #> An object of class sc_table #>  #> Database    Population at the beginning of the quarter since 2002  #> Measures    Number of persons  #> Fields      Quarter, Age in single years <96>, Sex <2>, Commune #>             <2383> (Province-District)  #>  #> Request     2021-11-20 13:18:34  #> STATcubeR   0.3.4.4  # get matadata for the table my_table$meta #> $source #> # STATcubeR metadata: 1 x 6 #>   code       label                                               lang  #>   <chr>      <chr>                                               <chr> #> 1 debevstand Population at the beginning of the quarter since 2… en    #> # … with 3 more columns: 'label_de', 'label_en', 'scr_version' #>  #> $measures #> # STATcubeR metadata: 1 x 8 #>   code     label               NAs #>   <chr>    <chr>             <int> #> 1 F-ISIS-1 Number of persons     0 #> # … with 5 more columns: 'fun', 'precision', 'annotations', 'label_de', 'label_en' #>  #> $fields #> # STATcubeR metadata: 4 x 7 #>   code       label                              total_code #>   <chr>      <chr>                              <chr>      #> 1 C-A10-0    Quarter                            SC_TOTAL   #> 2 C-BESC51-0 Age in single years <96>           SC_TOTAL   #> 3 C-BESC11-0 Sex <2>                            SC_TOTAL   #> 4 C-C41-2    Commune <2383> (Province-District) SC_TOTAL   #> # … with 4 more columns: 'nitems', 'type', 'label_de', 'label_en' #>   # get a data.frame as.data.frame(my_table) #> # A STATcubeR tibble: 8,316 x 5 #>    Quarter    `Age in single years <96>` `Sex <2>` `Commune <2383> (P… #>  * <date>     <fct>                      <fct>     <fct>               #>  1 2002-01-01 Up to 14 years old         male      Burgenland <AT11>   #>  2 2002-01-01 Up to 14 years old         male      Carinthia <AT21>    #>  3 2002-01-01 Up to 14 years old         male      Vienna <AT13>       #>  4 2002-01-01 Up to 14 years old         male      Vorarlberg <AT34>   #>  5 2002-01-01 Up to 14 years old         male      Tyrol <AT33>        #>  6 2002-01-01 Up to 14 years old         male      Styria <AT22>       #>  7 2002-01-01 Up to 14 years old         male      Salzburg <AT32>     #>  8 2002-01-01 Up to 14 years old         male      Upper Austria <AT3… #>  9 2002-01-01 Up to 14 years old         male      Lower Austria <AT1… #> 10 2002-01-01 Up to 14 years old         female    Burgenland <AT11>   #> # … with 8,306 more rows, and 1 more variable: #> #   Number of persons <dbl>  # get metadata for field 2 my_table$field(2) #> # STATcubeR metadata: 7 x 7 #>   code     label              parsed             #>   <chr>    <chr>              <chr>              #> 1 BESN07-1 Up to 14 years old Up to 14 years old #> 2 BESN07-2 15 to 29 years old 15 to 29 years old #> 3 BESN07-3 30 to 44 years old 30 to 44 years old #> 4 BESN07-4 45 to 59 years old 45 to 59 years old #> 5 BESN07-5 60 to 74 years old 60 to 74 years old #> 6 BESN07-6 75 plus years old  75 plus years old  #> 7 SC_TOTAL Total              Total              #> # … with 4 more columns: 'label_de', 'label_en', 'visible', 'order'  sc_table_custom(   db = \"str:database:detouextregsai\",   measures = c(     \"str:statfn:detouextregsai:F-DATA1:F-ANK:SUM\",     \"str:measure:detouextregsai:F-DATA1:F-UEB\"   ),   dimensions = c(     \"str:field:detouextregsai:F-DATA1:C-SDB_TIT-0\",     \"str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93SUM-0\"   ) ) #> An object of class sc_table #>  #> Database    Accomodation statistics as of 1974 according to seasons  #> Measures    Arrivals, Nights spent  #> Fields      Season/Tourism Month, Country of origin  #>  #> Request     2022-08-26 20:49:11  #> STATcubeR   0.3.4.4  # get the ids and labels of all saved tables (saved_tables <- sc_table_saved_list()) #>             label                                             id #> 1   Bier auf Wein str:table:4520fba3-dffd-4f2a-9cd1-d46d710b6da4 #> 2    hierarchical str:table:1529fb5c-8f71-425c-bc95-a017f6534c8f #> 3             neu str:table:4d55ca7c-e999-49e4-90f4-396163195da5 #> 4 lebenserwartung str:table:b0f4779b-546e-4a6c-88a1-43038cdeaf7b #> 5         test123 str:table:9ba81454-32f5-4ab7-b904-c446940946f5 table_uri <- saved_tables$id[1]  # get a table based on one of these ids my_response <- sc_table_saved(table_uri) as.data.frame(my_response) #> # A STATcubeR tibble: 156 x 4 #>    Year       `Wine colour`     `Production in hecto… `Area in hectar… #>    <date>     <fct>                             <dbl>            <dbl> #>  1 2021-01-01 Wine (in total)                2460275.           42835. #>  2 2021-01-01 White wine                     1730468.           29428. #>  3 2021-01-01 Red wine and rosé               729806.           13407. #>  4 1970-01-01 Wine (in total)                3096130            41821  #>  5 1970-01-01 White wine                     2723071            36694  #>  6 1970-01-01 Red wine and rosé               373059             5127  #>  7 1971-01-01 Wine (in total)                1812790            42714  #>  8 1971-01-01 White wine                     1563710            37157  #>  9 1971-01-01 Red wine and rosé               249080             5557  #> 10 1972-01-01 Wine (in total)                2595615            42714  #> # … with 146 more rows"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for /table responses — sc_table_class","title":"Class for /table responses — sc_table_class","text":"R6 Class responses /table endpoint STATcube REST API.","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for /table responses — sc_table_class","text":"STATcubeR::sc_data -> sc_table","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Class for /table responses — sc_table_class","text":"response httr response raw raw response content annotation_legend list annotations occuring data data.frame two columns annotation keys annotation labels. rate_limit much requests left POST request table sent? Uses format sc_rate_limit_table(). json object class sc_json based json file used request","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for /table responses — sc_table_class","text":"STATcubeR::sc_data$field() STATcubeR::sc_data$total_codes()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for /table responses — sc_table_class","text":"sc_table_class$new() sc_table_class$update() sc_table_class$tabulate() sc_table_class$browse() sc_table_class$add_language()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for /table responses — sc_table_class","text":"Ususally, objects class sc_table generated one factory methods sc_table(), sc_table_saved() sc_table_custom(). constructor invoked directly, either omit parameters json file make sure match response.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$new(response, json = NULL, file = NULL, add_totals = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"response response httr::POST() /table endpoint. json json file used request string. file file path json file add_totals json request modified adding totals via add_toals parameter one factory functions (sc_table(), sc_table_custom()). Necessary, order also request totals via $add_language() method.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Class for /table responses — sc_table_class","text":"Update data re-sending json API. still experimental break object case new levels added one fields. example, new entry added timeseries","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$update()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"method-tabulate-","dir":"Reference","previous_headings":"","what":"Method tabulate()","title":"Class for /table responses — sc_table_class","text":"extension sc_tabulate() additional parameters.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$tabulate(..., round = TRUE, annotations = FALSE)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"... Parameters passed sc_tabulate() round apply rounding measure accoring precision provided API. annotations Include separate annotation columns returned table. parameter currently broken needs re-implemented","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"method-browse-","dir":"Reference","previous_headings":"","what":"Method browse()","title":"Class for /table responses — sc_table_class","text":"open dataset browser","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$browse()"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"method-add-language-","dir":"Reference","previous_headings":"","what":"Method add_language()","title":"Class for /table responses — sc_table_class","text":"add second language dataset","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for /table responses — sc_table_class","text":"","code":"sc_table_class$add_language(language = c(\"en\", \"de\"), key = NULL)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_table_class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for /table responses — sc_table_class","text":"language language add. \"en\" \"de\". key API key","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_tabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn sc_data objects into tidy data frames — sc_tabulate","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"sc_tabulate() extracts data table turns tidy data.frame. applies labeling data transforms time variables Date format satisfy certain STATcube Standards. sc_tabulate(table, ...) just alias table$tabulate(...) added rather complicated method can separate documentation page. recommended use table$tabulate() syntax ... argument decides measures /fields included output. measures given, measures included. true fields.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_tabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"","code":"sc_tabulate(   table,   ...,   .list = NULL,   raw = FALSE,   parse_time = TRUE,   recode_zeros = inherits(table, \"sc_table\"),   language = NULL,   sort = FALSE )"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_tabulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"table object class sc_data ... Names measures /fields .list allows define arguments ... character vector. raw FALSE (default), apply labeling dataset. Otherwise, return codes. parse_time time variables converted Date format? Ignored raw set TRUE. recode_zeros turn zero values NAs language language used labelling. default, dataset language (table$language) used. sort TRUE, resulting data sorted provided field values","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_tabulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"Aggregation done follows First, columns priovide total code via table$total_codes() used filter column == total_code column != total_code , remaining data aggregated using rowsum() ellipsis (...) supports partial matching codes labels. See Examples objects class sc_table two additional operations performed. zeros recoded NAs rounding done according precision measure. Ronding happens recoding NA values","code":""},{"path":[]},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sc_tabulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn sc_data objects into tidy data frames — sc_tabulate","text":"","code":"############################ OGD Data #######################################  table <- od_table(\"OGD_veste309_Veste309_1\")  # no arguments -> same output as `table$data` table$tabulate() #> # A STATcubeR tibble: 72 x 9 #>    Sex       Citizenship `Region (NUTS2)`   `Form of employment`       #>  * <fct>     <fct>       <fct>              <fct>                      #>  1 Sum total Total       Total              \"Total\"                    #>  2 Sum total Total       Total              \"Standard employment \"     #>  3 Sum total Total       Total              \"Non-standard employment … #>  4 Sum total Total       Total              \"Non-standard employment:… #>  5 Sum total Total       Total              \"Non-standard employment:… #>  6 Sum total Total       Total              \"Non-standard employment:… #>  7 Sum total Total       Total              \"Non-standard employment:… #>  8 Sum total Total       AT11 Burgenland    \"Total\"                    #>  9 Sum total Total       AT12 Lower Austria \"Total\"                    #> 10 Sum total Total       AT13 Vienna        \"Total\"                    #> # … with 62 more rows, and 5 more variables: Arithmetic mean <dbl>, #> #   1st quartile <dbl>, 2nd quartile (median) <dbl>, #> #   3rd quartile <dbl>, Number of employees <dbl>  # provide some fields -> aggregate to keep only these fields table$tabulate(\"Sex\", \"Citizenship\") #> # A STATcubeR tibble: 27 x 7 #>    Sex    Citizenship `Arithmetic mea… `1st quartile` `2nd quartile (… #>  * <fct>  <fct>                  <dbl>          <dbl>            <dbl> #>  1 Sum t… \"Total\"                266.          181.              230.  #>  2 Sum t… \"Austrian\"              18.5          12.4              15.9 #>  3 Sum t… \"Non-Austr…             14.4           9.72             12.3 #>  4 Sum t… \"EU-28/EWR…             15.2          10.0              12.8 #>  5 Sum t… \"EU-15/EWR…             19.6          11.9              15.9 #>  6 Sum t… \"EU-13 EU …             13.0           9.59             11.9 #>  7 Sum t… \"Former Yu…             12.8           9.58             12.0 #>  8 Sum t… \"Turkey\"                12.2           9.35             11.3 #>  9 Sum t… \"Other\"                 13.8           9.07             10.9 #> 10 Male   \"Total\"                290.          195.              246.  #> # … with 17 more rows, and 2 more variables: 3rd quartile <dbl>, #> #   Number of employees <dbl>  # provide some measures -> drop all other measures from the output table$tabulate(\"Arithmetic mean\") #> # A STATcubeR tibble: 72 x 5 #>    Sex       Citizenship `Region (NUTS2)`   `Form of employment`       #>  * <fct>     <fct>       <fct>              <fct>                      #>  1 Sum total Total       Total              \"Total\"                    #>  2 Sum total Total       Total              \"Standard employment \"     #>  3 Sum total Total       Total              \"Non-standard employment … #>  4 Sum total Total       Total              \"Non-standard employment:… #>  5 Sum total Total       Total              \"Non-standard employment:… #>  6 Sum total Total       Total              \"Non-standard employment:… #>  7 Sum total Total       Total              \"Non-standard employment:… #>  8 Sum total Total       AT11 Burgenland    \"Total\"                    #>  9 Sum total Total       AT12 Lower Austria \"Total\"                    #> 10 Sum total Total       AT13 Vienna        \"Total\"                    #> # … with 62 more rows, and 1 more variable: Arithmetic mean <dbl>  # mixture of measures and fields  -> keep exactly those columns table$tabulate(\"Sex\", \"Arithmetic mean\") #> # A STATcubeR tibble: 3 x 2 #>   Sex       `Arithmetic mean` #> * <fct>                 <dbl> #> 1 Sum total              385. #> 2 Male                   418. #> 3 Female                 342.  ## define total codes table$total_codes(   `C-A11-0` = \"A11-1\",   `C-STAATS-0` = \"STAATS-9\",   `C-VEBDL-0` = \"VEBDL-10\",   `C-BESCHV-0` = \"BESCHV-1\" )  ## alternatively, use partial matching to define totals table$total_codes(   Sex = \"Sum total\",   Citizenship = \"Total\",   Region = \"Total\",   `Form of employment` = \"Total\" )  # filter for totals in `Region (NUTS2)` and `Form of employment`. Drop totals # in `Sex` and `Citizenship`. table$tabulate(\"Sex\", \"Citizenship\") #> # A STATcubeR tibble: 16 x 7 #>    Sex    Citizenship `Arithmetic mea… `1st quartile` `2nd quartile (… #>  * <fct>  <fct>                  <dbl>          <dbl>            <dbl> #>  1 Male   \"Austrian\"              20.4          13.8             17.4  #>  2 Male   \"Non-Austr…             15.3          10.6             13.2  #>  3 Male   \"EU-28/EWR…             16.0          10.9             13.5  #>  4 Male   \"EU-15/EWR…             21.2          12.6             16.7  #>  5 Male   \"EU-13 EU …             13.6          10.3             12.7  #>  6 Male   \"Former Yu…             14.1          11.2             13.6  #>  7 Male   \"Turkey\"                13.3          10.4             12.8  #>  8 Male   \"Other\"                 14.0           9.07            11.2  #>  9 Female \"Austrian\"              15.9          11.1             14.0  #> 10 Female \"Non-Austr…             13.0           9.19            10.6  #> 11 Female \"EU-28/EWR…             13.7           9.38            11.3  #> 12 Female \"EU-15/EWR…             17.1          11.0             14.7  #> 13 Female \"EU-13 EU …             12.1           9.06            10.3  #> 14 Female \"Former Yu…             10.9           9                9.78 #> 15 Female \"Turkey\"                10.3           8.68             9.51 #> 16 Female \"Other\"                 13.3           9.07            10.6  #> # … with 2 more variables: 3rd quartile <dbl>, #> #   Number of employees <dbl>  ## switch language table$language <- \"de\"  ## `...` matches for codes and labels table$tabulate(\"C-A11-0\", \"Staats\", \"2. Quartil (Median)\") #> # A STATcubeR tibble: 16 x 3 #>    Geschlecht Staatsangehörigkeit                  `2. Quartil (Media… #>  * <fct>      <fct>                                              <dbl> #>  1 männlich   \"Österreich\"                                       17.4  #>  2 männlich   \"Nicht-Österreich\"                                 13.2  #>  3 männlich   \"EU-28/EWR/Schweiz (ohne Österreich…               13.5  #>  4 männlich   \"EU-15/EWR vor 2004/Schweiz \"                      16.7  #>  5 männlich   \"EU-13 Beitrittsstaaten ab 2004\"                   12.7  #>  6 männlich   \"ehemaliges Jugoslawien (außerhalb …               13.6  #>  7 männlich   \"Türkei\"                                           12.8  #>  8 männlich   \"Andere\"                                           11.2  #>  9 weiblich   \"Österreich\"                                       14.0  #> 10 weiblich   \"Nicht-Österreich\"                                 10.6  #> 11 weiblich   \"EU-28/EWR/Schweiz (ohne Österreich…               11.3  #> 12 weiblich   \"EU-15/EWR vor 2004/Schweiz \"                      14.7  #> 13 weiblich   \"EU-13 Beitrittsstaaten ab 2004\"                   10.3  #> 14 weiblich   \"ehemaliges Jugoslawien (außerhalb …                9.78 #> 15 weiblich   \"Türkei\"                                            9.51 #> 16 weiblich   \"Andere\"                                           10.6   ## Keep totals in the output by removing total codes table$tabulate(\"C-A11-0\")      # -> 2 rows: \"male\" \"female\" #> # A STATcubeR tibble: 2 x 6 #>   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Median… #> * <fct>                        <dbl>        <dbl>                <dbl> #> 1 männlich                      19.2         12.8                 16.3 #> 2 weiblich                      15.3         10.4                 13.4 #> # … with 2 more variables: 3. Quartil <dbl>, #> #   Zahl d unselbst Beschäftigten <dbl> table$total_codes(`C-A11-0` = NA) table$tabulate(\"C-A11-0\")      # -> 3 rows: \"total\", \"male\", \"female\" #> # A STATcubeR tibble: 3 x 6 #>   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Median… #> * <fct>                        <dbl>        <dbl>                <dbl> #> 1 insgesamt                     17.6         11.6                 15.1 #> 2 männlich                      19.2         12.8                 16.3 #> 3 weiblich                      15.3         10.4                 13.4 #> # … with 2 more variables: 3. Quartil <dbl>, #> #   Zahl d unselbst Beschäftigten <dbl>  ## table$tabulate(...) is an alias for sc_tabulate(table, ...) sc_tabulate(table, \"C-A11-0\") #> # A STATcubeR tibble: 3 x 6 #>   Geschlecht `Arithmetisches Mittel` `1. Quartil` `2. Quartil (Median… #> * <fct>                        <dbl>        <dbl>                <dbl> #> 1 insgesamt                     17.6         11.6                 15.1 #> 2 männlich                      19.2         12.8                 16.3 #> 3 weiblich                      15.3         10.4                 13.4 #> # … with 2 more variables: 3. Quartil <dbl>, #> #   Zahl d unselbst Beschäftigten <dbl>  ######################### STATcube REST API #################################  table_tourism <- sc_example(\"accomodation.json\") %>% sc_table(\"de\")  table_tourism$tabulate() #> # A STATcubeR tibble: 2,358 x 5 #>    `Saison/Tourismusm… Herkunftsland Beherbergungsbetr… Übernachtungen #>  * <date>              <fct>         <fct>                       <dbl> #>  1 1999-11-01          Österreich    Hotels gesamt              858602 #>  2 1999-11-01          Österreich    Ferienwohnungen i…          22398 #>  3 1999-11-01          Österreich    Sonstige                   386865 #>  4 1999-11-01          Deutschland   Hotels gesamt              620973 #>  5 1999-11-01          Deutschland   Ferienwohnungen i…          56012 #>  6 1999-11-01          Deutschland   Sonstige                    85583 #>  7 1999-11-01          andere Länder Hotels gesamt              544074 #>  8 1999-11-01          andere Länder Ferienwohnungen i…          30265 #>  9 1999-11-01          andere Länder Sonstige                    41945 #> 10 1999-12-01          Österreich    Hotels gesamt              928834 #> # … with 2,348 more rows, and 1 more variable: Ankünfte <dbl> table_tourism$tabulate(\"Saison/Tourismusmonat\") #> # A STATcubeR tibble: 262 x 3 #>    `Saison/Tourismusmonat` Übernachtungen Ankünfte #>  * <date>                           <dbl>    <dbl> #>  1 1999-11-01                     2646717   961334 #>  2 1999-12-01                     7373034  1771530 #>  3 2000-01-01                    12437812  2462258 #>  4 2000-02-01                    13480000  2532404 #>  5 2000-03-01                    11340174  2273436 #>  6 2000-04-01                     6138146  1666777 #>  7 2000-05-01                     5150347  1673232 #>  8 2000-06-01                     8908931  2438518 #>  9 2000-07-01                    14618147  3118576 #> 10 2000-08-01                    16498662  3248084 #> # … with 252 more rows table_tourism$tabulate(\"Saison/Tourismusmonat\", \"Ankünfte\") #> # A STATcubeR tibble: 262 x 2 #>    `Saison/Tourismusmonat` Ankünfte #>  * <date>                     <dbl> #>  1 1999-11-01                961334 #>  2 1999-12-01               1771530 #>  3 2000-01-01               2462258 #>  4 2000-02-01               2532404 #>  5 2000-03-01               2273436 #>  6 2000-04-01               1666777 #>  7 2000-05-01               1673232 #>  8 2000-06-01               2438518 #>  9 2000-07-01               3118576 #> 10 2000-08-01               3248084 #> # … with 252 more rows table_tourism$tabulate(\"Ankünfte\") #> # A STATcubeR tibble: 2,358 x 4 #>    `Saison/Tourismusmonat` Herkunftsland Beherbergungsbetrieb Ankünfte #>  * <date>                  <fct>         <fct>                   <dbl> #>  1 1999-11-01              Österreich    Hotels gesamt          371215 #>  2 1999-11-01              Österreich    Ferienwohnungen ins…     5365 #>  3 1999-11-01              Österreich    Sonstige                67272 #>  4 1999-11-01              Deutschland   Hotels gesamt          223856 #>  5 1999-11-01              Deutschland   Ferienwohnungen ins…    13095 #>  6 1999-11-01              Deutschland   Sonstige                24262 #>  7 1999-11-01              andere Länder Hotels gesamt          235343 #>  8 1999-11-01              andere Länder Ferienwohnungen ins…     6493 #>  9 1999-11-01              andere Länder Sonstige                14433 #> 10 1999-12-01              Österreich    Hotels gesamt          346040 #> # … with 2,348 more rows  ## TODO: param annotations does not work currently if (FALSE) {   table_trade <- sc_example(\"foreign_trade.json\") %>% sc_table(\"de\")   tt <- sc_tabulate(table_trade, \"Berichtsjahr\", \"Import, Wert in Euro\",                     annotations = TRUE)   tt   tt[['Import, Wert in Euro_a']] %>% str() }"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"data interface for STATgraph — sg_data","title":"data interface for STATgraph — sg_data","text":"Convert R objects special format web application. Currently, following objects convertible od_table: OGD Datasets sc_table: Responses STATcube REST API data.frame: Requires columns type factor, character, integer numeric, Date.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data interface for STATgraph — sg_data","text":"","code":"sg_data(x, ...)"},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data interface for STATgraph — sg_data","text":"x object converted ... Specifiers conversion. Currently ignored.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sg_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data interface for STATgraph — sg_data","text":"object class sg_data following methods $vars contains codes labels $times $measures $categories $tabulate(..., .list) aggregates data. ... contain codes $vars.","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/reference/sg_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data interface for STATgraph — sg_data","text":"","code":"# \\donttest{ library(STATcubeR)  cancer <- od_table(\"OGD_krebs_ext_KREBS_1\", language = \"de\") sg_data(cancer) #> Error in sg_data(cancer): could not find function \"sg_data\"  pop <- sc_table(json_file = sc_example(\"population_timeseries.json\")) sg_data(pop) #> Error in sg_data(pop): could not find function \"sg_data\"  sg_data(iris) #> Error in sg_data(iris): could not find function \"sg_data\"  ## basic usage y <- sg_data(cancer) #> Error in sg_data(cancer): could not find function \"sg_data\" y$vars #> Error in eval(expr, envir, enclos): object 'y' not found y$tabulate() #> Error in eval(expr, envir, enclos): object 'y' not found  ## recode varnames y$recode_varname(\"C-BERJ-0\", \"Jahr\") #> Error in eval(expr, envir, enclos): object 'y' not found y$recode_varname(\"C-TUM_ICD10_3ST-0\", \"Tumore\") #> Error in eval(expr, envir, enclos): object 'y' not found y$recode_varname(\"F-KRE\", \"Anzahl\") #> Error in eval(expr, envir, enclos): object 'y' not found y$tabulate() #> Error in eval(expr, envir, enclos): object 'y' not found  ## recode levels y$recode_levels(\"C-KRE_GESCHLECHT-0\", c(\"M\", \"W\")) #> Error in eval(expr, envir, enclos): object 'y' not found y$recode_levels(\"C-BUNDESLAND-0\", LETTERS[1:9]) #> Error in eval(expr, envir, enclos): object 'y' not found y$tabulate() #> Error in eval(expr, envir, enclos): object 'y' not found # }"},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-030","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.3.0","title":"STATcubeR 0.3.0","text":"New article sc_recoder Better parsing time variables (#15, #16) Use bootstrap 5 pkgdown 2.0.0 website Allow export import open data using tar archves (#20)","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-024","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.4","title":"STATcubeR 0.2.4","text":"add user-agent according vignette(\"api-packages\", \"httr\") check content types http status consistently document error handling ?sc_last_error new export: sc_last_error()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-023","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.3","title":"STATcubeR 0.2.3","text":"Almost changes 0.2.2 0.2.3 included #13 cleanup function names faster parsing sc_table() remove dependencies rmarkdown rstudioapi improve caching REST API support sc_schema() sc_table_saved()","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"documentation-updates-0-2-3","dir":"Changelog","previous_headings":"","what":"Documentation updates","title":"STATcubeR 0.2.3","text":"refactor pkgdown articles including old articles REST API modify readme showcase OGD, API base class update reference documentation reference index","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-022","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.2","title":"STATcubeR 0.2.2","text":"version finalizes #11 Common base class OGD data data REST API Improved print methods tibble Direct documentation certain R6 classes roxygen2 remove unnecessary exports","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-021","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.1","title":"STATcubeR 0.2.1","text":"remove dependency openssl avoid EOL warnings reading JSON requests start using NEWS.md reorganize README.md put open data front center","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"open-data-0-2-1","dir":"Changelog","previous_headings":"","what":"Open Data","title":"STATcubeR 0.2.1","text":"STATcubeR now contains functions access open government data https://data.statistik.gv./ new class od_table get OGD data methods tabulate reponses caching four new pkgdown articles od_table(), od_list(), od_resource() sc_data","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-020","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.2.0","title":"STATcubeR 0.2.0","text":"Update contents sc_example() Use Date instead POSIXct time variables Cache $meta $field memory class sc_table Add caching","code":""},{"path":"https://statistikat.github.io/STATcubeR/dev/news/index.html","id":"statcuber-011","dir":"Changelog","previous_headings":"","what":"STATcubeR 0.1.1","title":"STATcubeR 0.1.1","text":"Improve sc_example() Add sc_examples_list() get available examples add $browse() $edit() add language parameter sc_schema() pkgdown article custom tables (#6) update harmonize naming functions parameters","code":""}]
