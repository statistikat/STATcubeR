% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema.R, R/schema_catalogue.R, R/schema_db.R
\name{sc_schema}
\alias{sc_schema}
\alias{print.sc_schema}
\alias{sc_schema_catalogue}
\alias{sc_schema_db}
\title{Create a request against the /schema endpoint}
\usage{
sc_schema(
  resource_id = NULL,
  depth = NULL,
  language = c("en", "de"),
  key = sc_key()
)

\method{print}{sc_schema}(x, tree = NULL, ..., limit = 30)

sc_schema_catalogue(depth = "folder", language = c("en", "de"), key = sc_key())

sc_schema_db(
  db_id,
  depth = "valueset",
  language = c("en", "de"),
  key = sc_key()
)
}
\arguments{
\item{resource_id}{A resource identifier in uid format}

\item{depth}{If provided, the request will recurse into the given level.
For datasets, available options are \code{NULL} (no recursion), \code{"folder"},
\code{"field"} and \code{"valueset"}. For the catalogue, only \code{NULL} and \code{"folder"}
are applicable.}

\item{language}{The language to be used for labeling. \code{"en"} or \code{"de"}}

\item{key}{(\code{string}) An API key. To display your key, call
\code{\link[=sc_browse_preferences]{sc_browse_preferences()}}.}

\item{x}{object to be printed}

\item{tree}{wether to use the \code{data.tree} package for printing.}

\item{limit, ...}{passed to \code{\link[data.tree:print.Node]{data.tree::print.Node()}}}

\item{db_id}{a database id}
}
\description{
Invoke the \strong{/schema} endpoint of the STATcube REST API. In case of
\code{\link[=sc_schema_catalogue]{sc_schema_catalogue()}}, recurse into all datasets and tables and return a
nested list with ids and labels for all resources. For \code{\link[=sc_schema_db]{sc_schema_db()}},
recurse into all valuesets and return a list of all resources available
tor the specific dataset. The return values can be displayed as a
tree object.
}
\section{Printing with data.tree}{

\code{limit} and \code{...} will simply be ignored if \code{tree} is set to \code{FALSE}, which is
the default. The printing via \code{data.tree} can take longer than the default
implementation because \code{x} will need to be converted into a \code{data.tree} node.
To use \code{data.tree} printing permanently, use\if{html}{\out{<div class="sourceCode r">}}\preformatted{options(STATcubeR.print_tree = TRUE)
}\if{html}{\out{</div>}}
}

\examples{
if (sc_key_exists()) {

my_catalogue <- sc_schema_catalogue()

## print
my_catalogue

## access the parsed catalogue
my_catalogue$Statistics$`Labour Market`
my_catalogue$Statistics$`Labour Market`$`Working hours (Labour Force Survey)`

db_schema <- sc_schema_db("deake005")

# printing
db_schema

# access child nodes
db_schema$`Demographic Characteristics`
db_schema$`Demographic Characteristics`$Gender$Gender
db_schema$`Demographic Characteristics`$Gender$Gender$male

# access the raw response from httr::GET()
my_response <- attr(db_schema, "response")
my_response$headers$date
my_content <- httr::content(my_response)
my_content$label

# print with data.tree
print(my_catalogue$Examples, tree = TRUE)

}
}
\concept{functions for /schema}
