% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabulate.R
\name{sc_tabulate}
\alias{sc_tabulate}
\title{Turn sc_table objects into tidy data frames}
\usage{
sc_tabulate(
  table,
  ...,
  .list = NULL,
  parse_time = TRUE,
  round = TRUE,
  recode_zeros = TRUE,
  annotations = FALSE,
  raw = FALSE
)
}
\arguments{
\item{table}{An object of class \code{sc_table}}

\item{...}{Names of measures and/or fields}

\item{.list}{allows to define the arguments for \code{...} as a character vector.}

\item{parse_time}{should field variables of type time be converted
into a \code{POSIXct} format?}

\item{round}{use the precision of each measure for rounding?}

\item{recode_zeros}{turn zero values into \code{NA}s prior to rounding}

\item{annotations}{Include separate annotation columns in the returned
\code{data.frame}? Those extra columns are of type list and contain character
vectors with all annotations for the corresponding measure}

\item{raw}{If FALSE (the default), apply labeling to the dataset.
Otherwise, return codes.}
}
\description{
\code{sc_tabulate()} extracts the data in the table and turns it into a tidy
data.frame. Additionaly, certain STATcube conventions are applied
\itemize{
\item zeros are recoded to \code{NA}s
\item rounding is done according to the precision of each measure
\item time variables are converted into \code{POSIXct}
}

the \code{...} argument decides which measures and/or fields should be included
in the output. If no measures are given, all measures are included. The same
is true for fields.
}
\examples{
table_tourism <- sc_example("accomodation.json") \%>\% sc_table("de")

sc_tabulate(table_tourism)
sc_tabulate(table_tourism, "Saison/Tourismusmonat")
sc_tabulate(table_tourism, "Saison/Tourismusmonat", "Ankünfte")
sc_tabulate(table_tourism, "Ankünfte")

table_trade <- sc_example("foreign_trade.json") \%>\% sc_table("de")
tt <- sc_tabulate(table_trade, "Berichtsjahr", "Import, Wert in Euro",
                  annotations = TRUE)
tt
tt[['Import, Wert in Euro_a']] \%>\% str()
}
