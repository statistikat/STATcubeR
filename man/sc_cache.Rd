% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache.R
\name{sc_cache}
\alias{sc_cache}
\alias{sc_cache_enable}
\alias{sc_cache_disable}
\alias{sc_cache_clear}
\title{Cache responses from the STATcube REST API}
\usage{
## enable caching for the current R session
sc_cache_enable()

## disable caching for the current R session
sc_cache_disable()

## remove all files from the cache
sc_cache_clear()
}
\description{
Functions to cache requested resources in the directory \verb{~/.STATcubeR_cache}
and reuse them in calls to \code{\link[=sc_table]{sc_table()}}, \code{\link[=sc_table_custom]{sc_table_custom()}} \code{\link[=sc_schema]{sc_schema()}} and so forth.
These functions are designed for testing and documentation and should not be
regarded as part of the STATcubeR interface. The caching logic is likely to
change in the future in which case \code{\link[=sc_cache_clear]{sc_cache_clear()}} is required to purge
old cache entries.
}
\details{
Caching can be set up using environment variables. To set up a persistent cache
for both Open Data and the REST API, the following lines in \code{.Renviron} can
be used.\preformatted{STATCUBE_KEY       = YOUR_API_KEY_GOES_HERE
STATCUBE_CACHE     = TRUE
OD_CACHE_DIR       = "~/.cache/STATcubeR/open_data/"
STATCUBE_CACHE_DIR = "~/.cache/STATcubeR/api/"
}

Note that the caches are always used and there is no check to verify if the
resources are unchanged in the server. Caching is not implemented for the
endpoints \code{\link[=sc_info]{sc_info()}} and \code{\link[=sc_rate_limit_table]{sc_rate_limit_table()}}.``
}
\keyword{internal}
